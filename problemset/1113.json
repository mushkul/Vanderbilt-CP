{"Title": "String Transform", "Category": "Additional Problems", "Time Limit": "1.00 s", "Memory Limit": "512 MB", "Description": "Consider the following string transformation: \n \nappend the character # to the string (we assume that # is lexicographically smaller than all other characters of the string)\ngenerate all rotations of the string\nsort the rotations in increasing order\nbased on this order, construct a new string that contains the last character of each rotation\n \n For example, the string babc becomes babc#. Then, the sorted list of rotations is #babc, abc#b, babc#, bc#ba, and c#bab. This yields a string cb#ab. \n", "Input Specification": "\n The only input line contains the transformed string of length n+1. Each character of the original string is one of a\u2013z. \n", "Output Specification": "\n Print the original string of length n. \n", "Constraints": "1 \\le n \\le 10^6", "Example Input": "cb#ab", "Example Output": "babc", "Number": 1113}