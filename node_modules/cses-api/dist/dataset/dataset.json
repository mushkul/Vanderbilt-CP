{ "Introductory Problems": [{ "id": 1068, "name": "Weird Algorithm", "solves": 41228, "attempts": 42976, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Consider an algorithm that takes as input a positive integer n. If n is even, the algorithm divides it by two, and if n is odd, the algorithm multiplies it by three and adds one. The algorithm repeats this, until n is one. For example, the sequence for n = 3 is as follows:\n3 → 10 → 5 → 16 → 8 → 4 → 2 → 1\nYour task is to simulate the execution of the algorithm for a given value of n.", "Input": "The only input line contains an integer n.", "Output": "Print a line that contains all values of n during the algorithm.", "Constraints": "- 1 ≤ n ≤ 10⁶", "Example": "Input:\n3\nOutput:\n3 10 5 16 8 4 2 1" } }, "cases": ["10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/1", "6c978fdbd98ee918bbe6542491c7cd1a92624647ebc7347a98a347683b38466d/2", "238903180cc104ec2c5d8b3f20c5bc61b389ec0a967df8cc208cdc7cd454174f/1", "14aebc13e5bb3f87551f863995c834dcd954f3ed3c17edb6fc0a7bbeacfb7458/2", "932ab0a0e4191d32c0af7b3f565b7b180dbe9869378abc5816f9add54b806e7f/1", "88bb00d013bd5d16810c72ddbbfed9d454b657a6289b2ed4bf2c1ceeb9eb66b4/2", "ce8bafb38615aeb5d44ebbabe78ec14ac35a5de87bdc5ad5ea82a72656024ce4/1", "7f78d5796c823c47743a6291b4a9ae6a5006b16ba9fe5493b04e17fc3794dc82/2", "4c7e32c02a67bf332bedb67c0f040128b5d7c7fed27b75d970f463f0849d8d9d/1", "be3c00faf82ee4f56a148a7acf8ddd24c8825bb9904970d7a69f1cfc22aeafe5/2", "3a20dae03066d4337e361a2f5abef91e993c22d3124cbe6caea160739d3c666e/1", "52c2a6314fed63d4a035a96ed41a46bdf7cd5a889dfe02ee30bc462fc7753593/2", "84c8e5f9c5b072fcc5c9629af19de7371e1b714928807d3c9a8a5c34ef017b7f/1", "91e3d51fc153f144ae97f4eb8cb82ab17c4f44d6cddb6fe12bc12a86f64faeed/2", "432eed7af6fa5b01ac0d38557d3b558b6391db6abd57d81c0219d6b415556d20/1", "08705002d61b610f6e38b2c68d178cd10df6d0af52f277e0de2cdfe233ddda0c/2", "c4c4ec268c19b8c94a7b3ece5609f1cbbc97ebcc86295857938bbfa2b44730df/1", "2e83e5503a37e7814fcc10d2046b81f00b73cab4a230b6226b5ee84005df3fe4/2", "87e44524bbf0ba5f2b7b74e3e51f076ccec2f91e505a9baeaddcabfbf339c03a/1", "9fa285a3889a6ceed3b942b52ec513e9b8a8d84b2e557509e7bbbdc7e60a434b/2", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/1", "31706fa7c08726a26a12990d76f70fcc7b08c5df0d6c81a3402ae37280ea7680/2", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/1", "c5295c00ead93b36a700b78c0cae17503dba4fe423425220b23f8519b5f734cc/2", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/1", "630f7c0294c4388f31b032f229368066a5036f11c0cc0837d766700b3bc18e50/2", "477a3d43f692aeaf1c7f40c0c91bffde3e2e638d8e90c668422373ee82a18521/1", "ba5696053933df77be73bc220eb8e6df25f8a377b3778bc14bb7d1733a02ec46/2"] }, { "id": 1083, "name": "Missing Number", "solves": 34882, "attempts": 36965, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given all numbers between 1, 2, …, n except one. Your task is to find the missing number.", "Input": "The first input line contains an integer n. The second line contains n − 1 numbers. Each number is distinct and between 1 and n (inclusive).", "Output": "Print the missing number.", "Constraints": "- 2 ≤ n ≤ 2 ⋅ 10⁵", "Example": "Input:\n5\n2 3 1 5\nOutput:\n4" } }, "cases": ["8d58f634a5b5051db5ee0bb9d005779b382be410e8ebd5144590f2f0429f9220/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "f08ff7467c77cde28ab6d1db4b8dde3c57f4f13aba3a6c07c113d6cf8118455a/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "ae8a757d3fcc9b676d72093dd83187aaee9f936bd3a61db9df2c12caf522038a/1", "2e6d31a5983a91251bfae5aefa1c0a19d8ba3cf601d0e8a706b4cfa9661a6b8a/2", "0485ca99348bb7c34c94940291acff1f72a25d1dbe5e85d770fb70467fa4bf3f/1", "826b6832e45ba17d625debc95ae8554e148550b00c05b47fa8f7be1c555bc83c/2", "0eae0b7d60cb8fecaab119c4f69a1b9141a5f04518c35874251651384bdc5f6d/1", "c0ffa8001b52adbbeddf56b5aaa58ed0313033d3c4355a2d9eaed9e2f34d351e/2", "72904012404f7578cb29be4c194d6756c927dcf6bf02673dded7b6de9410946c/1", "fde1743383381d6633484616371c1aeca689ab5c506aa0511df98343412f5632/2", "8fccd032011419b6917159f6f9629108367c0ce5ac752afc0456bfbc3a2f5aac/1", "d2540a4f2cec8ae8dffe57bb86c0ba1747fa20da0a58235085e471ea18dae7cd/2", "e0114063f08442a7b70400dbfcb4f477caa94450c429339505da91c0abffe2b1/1", "4f2b3028fbe62d30f40e2a986231564a77e39bc0da6df1769a4f79fd65fa4f81/2", "24a1787c8cc43dd38a513cbb94cc4886644d2ce8c6b130e35d02f708f614e703/1", "e83a363ca497fd5c82ab66e0a23300f4c4104e6fa182cd08d833dc00f258990f/2", "9227047a82a5cddacd44a2e905d488043bc40be1b01e67a0f62cd9472c67475b/1", "b2ade568e04da293f63cdd5fec362e78183f5a89cb93876ba1bda8778bd97f75/2", "8df4b9099eefb4b55a935949edfdf95d74dfac9dd1c8e9d8bf2b1c81f34da18c/1", "d43574be921c54215a1e05bb2fc0c1a4b63dd2aea4bbfd5b9ebc11a2685943e2/2", "a958e438a1f7a236004014c12a36754a34ce644936bd417363ac6573e8bf67c9/1", "1bc5764b08c079c5cf3129d38c13ade46c38c599a24a008d69d5a26c6eb6bd5e/2", "451d660bc5f37a981539cf07c4c6a182693a7d165b4589ecb1165a72555ff90a/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "23282b74d02aa2570176d8ac4bfd67434e182fd5ec01bc4d708cb4c20fadc642/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2"] }, { "id": 1069, "name": "Repetitions", "solves": 30697, "attempts": 32336, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a DNA sequence: a string consisting of characters A, C, G, and T. Your task is to find the longest repetition in the sequence. This is a maximum-length substring containing only one type of character.", "Input": "The only input line contains a string of n characters.", "Output": "Print one integer: the length of the longest repetition.", "Constraints": "- 1 ≤ n ≤ 10⁶", "Example": "Input:\nATTCGGGA\nOutput:\n3" } }, "cases": ["705d290c12895901f809f6c2fe772a94db5181d726464d840682106f4a934b87/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "c6b5ff32ca4aaa736223485c6f1df761c9f9ad07c424cc6ccf0de891e5e2b95f/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "0593cec7c530d70f52e8727b6229f61a76049b6a659236c73feddf1d86654607/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "1c570d7309204d00add832a3370d14bf1a0b190da6f9d117c90d44629bb89345/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "de5319c7802cf1b2a4b9cbf24475ed48c3dfaa1e3c6c27d7e2292032f7318bec/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "ca553022fe1a68654e94b2e11b29010ad5e008d60202ecfb879b0385bab17857/1", "085c348f64a3b543e973a33749e90ba20847b99016a87e5228847597d61ce582/2", "9f6c08ba586c159702cbf6601c503a6631a98213bdb0a64c9e48f192a58f80a9/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "d7971c42b1d058a6babac9b6b4be483ed27ade373a10b3711bc426534dea9cc4/1", "1c5af8f01d1a699dafee1845343733af9390097bcaf27a3af56fb060ded9406d/2", "9764fc81341b9309041a06a578cf753372b9a707b5e079e0738042118149dfe0/1", "1c5af8f01d1a699dafee1845343733af9390097bcaf27a3af56fb060ded9406d/2", "6ecbdd28eebd3ce18c17d043680e6c760496702e6ca3dd5cc38ad309b8b1571a/1", "25d4f2a86deb5e2574bb3210b67bb24fcc4afb19f93a7b65a057daa874a9d18e/2", "06f961b802bc46ee168555f066d28f4f0e9afdf3f88174c1ee6f9de004fc30a0/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "43fc9687ab6b9a5eaa9ca45cd04f13177dbfb0d724411305aba40ced86a17071/1", "085c348f64a3b543e973a33749e90ba20847b99016a87e5228847597d61ce582/2"] }, { "id": 1094, "name": "Increasing Array", "solves": 28323, "attempts": 29533, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given an array of n integers. You want to modify the array so that it is increasing, i.e., every element is at least as large as the previous element. On each move, you may increase the value of any element by one. What is the minimum number of moves required?", "Input": "The first input line contains an integer n: the size of the array. Then, the second line contains n integers x₁, x₂, …, x_(n): the contents of the array.", "Output": "Print the minimum number of moves.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ x_(i) ≤ 10⁹", "Example": "Input:\n5\n3 2 5 1 7\nOutput:\n5" } }, "cases": ["b3d27753d290a4ce2e844ac6e8c1a172df6c1426314089a1db2afb7ad2ceb68c/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "ea19372f2dd9bba0816ff0822ef8fa7cb73fba0db53228b2d65b14edfddbd1f2/1", "2e3cee4f478d2a820e83cd5f744034d7805b662bc4a47ef0b5690ff68eb140eb/2", "dd7d45caea8ec8b5c1b53df2f6e8b52932a67e913568caec14f7697821b5da81/1", "32c2643e0dc65524c9f1f6f9f00937322fd68d59986bc381d9ff2285d23e353d/2", "19d069a1577bf0ca04ba13c31dabeb8de05f9e8d9fdc6548ed48df252403f3ca/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "ba92435d1dd4f068936f0631993c17fd29d159fbcf78cc130e490cd4bc088315/1", "9d6b94767fc3a8fe244b7a1b2f024c014dc9725942800ed22676ea1b9818d605/2", "a6ae5bb865adda449c3f22d3a5529d791dd7ea922515cf92f764f3d0a7f3c7e1/1", "b1a0faf822d72fc95d271b7c2886c859270560e0b77e78298ace03535f087b96/2", "145db7dcfbd1478bc0725d339e047f0c8dced9ae49db8dd543e98e004331575e/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2"] }, { "id": 1070, "name": "Permutations", "solves": 25235, "attempts": 26133, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "A permutation of integers 1, 2, …, n is called beautiful if there are no adjacent elements whose difference is 1. Given n, construct a beautiful permutation if such a permutation exists.", "Input": "The only input line contains an integer n.", "Output": "Print a beautiful permutation of integers 1, 2, …, n. If there are several solutions, you may print any of them. If there are no solutions, print \"NO SOLUTION\".", "Constraints": "- 1 ≤ n ≤ 10⁶", "Example 1": "Input:\n5\nOutput:\n4 2 5 3 1", "Example 2": "Input:\n3\nOutput:\nNO SOLUTION" } }, "cases": ["4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/1", "da7cfe20ba0b56e98734999b87ceaf7fb0caa8cbffcfdf1053d92d05adcbf755/2", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/1", "da7cfe20ba0b56e98734999b87ceaf7fb0caa8cbffcfdf1053d92d05adcbf755/2", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/1", "04ca20e4d5a7aeb6ce08004e5bdb3128589a4d15d39876d72b1e3aa1563e5b49/2", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/1", "4f1557079ed268f884fdc479fbc9db4db29db86f1ace9c136eec62cab42fbbb2/2", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/1", "017523ac13a2ea07b1ba2b3bb8965cc60a6ae1b6f39eb45b0236b2434a848df6/2", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/1", "7e5e8de2f231804a8bb37cfec8d302b760c24c79c8583c22479b172165d84471/2", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/1", "a3a57c102508ff28c50d8469541f2161422f8d4844d7425036d364a460af2e4e/2", "2e6d31a5983a91251bfae5aefa1c0a19d8ba3cf601d0e8a706b4cfa9661a6b8a/1", "43479f3ba29794328a91b318b1cec33fc5cf358269183a036184bed198e38228/2", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/1", "a1b9ff70ab6836ac13c643a6558d5484a69b81495fa2d0fb9acdc8cd64fd71eb/2", "418cf5dfa29c51c784b90be00032da995480ba61f3a3b3da06d1122caf097bbd/1", "7d2d27bbcdbfa808bf153813889d3b4609f21cee306620fe545e0fd6191b208b/2", "59b3053c1fbaedfb9c88a11d10907b27581c835292dd7e8a1e59b946240db0af/1", "b330cccf5199ee7ae89e2c8a7baff3deeee3684433dc1ca19e73b4cad7e0e05b/2", "e8fcf093213ea583d7c67632efd6214e97c6bc0beb6529a93248782d025fd36f/1", "ebb1ff495ab91dd173e79f97cf76b4aef7cd91bb82f063800986b0f120f7e977/2", "03803ecd6815d6f5761b5840053d889e629feb600746c024d30d3f7588c0f6cd/1", "2dfe6b6235647fddb2193b06f4ad92f379096fa5e451bc52111d8b6c4c94df01/2", "73255978f21ecb65bf8fe608e4cb8cc415c7c002542aaafd3ab65321e9fc6297/1", "8b5efaef552a93d2e2f6602d90110d340e0fdad5e84166fd94293d5df217c56d/2", "b9eed8702be50e46f006bc0252654a93aa465e6f8a170faea2fd57e410eca5d8/1", "2b8d197d61599b8881d7bcb40cb87c91ad1a01e5dfb4a126b841ae9b525a4c96/2", "7aecb1110969a24d618d3cef32618cd001985efcd6f82a560039988465b90b99/1", "1d3ad868dc7513f3f3467e1500bc3755f22ba2b89fe1d918f1d00e1958e1dbcc/2", "a6f38b4dd310eb6df139ae5806ee59fb711be241370e3b04beaa1846bd4eb336/1", "fa994ef4ba7f28a0c75241a3f7ff15d6f0c45a2602fd23aa91deee90cfe3b40a/2", "0a8bf5e64efadc53a5e82dc9b0f90b9e65014554522376d6828ffa775dcff8e0/1", "9ca43b3232cd1714987d3b41ef9dd9382a1d0e41ea03d5b2d7b99d1505762d08/2", "57de18140e32c1ef109d3447566edfe3239c5fe484cdffe66194b988f8699712/1", "74ec2407225eaba829cb30337437b2f481fa9bd055c07cec9ea6f91825308923/2", "085c348f64a3b543e973a33749e90ba20847b99016a87e5228847597d61ce582/1", "0dc308ded8d2f24b55e7b08a147cf77033d4b84528fdd9c342b4fa8057610433/2"] }, { "id": 1071, "name": "Number Spiral", "solves": 17788, "attempts": 19379, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "A number spiral is an infinite grid whose upper-left square has number 1. Here are the first five layers of the spiral: Your task is to find out the number in row y and column x.", "Input": "The first input line contains an integer t: the number of tests. After this, there are t lines, each containing integers y and x.", "Output": "For each test, print the number in row y and column x.", "Constraints": "- 1 ≤ t ≤ 10⁵\n- 1 ≤ y, x ≤ 10⁹", "Example": "Input:\n3\n2 3\n1 1\n4 2\nOutput:\n8\n1\n15" } }, "cases": ["9eb6a3cbc6cda55456af1e53d1c9b90a7b6806e3235bf6f2db3c9f37a421b5a6/1", "59723ea17cd00129a496784c34498889dd2faa6a6ddc9c9ed88f9f4a87ce7374/2", "0d3a39eaa4944e8e202fcc24632da51e517e593e905f02e813c339c43449346b/1", "172ecf1439badcc82e47017d4982c91dd14a410575127a172a9e3303cb704d44/2"] }, { "id": 1072, "name": "Two Knights", "solves": 13297, "attempts": 13749, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to count for k = 1, 2, …, n the number of ways two knights can be placed on a k × k chessboard so that they do not attack each other.", "Input": "The only input line contains an integer n.", "Output": "Print n integers: the results.", "Constraints": "- 1 ≤ n ≤ 10000", "Example": "Input:\n8\nOutput:\n0\n6\n28\n96\n252\n550\n1056\n1848" } }, "cases": ["876e13f4e07bb39705302c01f445ffd2d2c3b180a207e4d959d6b671c67da09b/1", "5f700b38e4ee8fb0a0cd7810ba499b0a9cc4eb70aff417135c3865112e754f75/2", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/1", "df4f9b728b7582d27215a2a8164a6838bd7a9b73801ebd161a1a39ed6a23d434/2", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "876e13f4e07bb39705302c01f445ffd2d2c3b180a207e4d959d6b671c67da09b/1", "5f700b38e4ee8fb0a0cd7810ba499b0a9cc4eb70aff417135c3865112e754f75/2"] }, { "id": 1092, "name": "Two Sets", "solves": 14237, "attempts": 15497, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to divide the numbers 1, 2, …, n into two sets of equal sum.", "Input": "The only input line contains an integer n.", "Output": "Print \"YES\", if the division is possible, and \"NO\" otherwise. After this, if the division is possible, print an example of how to create the sets. First, print the number of elements in the first set followed by the elements themselves in a separate line, and then, print the second set in a similar way.", "Constraints": "- 1 ≤ n ≤ 10⁶", "Example 1": "Input:\n7\nOutput:\nYES\n4\n1 2 4 7\n3\n3 5 6", "Example 2": "Input:\n6\nOutput:\nNO" } }, "cases": ["4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/1", "2bc6497641a36d1c5e97a97555625c80bcf6a794c4452c8649dd255269ce56b4/2", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/1", "7c3e4761d8b17ca4a1306fc23f34fbb56a07a659b7d2ac077474e8d5c9bcd93c/2", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/1", "1ac9a3006f26baca25e2f0b1557ea3dbd9f7d3c1a299579c4a0e10eb5f2666af/2", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/1", "64a3e86fee78d4c7f6a8b7aee99bd1a1e95ca989e81156b01a927b5a6f8efaeb/2", "2e6d31a5983a91251bfae5aefa1c0a19d8ba3cf601d0e8a706b4cfa9661a6b8a/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "08c7b0b8f47526766358506b6a6ef011f3096353072ec56800e5ebfc6f952028/1", "288ed3b7693c8f362569c3870a4574c969accf7ce44c1ba69ad46cad70514e47/2", "c0f7411f56bb4804d51ba306151e95015fb68f41b9bcd12ec2463e9458d913c0/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "bb1a781c562b9e1738bcf90339487a01e3b024ee61024386746dd5a45a0441e8/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "00a6c14a3eef81ec11adfa00b9bdbbec884fbbb08a61378b9d5ad223008a7366/1", "fc7887f9b0dc78f18a619852f28b2ef35dd471405115c700e786b3d22be59727/2", "eb5e058327992fe8b2ad347b65b6dde25199e32eb9bf6496ecdeedaf9e2c3d3c/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "d0c506a7af5e5f522dba37023e0cfa3e88a7a49014d8b8ab437803da2a343eba/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "e82ecba7281a31c40effcba60c6a5e6d5129748311f7ea154927e9b35961833c/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "cee584cf0bd1fbfaded701ce3dd6c998c74169ebfb8f0ae44d81782f7b19872c/1", "43237b0f323dce91bca5183efad819c29a7ad061000c0f83116c2ebdb1d490b8/2", "a54212182f2b7e9512e3e970b3609f36451e74c021aa680f60c6b01d8dfc005d/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "53e52976c51d72d4067b9eec48bf69d8782492d50888cfe05d66662d40082f51/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "085c348f64a3b543e973a33749e90ba20847b99016a87e5228847597d61ce582/1", "d3a4ceb9eac0dbef43c092350ddcd3cd9cf95447b0ed2ab65ec906e85c73072b/2", "a1fb50e6c86fae1679ef3351296fd6713411a08cf8dd1790a4fd05fae8688164/1", "240529ac7aec61552dc21b670035f03052be85411b552c1b997ccd2dd6ae2d06/2", "238903180cc104ec2c5d8b3f20c5bc61b389ec0a967df8cc208cdc7cd454174f/1", "32a352945331bb9bfb07da81958b9fd1fb010c3c2f6286e477ba705c23c10a6b/2"] }, { "id": 1617, "name": "Bit Strings", "solves": 17081, "attempts": 18047, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to calculate the number of bit strings of length n. For example, if n = 3, the correct answer is 8, because the possible bit strings are 000, 001, 010, 011, 100, 101, 110, and 111.", "Input": "The only input line has an integer n.", "Output": "Print the result modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n ≤ 10⁶", "Example": "Input:\n3\nOutput:\n8" } }, "cases": ["10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/1", "56292515f7d3a7110811eb8de26b3f75f82a0766aa5a1fd66ebcfcb84fe6d5ff/2", "238903180cc104ec2c5d8b3f20c5bc61b389ec0a967df8cc208cdc7cd454174f/1", "de33640a0eb4eaa5ecd485dccb29eab8e5af8268c84edd0794b4c6a4acae7607/2", "932ab0a0e4191d32c0af7b3f565b7b180dbe9869378abc5816f9add54b806e7f/1", "60cd686f3d326b92aff7ba442a3634615e3908f64a629542251992253004ecdd/2", "ce8bafb38615aeb5d44ebbabe78ec14ac35a5de87bdc5ad5ea82a72656024ce4/1", "15aa67cdf55b1a99a48f47e33a4ac212c09266052acbbb79edd45eeb4c3c6311/2", "4c7e32c02a67bf332bedb67c0f040128b5d7c7fed27b75d970f463f0849d8d9d/1", "6fff7c9ff73cb42d93ccb4698c7218b013c4699483ac640272645ce5037502d6/2", "3a20dae03066d4337e361a2f5abef91e993c22d3124cbe6caea160739d3c666e/1", "420be00aae13b33539a034566468a521558cd98265d74877f779dd3aa770e7cf/2", "84c8e5f9c5b072fcc5c9629af19de7371e1b714928807d3c9a8a5c34ef017b7f/1", "e0f616bf455320b54042973379f2904b0ceec3c646192e856919ea6ba9f1a719/2", "432eed7af6fa5b01ac0d38557d3b558b6391db6abd57d81c0219d6b415556d20/1", "9af9c4ff9b793226a3f7a336c5d047761d5cb8053c3c8585c44613c05fbf2ed0/2", "c4c4ec268c19b8c94a7b3ece5609f1cbbc97ebcc86295857938bbfa2b44730df/1", "9bd4dbca8d797da26d3505c858caebcc4b58ff20dd71023a8c73e4081a46faaf/2", "87e44524bbf0ba5f2b7b74e3e51f076ccec2f91e505a9baeaddcabfbf339c03a/1", "56db843d84b0b806b5a178c0cf65dd863151fd4627448379a0f709d36dcf7ea5/2", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "085c348f64a3b543e973a33749e90ba20847b99016a87e5228847597d61ce582/1", "e25745dba1bf0c7d4af31d6985daf3482c62ffd37050b1640a5bea714e7d1f53/2"] }, { "id": 1618, "name": "Trailing Zeros", "solves": 16112, "attempts": 17163, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to calculate the number of trailing zeros in the factorial n!. For example, 20! = 2432902008176640000 and it has 4 trailing zeros.", "Input": "The only input line has an integer n.", "Output": "Print the number of trailing zeros in n!.", "Constraints": "- 1 ≤ n ≤ 10⁹", "Example": "Input:\n20\nOutput:\n4" } }, "cases": ["3702a39b6ec17e5f1fe79298d55e9eab68534d263f20eb2da826a2ebcefd226c/1", "969eeff1eaac226a228cc61503effa46ea87d872ef3174365befc7c36ffa3c48/2", "77f963b32da36f58accc798e0bf12c2c7adbc1e55e13bb72a644220883213533/1", "e5f97c1c5501a9d57e773af04b6064ada69af321b5ee52e9eccde11d4b44e0fc/2", "8828148e53801a6c341c4eed6549ebbf34555a0bb2e371ef5eed8fbfdc3ad06b/1", "1326faec3eb42dc72ddffe46daf3940b932f48b9799f6cbf28e80504e7b34958/2", "beb576f786b7fa4f8b67952d7b924d728aa1907a0eb7ee26aa5dfe56c13b0c98/1", "586900065999e00dfd03caec2bd5eb43dd939f082db4718edecd72fabfdcdbec/2", "149024b6454426aa407dbdd46a119711024cf05426cdfa12a836032d01fdb17e/1", "3b2b717b495cea40b7e1adeddc02cb9a68be0e674131fd80bd1f8b159c9dbaff/2", "dfd9cb5fa640078da027126ac0840e73c548313735982c017d7d0214d4d6978a/1", "8aa10f86912202b85a8e2883dff0c461983b55ab5c5fa7754b3a0bfcaf34d300/2", "07078e5c6a29fc59e03c1abcfe16c4b9b7ccae74b8b23bd4d1645fb95925fcd9/1", "1214d7371c6f9bf38a266d1c127b49950c458826a669210dfc4a1212f93de333/2", "07ffdba631cde62c58aa7d5b51aec1831c8e9cd1f2086282935427921a37c3c1/1", "d4d8f7645b79f12aaf7d6610e3274ba411e78511fc5b2e3e81fe244ce7476a80/2", "fed7402adb707a218f743dae0c6839dc0a1d3d894c358f0d0dbeae498832ef8b/1", "28c1854ff9f6296068f8edcea4fb86289c8a7574b46531dd287169cc5be323f6/2", "ecd1c7c67f7d2df6500b825c333b2cd689864549627043f655a53a91db767bca/1", "c26ccbec79794f30ce984773ea06f4c503785716c596a72f9b5bac9190ca2f17/2", "8bd5a23c3aef1243c78bac155b39b9d57a43d8c49665ccf6f42acf2992a94afa/1", "ecf97f6f69773e4dbf0657f0d773f3c34409b152902fca1f64f9fed011aadd43/2", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2"] }, { "id": 1754, "name": "Coin Piles", "solves": 14042, "attempts": 15514, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You have two coin piles containing a and b coins. On each move, you can either remove one coin from the left pile and two coins from the right pile, or two coins from the left pile and one coin from the right pile. Your task is to efficiently find out if you can empty both the piles.", "Input": "The first input line has an integer t: the number of tests. After this, there are t lines, each of which has two integers a and b: the numbers of coins in the piles.", "Output": "For each test, print \"YES\" if you can empty the piles and \"NO\" otherwise.", "Constraints": "- 1 ≤ t ≤ 10⁵\n- 0 ≤ a, b ≤ 10⁹", "Example": "Input:\n3\n2 1\n2 2\n3 3\nOutput:\nYES\nNO\nYES" } }, "cases": ["9ea35747c2646b291cece7549462479ede5430f9604451981811ef4b99a13613/1", "fb96e3429c424c84ac0839d1533e5339650e1a922e95edc9798e979b219d90a8/2", "a99b3ebb5358628b11fedf6d7564a16cf2d81e2001f0f38f812b927403f783cd/1", "cc7aec585a6170f65a611905476a6d598bff036bccb39fc12750f85c69c7b527/2", "25587709eb61d1760456be110844c67d1361fc55456ffa545da53cbc803b55e2/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2"] }, { "id": 1755, "name": "Palindrome Reorder", "solves": 12393, "attempts": 13276, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given a string, your task is to reorder its letters in such a way that it becomes a palindrome (i.e., it reads the same forwards and backwards).", "Input": "The only input line has a string of length n consisting of characters A–Z.", "Output": "Print a palindrome consisting of the characters of the original string. You may print any valid solution. If there are no solutions, print \"NO SOLUTION\".", "Constraints": "- 1 ≤ n ≤ 10⁶", "Example": "Input:\nAAAACACBA\nOutput:\nAACABACAA" } }, "cases": ["705d290c12895901f809f6c2fe772a94db5181d726464d840682106f4a934b87/1", "705d290c12895901f809f6c2fe772a94db5181d726464d840682106f4a934b87/2", "366b1312284e32bae51f3171bf34dc9ca13d76f36e772be161f4b34869df39b0/1", "da7cfe20ba0b56e98734999b87ceaf7fb0caa8cbffcfdf1053d92d05adcbf755/2", "1721ad895af5d0349dae368e79b07da7979e25c69979526e0c31405bba1fb29d/1", "2af4c7baf9369602a94a7d710b7f906d02bdb91ae77b44db69fb7537c877505e/2", "73c14f4e095fe53b061ba0c503125e5d2c5f7a8cff4afcd142f53dd7aa5680e4/1", "9141c258711552af74c8c32a52de1b4752aa885796b42159703e9dff44773d3e/2", "15dd86942794fbd6012baba71cf7313b50dc5be7cd705160c1103c9b587587f8/1", "da7cfe20ba0b56e98734999b87ceaf7fb0caa8cbffcfdf1053d92d05adcbf755/2", "ca553022fe1a68654e94b2e11b29010ad5e008d60202ecfb879b0385bab17857/1", "ca553022fe1a68654e94b2e11b29010ad5e008d60202ecfb879b0385bab17857/2", "882f505dd421d6930c2c9950010196818f2141a4f370d17fdc5edfaed0b7ab9e/1", "182308dc95e9881afbc722d684c24f1bfb39fe0ea442e5f6f0c544d9e7b4831d/2", "7b79d46a96c28a0d1db33b453e5d453e5b2ff89ba378016f91ec0d164d09dc7c/1", "5f73b60df5b5c8cb38410f8afdfaca79294cdd71c3efbc2ba49f7c9244c948ba/2", "dd435da2a10c7e7100100866b45d05f9a274a1b0b265ce732839740d0526a952/1", "4368119468ae1e43247b1a6f85e20c56199000a4ce32211a521008e3fb873684/2", "a9f643c81b1329c91374a92c4bdf29ee8f6d9415d8614dcd59d121ddf0e4c1fc/1", "da7cfe20ba0b56e98734999b87ceaf7fb0caa8cbffcfdf1053d92d05adcbf755/2", "af968ff8bbb992dcefb305065c936f031e9820ff3a6ccc7ba7fc050cd415deb3/1", "90022980e2b8a762084c1c805709516f22ad96a6fd8fedc6807e11190dd14f92/2", "06f961b802bc46ee168555f066d28f4f0e9afdf3f88174c1ee6f9de004fc30a0/1", "06f961b802bc46ee168555f066d28f4f0e9afdf3f88174c1ee6f9de004fc30a0/2", "da681d6977c927d5a0989d0c9a381e90afc9b2a39ce07e771ea01839e7e99969/1", "da681d6977c927d5a0989d0c9a381e90afc9b2a39ce07e771ea01839e7e99969/2", "3c2f8c95d821091235eb78d9bb133274cced41af495ce1ef46af2b07faae534e/1", "da7cfe20ba0b56e98734999b87ceaf7fb0caa8cbffcfdf1053d92d05adcbf755/2", "f25eb6fb5f93408f0c1a5b3417999449efdfb3340e67d6a67c7a28a6f2ee7b77/1", "01f12ed85412968bfd4c16cc53de0668eae0678bc29c8fbfacc1b1cec8fcffc8/2"] }, { "id": 2205, "name": "Gray Code", "solves": 5918, "attempts": 6721, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "A Gray code is a list of all 2^(n) bit strings of length n, where any two successive strings differ in exactly one bit (i.e., their Hamming distance is one). Your task is to create a Gray code for a given length n.", "Input": "The only input line has an integer n.", "Output": "Print 2^(n) lines that describe the Gray code. You can print any valid solution.", "Constraints": "- 1 ≤ n ≤ 16", "Example": "Input:\n2\nOutput:\n00\n01\n11\n10" } }, "cases": ["4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/1", "82c1315e6c757f33c4a77ca58b2a184f5a88614470c05ec77f3d28918db6b8ae/2", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/1", "7cd4980940c07636de8f5d019e050354fac2111dc058d2e15c11af9d89fae43c/2", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/1", "983cd51f4e15a9e2e3d25b3bb7fe98482f854ef5ce3ad83e4a8ec892866d8a1c/2", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/1", "e5e3325d620884ab1cbe3b6bed9d41985aa4d6196f3be86f511004759d474680/2", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/1", "8980d9fe688c3126fc5d0aea208c619e3679c5e9e7decfdb1c798bbf32f48134/2", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/1", "11912ba90cee2201e857117d51a61fe4a22f34ed6008b4b17460ba1b38a79ae0/2", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/1", "cf4c11ed103c2f01a2e10173de29c3e5f17d9d5ec2701704b5dfa1248d2d1a7a/2", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/1", "2a8e4fef4097f8bfbb29a6c72852d2ec9752c8a7857ed2e812462ebfcacf343d/2", "2e6d31a5983a91251bfae5aefa1c0a19d8ba3cf601d0e8a706b4cfa9661a6b8a/1", "f3f8af8956ee3bea8a66d7cf7265218eaad664a54541db86d8f216608888091f/2", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/1", "6fa048e0eb781ef70dc1a90c516b3bd9db5cc934331b73bf52c57bd47fd4248b/2", "25d4f2a86deb5e2574bb3210b67bb24fcc4afb19f93a7b65a057daa874a9d18e/1", "f7e830f535d12fff684e94c84791640fc2ecc3aa2f0f20c52e8bd23f9bf5352f/2", "a1fb50e6c86fae1679ef3351296fd6713411a08cf8dd1790a4fd05fae8688164/1", "e39369435939f4695b66fe5e3838717979ad87f5f3b28b2e1e402980cdf05edd/2", "1a252402972f6057fa53cc172b52b9ffca698e18311facd0f3b06ecaaef79e17/1", "5f7dfd831931ee4b50a8b5bfd685bfdb15f0cb004227136be8f17aa5cae2363a/2", "9a92adbc0cee38ef658c71ce1b1bf8c65668f166bfb213644c895ccb1ad07a25/1", "21d2d022a49dcc9ea3c947135a592d263d5f75c22dceee260fa508f039477933/2", "238903180cc104ec2c5d8b3f20c5bc61b389ec0a967df8cc208cdc7cd454174f/1", "f90fb7cbd4775226368dcbdeeaea39596519e9b0209f978ca892768770f06038/2", "e6c21e8d260fe71882debdb339d2402a2ca7648529bc2303f48649bce0380017/1", "e1aa0ee5105a60f36874124b12e1e950353594898d31475b9ef51937439e7ecd/2"] }, { "id": 2165, "name": "Tower of Hanoi", "solves": 5406, "attempts": 5650, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "The Tower of Hanoi game consists of three stacks (left, middle and right) and n round disks of different sizes. Initially, the left stack has all the disks, in increasing order of size from top to bottom. The goal is to move all the disks to the right stack using the middle stack. On each move you can move the uppermost disk from a stack to another stack. In addition, it is not allowed to place a larger disk on a smaller disk. Your task is to find a solution that minimizes the number of moves.", "Input": "The only input line has an integer n: the number of disks.", "Output": "First print an integer k: the minimum number of moves. After this, print k lines that describe the moves. Each line has two integers a and b: you move a disk from stack a to stack b.", "Constraints": "- 1 ≤ n ≤ 16", "Example": "Input:\n2\nOutput:\n3\n1 2\n1 3\n2 3" } }, "cases": ["4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/1", "0880b9669fa6d82f7223ec67bc09b247ed598249020bd967e01c7f5dd42818aa/2", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/1", "a3e2f54f8a85f78d0d22820bc9acefd878cf4194c989e32d490b74a73c0d8472/2", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/1", "8a9a6c07a3ccecc806afe3ca230cd0005693bbe7850aee1889744622b9af1f3d/2", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/1", "889c3ec85c008ccabb93a2fe78d45778f7f6d01fe5203ca3bbd52eac33d63b8d/2", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/1", "0b935416327a2eeb6ecceff43ca6f75376d52467bfb7ce6eb2f8c941bd51f4ad/2", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/1", "ebbced7034924b062c8beb9dd85ef9027bd87f80e5120a8bd53bb0614d43eb41/2", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/1", "9dd0c6cfe990b1ab3db198c44cacb124cd2ab029bb189535f26b30559114cadb/2", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/1", "2e56238ecb8d8160f3b51aaffbbaa02c2a48b7f34b6bf6046559044c76042b0d/2", "2e6d31a5983a91251bfae5aefa1c0a19d8ba3cf601d0e8a706b4cfa9661a6b8a/1", "40cfa9055da5b685b7bd771e3a6b89461f9d5af936a970578a771a19e3d33169/2", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/1", "0ff1572b3450c5cf64b8a6c617cddd4f4deb282ae2e6b1c8fa57b8f2a1ad4362/2", "25d4f2a86deb5e2574bb3210b67bb24fcc4afb19f93a7b65a057daa874a9d18e/1", "0f67e599fe066c44b56274f26f07cc2fe4935ec4198b1356cdfad082f91ddba5/2", "a1fb50e6c86fae1679ef3351296fd6713411a08cf8dd1790a4fd05fae8688164/1", "b7d0d2f02e29df12a93b02cb1a6b783ffa43a0887580ce4e30b8d0118266b887/2", "1a252402972f6057fa53cc172b52b9ffca698e18311facd0f3b06ecaaef79e17/1", "00f191b84db9416d2c61488790f52c8b4a73a690eb306719fb136ec077ee1758/2", "9a92adbc0cee38ef658c71ce1b1bf8c65668f166bfb213644c895ccb1ad07a25/1", "e17463831911a5f66991ef704ce272279c3c5f5427c4a28d1175951a9429f3bf/2", "238903180cc104ec2c5d8b3f20c5bc61b389ec0a967df8cc208cdc7cd454174f/1", "e7dc4c21eeb3e77b37c2e32ca58965feeb84c0346d95f45beaffdf540c874fbf/2", "e6c21e8d260fe71882debdb339d2402a2ca7648529bc2303f48649bce0380017/1", "a5caa791dd7eb03d8d1f7833d4edb958153d9139d65bc64faf23780c61ea308f/2"] }, { "id": 1622, "name": "Creating Strings", "solves": 11214, "attempts": 11542, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given a string, your task is to generate all different strings that can be created using its characters.", "Input": "The only input line has a string of length n. Each character is between a–z.", "Output": "First print an integer k: the number of strings. Then print k lines: the strings in alphabetical order.", "Constraints": "- 1 ≤ n ≤ 8", "Example": "Input:\naabac\nOutput:\n20\naaabc\naaacb\naabac\naabca\naacab\naacba\nabaac\nabaca\nabcaa\nacaab\nacaba\nacbaa\nbaaac\nbaaca\nbacaa\nbcaaa\ncaaab\ncaaba\ncabaa\ncbaaa" } }, "cases": ["edeaaff3f1774ad2888673770c6d64097e391bc362d7d6fb34982ddf0efd18cb/1", "2c882b302d5f258e56ac08bbcec6caf908ff032b4f6958daa99b573a5de85e8a/2", "ef9ade9db2a93d938c081d2760f356b8a52c9c081dd2adcbb709f118f44d6a65/1", "1f9e72c3e241362d504ff3ec517378d562716f58ae07f73f53d9b83b6208ba38/2", "298497ad818c3d927498537ed5ab4f9ae663747b6d00ec9a5d0bd9e30a6b714b/1", "c2ccb6068013a4181c8b3aa161828dd343b62813e183bf939f1da65108201624/2", "97c68304cee2c147cb62886e928048554c46a302b10aea98312b83dd41a76890/1", "82dc086ba9f5e9047682a6c146fa5edd606b9478972ff079df1e34581d6b5f13/2"] }, { "id": 1623, "name": "Apple Division", "solves": 10128, "attempts": 11759, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n apples with known weights. Your task is to divide the apples into two groups so that the difference between the weights of the groups is minimal.", "Input": "The first input line has an integer n: the number of apples. The next line has n integers p₁, p₂, …, p_(n): the weight of each apple.", "Output": "Print one integer: the minimum difference between the weights of the groups.", "Constraints": "- 1 ≤ n ≤ 20\n- 1 ≤ p_(i) ≤ 10⁹", "Example": "Input:\n5\n3 2 7 4 1\nOutput:\n1\nExplanation: Group 1 has weights 2, 3 and 4 (total weight 9), and group 2 has weights 1 and 7 (total weight 8)." } }, "cases": ["3e82afaeb414495b45d9b1e5ef8b6ada9a7aa2113776935721df6bb47138297b/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "7f3e0c4171fcc286bc1fc1ed06796284ae7f98f61c8a3fcd69627f0200dacb0f/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "fc7c78c64b58824d4cb911f1b7fd3d134dfafefecb0d8588cadac79c1fdea893/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "e5aadf61d18eff1628648378bdd3dfccef32c4aed282e8162785f849cdeac55f/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "6d8c5b49c3bf3d48bfd69543867f17d3a2d345157a54613272106aadbfe722e4/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "91cec67b67a98c064d30ec25088c058b5cc9afac4b72c8be4dbaf94dbe801336/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "d08ef13da0d2d25149ebf91a7fbfbff5383ad7213012bd1778f90bccde16905e/1", "b88f901a07c1057918dcc71e58c6da739f26074d50e9208bf40ed22a8a063d61/2", "094bebcdff6ade7f92158a2cc5952d3145b042c636d38383a6b5665f046bb36d/1", "b2b66009853856d05ab22d96211622aced889b9a6d20c0cecdb7c6c0f7f88f38/2", "48524f762a6fab045f2bef0e81ccdea2a14dd175cfb6bcf63cfa281cd6ec5873/1", "932fee9bb13e34748d40a5afe77df3f597e4f2337b8a32b5c2f94970b5e1886a/2", "4c39eef494958edea0b800a095e3224c463d73b3cfaa91dd66461e0b88d07256/1", "6b18f74ad647638fe180e4fd41b46a3276d7637ffd5025210eac73c262b86aa5/2", "171e950cd1600b9aafdb06bc98009e6d55c88af9cb0c068cc4b931c3996b22e1/1", "f8ee86d74466c9bb02114bb252c0e809919ce685440e9a519e28edba551621e7/2", "d6fb8a0540e1114b23f93e85c3021c20cd4e5bddf3a1f502d6129665748fdea3/1", "54531e5a68e6e2219073678f6a03ff709f2d5976c148f9fa3885d653242fccae/2", "e1799a325686d59e370ceb604fe5cfc38e5622b46fc9ebef2847feff47334f2a/1", "8bd5a23c3aef1243c78bac155b39b9d57a43d8c49665ccf6f42acf2992a94afa/2", "3c5b54a75e483fd7863419c9c44f76601871d171c02a7a1e7490efaf809bd1da/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "ad0fadf63cc7cd779ce475e345bf4063565b63a3c2efef1eebc89790aaa6acba/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "dea97b293bcbbb16b3a4d8651fb67b0bad2d2bdd10f21bab0633bcfce9bd064b/1", "fd72146cd82124f7565f7ac5bf911ebd0a6a11d77af1a301cacac4ff6fe486da/2", "c2630cee58ae4ba7cd9b9952e0e913bcd7ffcd36ef186f3b895b2a73816aeb1c/1", "0ddb6ca3080e18b368774746e7f462d1026a7b53857a89df8bda0339f4f6ebcd/2"] }, { "id": 1624, "name": "Chessboard and Queens", "solves": 6072, "attempts": 6190, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to place eight queens on a chessboard so that no two queens are attacking each other. As an additional challenge, each square is either free or reserved, and you can only place queens on the free squares. However, the reserved squares do not prevent queens from attacking each other. How many possible ways are there to place the queens?", "Input": "The input has eight lines, and each of them has eight characters. Each square is either free (\n.\n) or reserved (\n*\n).", "Output": "Print one integer: the number of ways you can place the queens.", "Example": "Input:\n........\n........\n..*.....\n........\n........\n.....**.\n...*....\n........\nOutput:\n65" } }, "cases": ["3217a8a67d5a0a91078ec02e4d62970ea0268407ea0864f8f7125a3ed2a0e6e4/1", "13c1dc569ae4a0d7f90d8f83d22fc9c8fa526e133f8fea0f9526c8533c4d8da3/2", "78607616377115e290a07256386aba2e091260fd1a19dec478d2b5c58139f045/1", "93a73825c1b761d11bf2b3f4dff760d07888d3fde05dcf55f1da84aa6041a5a8/2", "62011394af02b9f763e9669fff7f112f7a35535aaee7307d91a082de7776dc7b/1", "bd5fa6e75f0ddfcd9ff32e0a2297554cd81188f177f14d7ce416310efa0b5c77/2", "c7fabf3d89c382255fc6d6a350c26b9bd26c6530cf7ea8e817f025f9f33fa01f/1", "25d4f2a86deb5e2574bb3210b67bb24fcc4afb19f93a7b65a057daa874a9d18e/2", "d6ab412f6af33afee596b5b4f8e334e2f3366188c5166d98a4fb59dc6cf77fc9/1", "1a252402972f6057fa53cc172b52b9ffca698e18311facd0f3b06ecaaef79e17/2", "a1360de5c79825a5ba7bf4f4250c0e1252490529da943d64fded7c90215bd5d5/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "40d3bd6ee5b601ef2546ef2013678f486ba590a535cbff6c74d5ffed96624d0b/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "f05347bfc13c786959b04a31e3fc3537132d0d6ba56be3d4cd716570349c8db1/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "a47e6fa432522b76b912067d347f6fd8feb00634f6e9c98d37bbc18022723e49/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "ac57f773ceceb829b3422926e30c6fd037ac5e2f08dce484f68a0817ea4f64a9/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2"] }, { "id": 2431, "name": "Digit Queries", "solves": 2971, "attempts": 3681, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Consider an infinite string that consists of all positive integers in increasing order:\n12345678910111213141516171819202122232425...\nYour task is to process q queries of the form: what is the digit at position k in the string?", "Input": "The first input line has an integer q: the number of queries. After this, there are q lines that describe the queries. Each line has an integer k: a 1-indexed position in the string.", "Output": "For each query, print the corresponding digit.", "Constraints": "- 1 ≤ q ≤ 1000\n- 1 ≤ k ≤ 10¹⁸", "Example": "Input:\n3\n7\n19\n12\nOutput:\n7\n4\n1" } }, "cases": ["1c22b34728b3438b3adb6eaf019358fcf90f8588b787324f409f39e86b7898a9/1", "6fa92145c08db369998b5ab179e4e27b38b3f8191de41e302c13033c8ff39fb8/2", "69711786e7b89881b7cbbb9f962e4c916c9f9729676792c5626d7f53eab6940f/1", "c91756aff3271a15c97433de70b6564234bd73d04c33a02092129e145f14f0ac/2", "cdef9be5cbe9cf3d783706790156a2e23579dd7bec33f082196851cdb99eb4f7/1", "ea02b5c8569d7f9e7ea4a7354e97be118099b357e3fbaadedb6e122c6b78e70d/2", "c4788b6c16100ada28999513660276817eb051e1a4db5d55f95f0dfe8eda72e5/1", "c954b1f7b08a653d13a44489bac56595698767703979c90583fe3684b1cd0b3c/2"] }, { "id": 1625, "name": "Grid Paths", "solves": 2470, "attempts": 3234, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are 88418 paths in a 7 × 7 grid from the upper-left square to the lower-left square. Each path corresponds to a 48-character description consisting of characters\nD\n(down),\nU\n(up),\nL\n(left) and\nR\n(right). For example, the path corresponds to the description\nDRURRRRRDDDLUULDDDLDRRURDDLLLLLURULURRUULDLLDDDD\n. You are given a description of a path which may also contain characters\n?\n(any direction). Your task is to calculate the number of paths that match the description.", "Input": "The only input line has a 48-character string of characters\n?\n,\nD\n,\nU\n,\nL\nand\nR\n.", "Output": "Print one integer: the total number of paths.", "Example": "Input:\n??????R??????U??????????????????????????LD????D?\nOutput:\n201" } }, "cases": ["98c6105a17912e32c6eb724258a7632f61ee9fb7cae1b4de13cefe819f0b1c03/1", "154db6616673d1fb336a5bb1dd98e2e8df46c8927a699a6b431428b5c693ae72/2", "847fbe49933c95070a45b5b32bf099cd6599ef3cd4227b34d94e1fefac893c96/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "66a23a90448f4b240e4a04e7f89d4bdba6f33e7fbc23ae162f143153e2f2d0df/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "dadbf70fdf5601a46f52e120eaca0eeab23e6e15a904a807b7b065c06919b598/1", "14dfc2be9e2a7ea12aee8fdec9fd8bec094545135ea0f6ba670ed61d86e6650c/2", "18bbe1813e3b80e2844671cbda9d4377d239e2af3dd2c0e3114fa354699c5dfe/1", "7757df589d2dcf60b6ef20aca61d7174620e3e109a7eb27bcd49115a976b40e9/2", "f122d1b5f9bea45096572430c1c9098def0bb11978b411b909c1d213d5627f3a/1", "1fb472854dc1636329cde14cd7122fc9fc300676de5f8fccfef8a2803397d94d/2", "ba4dbfab09ba38fcf170aec8482b2f1e90c214bd79702b212a92dcc2176e2a12/1", "99f70e072949c3c69185521a070595c86302f2cf5ec5a00629c5ff9111fa84f6/2", "2672689075be669363ba958518d59d9d583fb1d290cb63a34163f813e8129f33/1", "5f8064636753265c7f1b1ee075df77e1ae9bce7e94831de583784a0c13eb902f/2", "aa50b0acf216c54c577a7bcbb999b8cff66b8991165417633d9be7add678e5c0/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "c9d909d9cadebeb28a68d0cea4c704bbdd2512ad76db4f818236a3dccc879d15/1", "cdfde7dcf8390224f03620f14d477d74baa9366dd28740105b4c813d08a6cdc7/2", "53a71d2973518128e22cea98a6c66946eb073a37edeb688aaeb4a130e43f6cd7/1", "28e987667c3d24215af66070edec72cb397edad0c512fabde5aa4c0a3294ab11/2", "630aa387226a543dde4f6891a2c8072cfd3e2d4b18d63bdfe04135dd5a564132/1", "c79fad493aab29a5e554a27d5a9cf34e133eb51558dfbc6625fc20fbaac6b96a/2", "909677d6078974dcd0ef3608f9bce4ee764a6c450ec22647b00cc3236972207d/1", "1e3357b2f59ac354f2fa88a6744a543550aa91963585e123b1e280d9a676d8d4/2", "9f87de7648a86ad5244180c00fffce9d502ab7d9480dd05b69239891c6dcabe2/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "4d86156fddcd1b4ad748bf389b609b9eaf9bad5ecb93ef889daf41fd3f8ff7f3/1", "2794d70a1700fdee05aa94bec99992317872ad84e023e10baee73ab512c21327/2", "bad270914a614224e6e38f102dcd01b7d8769244f97d5099f07e3b58f9b5e6df/1", "847033177986f188f142578f055bf0cff824964741fd18376539ca98fb57a697/2", "7eea36cf31439f9f73f81f6bd8a91476db2a6086fe3e40d88e4ec2448dbcbd03/1", "65d53765ffdad4dbac70ece7bf15fb4cbf8829e8c82429e632b407971f2e7df6/2", "5d1e08d549786881146f25303803cd673013d1ad42229425c541fcba6dd5d73f/1", "fac89bae5eac39640ce768446a28ff0770328c8c93ff079036e6ecad6ecbc20f/2", "b5c6329aa61277402dacb324707a119900a1812599348154d044b3dc02a405de/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "00ef7489392324d81834dab3ffd53a0e085b4474dc2cc38143887eee2a342c5a/1", "095b405e1a9d4016513eec242d3566b9e5d522b25f837672b3a76eaa4246e7e3/2"] }], "Sorting and Searching": [{ "id": 1621, "name": "Distinct Numbers", "solves": 18422, "attempts": 19085, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a list of n integers, and your task is to calculate the number of distinct values in the list.", "Input": "The first input line has an integer n: the number of values. The second line has n integers x₁, x₂, …, x_(n).", "Output": "Print one integers: the number of distinct values.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ x_(i) ≤ 10⁹", "Example": "Input:\n5\n2 3 2 2 3\nOutput:\n2" } }, "cases": ["b3d27753d290a4ce2e844ac6e8c1a172df6c1426314089a1db2afb7ad2ceb68c/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "ea10dad6780d28d0bbb0001748d179629f12314034abd89c9e988d403180aa59/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "4da6b93bd76f8bf9c839407339d76e0bc617296c7ec5fcc37c24275ebe4f442b/1", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/2", "19d069a1577bf0ca04ba13c31dabeb8de05f9e8d9fdc6548ed48df252403f3ca/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "5c5c9ea0a2b3a8769a4219a364febc945f808965f0dcf518ff1b0da696ebc5b8/1", "d43574be921c54215a1e05bb2fc0c1a4b63dd2aea4bbfd5b9ebc11a2685943e2/2", "987297ffd369b145dc6bad495a76cb1023a22b05354e92b1007f7a1c43671e11/1", "8bfd3fcf2e378da6bf5c55ef39abf3782369da785f31c35ddc07d66b75a3c41d/2", "063166c07453899f063e81ac28f7005f1adba3f807e6ee0fe54d1f80aa16aae6/1", "d43574be921c54215a1e05bb2fc0c1a4b63dd2aea4bbfd5b9ebc11a2685943e2/2", "946da6f4880dd88c51f181b34db854418c5e862a5229150baf2509977b205b3f/1", "d43574be921c54215a1e05bb2fc0c1a4b63dd2aea4bbfd5b9ebc11a2685943e2/2", "ab6aedb1d9145a08e04903c1d4c3b1182442347eb3a5b461aace52a949dda007/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "537d7e682794aece83e658913115a4b1c06d6a3342d5ccef5eaa06b6b16c7dd7/1", "d43574be921c54215a1e05bb2fc0c1a4b63dd2aea4bbfd5b9ebc11a2685943e2/2"] }, { "id": 1084, "name": "Apartments", "solves": 12588, "attempts": 14479, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n applicants and m free apartments. Your task is to distribute the apartments so that as many applicants as possible will get an apartment. Each applicant has a desired apartment size, and they will accept any apartment whose size is close enough to the desired size.", "Input": "The first input line has three integers n, m, and k: the number of applicants, the number of apartments, and the maximum allowed difference. The next line contains n integers a₁, a₂, …, a_(n): the desired apartment size of each applicant. If the desired size of an applicant is x, he or she will accept any apartment whose size is between x − k and x + k. The last line contains m integers b₁, b₂, …, b_(m): the size of each apartment.", "Output": "Print one integer: the number of applicants who will get an apartment.", "Constraints": "- 1 ≤ n, m ≤ 2 ⋅ 10⁵\n- 0 ≤ k ≤ 10⁹\n- 1 ≤ a_(i), b_(i) ≤ 10⁹", "Example": "Input:\n4 3 5\n60 45 80 60\n30 60 75\nOutput:\n2" } }, "cases": ["c66be8dff114c86670d07ed71eee08a6f3fc35bacf149aeb4fc935df3f2ea626/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "daac05652b45efe6c704f6c142f9769276f1e629439808d009070a33fd3fe899/1", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/2", "3fbb4b41ccee52ab0e1819c53da14e1ac210d9a6e5dad83d832e6c0f84d5393d/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "cbd77c7bac265fc7f5a50c3c3268c15d176c95a6b938346bb95a8c9bee02be99/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "e0050861d16f55803ef5aa1f56042df4e37ca105b8bdbd195e3c5178dac8f928/1", "3ab3ee0463adb199835143722a0c1fca002eb11f0a2a7c67e3b2dcb975ab9d42/2", "c06e41c4ae5a5c2d925a5ed3a1976bdfb8b4a911fa9b58dc0bab085a56b95997/1", "d43574be921c54215a1e05bb2fc0c1a4b63dd2aea4bbfd5b9ebc11a2685943e2/2", "e1c4afc770b8c0ac3741c60d414c7ee63ccee29321042d8dd6026ceb8ab79ba5/1", "d43574be921c54215a1e05bb2fc0c1a4b63dd2aea4bbfd5b9ebc11a2685943e2/2", "ea7e6445be18ace263778a9245cfbb033c7a5d14ed4f9da08c8d1e4108058325/1", "d43574be921c54215a1e05bb2fc0c1a4b63dd2aea4bbfd5b9ebc11a2685943e2/2", "7b5f9e39b104097da2adefaa6166d04d8d6050841b9258982732fe2092799847/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "5d0db91fbe3150337cb298f211e0b05f7b5dce4f419e75353b50931a22e6e4c4/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "b7f8d0ccbc4a994ef32ca99382a01ef2ed7a95840f3dbefb9406f02cc5a391d4/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "eb4367fc1d955999a7714a117ea422d9b900c5d0e1f202df539c1060c86f7b28/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "f6c5f93f0e341648dbca77290c9903650ee0082f7b571d19fd2a8a4a3fb530c5/1", "084c799cd551dd1d8d5c5f9a5d593b2e931f5e36122ee5c793c1d08a19839cc0/2", "baec97e61e6507c6ed17761fa7eb32af12d912c25709b91a6357af24d9ae83a5/1", "04c8b68027a1d9c2135cace31d40e1be86c4de790ae292fa20b0c937918d5141/2", "5acc8bec0607169c27e8f057648f4e60ab33a7cfc5413d2ac842fc560c51eb6d/1", "02c01895d824f51c44cfb98fca6297d829d08bd2c74fd26c6ae1afe80d8fae18/2", "01aa74c1834d4038327dedab33b4095e21a8f39f999eac0625e75b53f83aecd7/1", "d43574be921c54215a1e05bb2fc0c1a4b63dd2aea4bbfd5b9ebc11a2685943e2/2", "6ec297d295dbc9730b710648898840cffe9653bb8fec736359c9bb23141e06e6/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "d9909a2e61478563f7a4fea9ef0ba2d132f0c681d310413c63198eb85bf8fd8d/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2"] }, { "id": 1090, "name": "Ferris Wheel", "solves": 11901, "attempts": 13159, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n children who want to go to a Ferris wheel, and your task is to find a gondola for each child. Each gondola may have one or two children in it, and in addition, the total weight in a gondola may not exceed x. You know the weight of every child. What is the minimum number of gondolas needed for the children?", "Input": "The first input line contains two integers n and x: the number of children and the maximum allowed weight. The next line contains n integers p₁, p₂, …, p_(n): the weight of each child.", "Output": "Print one integer: the minimum number of gondolas.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ x ≤ 10⁹\n- 1 ≤ p_(i) ≤ x", "Example": "Input:\n4 10\n7 2 3 9\nOutput:\n3" } }, "cases": ["1d9716b9ab8502e40f83e5cb2159ee709dfc11cc3242a5d6762741ef238bdfe4/1", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/2", "92fa7eface84629fffd903dfce9dc9bcc994a6af1414b615f7a4c085ace9be80/1", "2e6d31a5983a91251bfae5aefa1c0a19d8ba3cf601d0e8a706b4cfa9661a6b8a/2", "ff806b3ee326029ac6d0fcf6911a660db293130fca70fbe49585229b8b23c435/1", "2e6d31a5983a91251bfae5aefa1c0a19d8ba3cf601d0e8a706b4cfa9661a6b8a/2", "1d85ae4b54a2a1b25fc98ccf36668d17e2c97412aa59c71f62a38828e2899e2a/1", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/2", "5c19d212c2282d216df9841855006e40a3ac603de477daab56d5d008a282827f/1", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/2", "03561b3892840be21e069bae605042c8708eba833f12f65153801105c761ba03/1", "b80500a01f984c764f1a3b486622d0ef7cc5b13fa9bd57ec9015113eaf875597/2", "82d89edc50f416effe82272db2463c1e21b608afa5b36ad7e92b78f117d917cf/1", "6143cba9b4129d4a15871cae6c25df604bdaea3d9f6b75ebb384619121bf27c3/2", "5972897770300d86ddf804124f88854006bd73994d6cf82b85d35e7da20d64ff/1", "b21dbaa5363d6acfc7c3a705df435a745b3c1685165635186c82f5735a82153e/2", "8cffc540e4f33e1cf69e7613c50328755a488e0f407e4153ef5437d34dcad8fe/1", "d43574be921c54215a1e05bb2fc0c1a4b63dd2aea4bbfd5b9ebc11a2685943e2/2", "377f238e032b3ddc063b0016a6df08ac6f17f4424d1e06b18a1f3a5d2d79df0e/1", "b80500a01f984c764f1a3b486622d0ef7cc5b13fa9bd57ec9015113eaf875597/2", "9a17977a463b155dfbdd42d76deb4f49528550b2e77bf8a73d0fffaa1bac89f6/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "3d086b1039cf59dd6de77f5fda0fd730eadcd6cadef6ae6f7a53dcbbbe4983a4/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2"] }, { "id": 1091, "name": "Concert Tickets", "solves": 9344, "attempts": 11419, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n concert tickets available, each with a certain price. Then, m customers arrive, one after another. Each customer announces the maximum price they are willing to pay for a ticket, and after this, they will get a ticket with the nearest possible price such that it does not exceed the maximum price.", "Input": "The first input line contains integers n and m: the number of tickets and the number of customers. The next line contains n integers h₁, h₂, …, h_(n): the price of each ticket. The last line contains m integers t₁, t₂, …, t_(m): the maximum price for each customer in the order they arrive.", "Output": "Print, for each customer, the price that they will pay for their ticket. After this, the ticket cannot be purchased again. If a customer cannot get any ticket, print  − 1.", "Constraints": "- 1 ≤ n, m ≤ 2 ⋅ 10⁵\n- 1 ≤ h_(i), t_(i) ≤ 10⁹", "Example": "Input:\n5 3\n5 3 7 8 5\n4 8 3\nOutput:\n3\n8\n-1" } }, "cases": ["5ccc3a14e0431a01218281faa27eedad8297e9b192c98a3356b1168a5739f4b1/1", "9538e71364e030fa5cb12310065b555dc371cca0eccc44a9530624b5be45929a/2", "2bedc5071027ca8edc454595b67d4f1ec18eb6d3fb6c06923a125522524f511a/1", "e820a32861e021af9462ea835daed6456cc9226d450ede46574796e665e02d62/2", "193ab7d22a49824743c75bd91e65a2d226bdf2cac9785853d4782f2d9c0ceaea/1", "a1c93b2208beccc4d4a6bd63eaea2df51f542365c04f94bc5a793b586a5398c9/2", "fdef1d75cfcadcaf881236928c3adc7653ca3cc3e99bb844d2133bb850ff72c6/1", "47261d6c016fd1e1cdef5913ae0347e7069d5a2717faee5c627a678f2f7305d2/2", "1fdee8552af2279838e44b179b52de4add3784f94104b09290da683ef9de9dfd/1", "2982a980aaf050a268e860928b634829a3676e67d91c39c466c1858f9dce48db/2", "89e5d8152f6bbb31e0742a2dc704bf4a9d6b4817dc9ea0118d0e24c892133a29/1", "cf1f2f9e36e5c80e0d1b261dae4179a249ec8c1262224489288d266ea39aa6a4/2", "76b08f354870a2d2c4084c28bf7cb37375ddd77270423fb20cbeeb5b550eef40/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "1fdee8552af2279838e44b179b52de4add3784f94104b09290da683ef9de9dfd/1", "2982a980aaf050a268e860928b634829a3676e67d91c39c466c1858f9dce48db/2", "1611fd13d81c3ddd7a84e560626ab2bf79cb220628d6c9c5fc478fbd7ad361f9/1", "4b584493738efbae87a2cc742b86f08a17d6f11ce78f85555314b149ac513a83/2", "539dee71d4457fa5eb5de651b6544e3120d697a073296f6558ad0034e806b0c5/1", "32646588c045a9843754cf8bef0d8042377243ac355066598df34fdd9d1be86d/2", "62f62dc69b01ec9c1bdd8bf9b5d03cbfee7a268312aafbe9f61e061d08ef3217/1", "baab09e39e78158e4ffe8038f26f14fe14198935bf902095acf0b4e17498d82c/2"] }, { "id": 1619, "name": "Restaurant Customers", "solves": 9557, "attempts": 10488, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given the arrival and leaving times of n customers in a restaurant. What was the maximum number of customers in the restaurant at any time?", "Input": "The first input line has an integer n: the number of customers. After this, there are n lines that describe the customers. Each line has two integers a and b: the arrival and leaving times of a customer. You may assume that all arrival and leaving times are distinct.", "Output": "Print one integer: the maximum number of customers.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ a < b ≤ 10⁹", "Example": "Input:\n3\n5 8\n2 4\n3 9\nOutput:\n2" } }, "cases": ["037d8e57b24a7be1d970ab1ac7cb752477c8a56b09d7098fa6551c89379d7ede/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "092670e9fd268716354a96d5480519a9e90e10147f931d7fea3fec63904ca625/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "e67c563a46e840eb4f116476d405ae83f8bda550706e1591b34879ae805308a2/1", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/2", "cc3cb396324bb9eee2a6f4665242aaf701c6989edc561f522c0ab18658fc4cfd/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "4e3c681cecc82c4c660913745011749c469280700cdea37e9897584463ebc988/1", "d43574be921c54215a1e05bb2fc0c1a4b63dd2aea4bbfd5b9ebc11a2685943e2/2", "512bc10373be7f61483885e9805ad47ffef7957dc855301bd0887950d9aceaae/1", "6c825c7b5b5ce91c8f50a5c1573bab4c3ec483f7be2af763ff4527e963cad7e9/2", "7626370dd066dab28901709b72e93a5011d09acaf6eaff36a4d487f5bb531e6e/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "41191c4df86e334f23a18ad93d0bc71d59ee1b2d32e77a4c1edc98df2868c907/1", "fb4e56d4281170a9fd6fb35f5708589929fb8eb85d51e4102e7215f7e22c0a05/2"] }, { "id": 1629, "name": "Movie Festival", "solves": 9208, "attempts": 9806, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "In a movie festival n movies will be shown. You know the starting and ending time of each movie. What is the maximum number of movies you can watch entirely?", "Input": "The first input line has an integer n: the number of movies. After this, there are n lines that describe the movies. Each line has two integers a and b: the starting and ending times of a movie.", "Output": "Print one integer: the maximum number of movies.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ a < b ≤ 10⁹", "Example": "Input:\n3\n3 5\n4 9\n5 8\nOutput:\n2" } }, "cases": ["90857553c59a7a80d00f60078f6a5ee5afe62dce68664a68c2ea3ed239a66050/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "8e043c1390d7de86a6e83b4e61d00d5342bf7cdf9f3770d6fbd4aa9bfa3498d4/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "fdb352e176d49143d39fdac026412e74ebad36617dd266e514abed910bb82cad/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "d2ca6e9da5b29f43731054aaa1a46ea5b4f0cb06f4bb9bc5ab5c2aa183c8ecce/1", "d43574be921c54215a1e05bb2fc0c1a4b63dd2aea4bbfd5b9ebc11a2685943e2/2", "19921d2b5d307830747c57338c6398ae1854bbd577c4e53318896c05de6c50af/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "08786904fcf0f8daa493a68e893f7c694ebfb36b9b36a08750b4d82d95f497cb/1", "a9f2c4af6c7308bbc9b8cfb3ea4e1c9a5e67d4316341825595ba1d1a827dc14b/2", "0c3d2c1dfba94e4130b28cc61fbb468b997bd0978da8a49bc9f695d3d082a0bb/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "e4f5220754d367b9947a2c9a8b3fe9f569058fc10b4d3ff93ca27f57d820e07f/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "1984d7ffd6214195b78a6d7210503ede6cddf94131e05d4a9706b56884b8ad29/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2"] }, { "id": 1640, "name": "Sum of Two Values", "solves": 10881, "attempts": 12021, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given an array of n integers, and your task is to find two values (at distinct positions) whose sum is x.", "Input": "The first input line has two integers n and x: the array size and the target sum. The second line has n integers a₁, a₂, …, a_(n): the array values.", "Output": "Print two integers: the positions of the values. If there are several solutions, you may print any of them. If there are no solutions, print\nIMPOSSIBLE\n.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ x, a_(i) ≤ 10⁹", "Example": "Input:\n4 8\n2 7 5 1\nOutput:\n2 4" } }, "cases": ["a5687b5ea7e52470c569cd841e6e681128f1e6e49e3274c8061d97b4a708a11a/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "e7c2fddd0083db8e6cde2e8ccb1ef1a46acaa42a1c95dbb248d0181458273c7d/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "9e9b470087ecbc15e214b7cab26f41c6767b5e1e6a35b4f5e326f30f9d45cdda/1", "dfac347cb71ae693ba8a54687f7112aff24ec67f88a3c66f69a7bf968fa2ac16/2", "550b7f57336418949ffb0888131ae18c79c4baf4b75b00e2d83094ccbe6fd790/1", "f251ddc12234e0da8d3b778bd0f7463fb477f16f47757f5617dc8b4ff4d4f14a/2", "bfbe1be6c275304ffbf29530d1f1e2381f31b332921cf1b7b0a216b973ba5563/1", "337b794ce718a09a620090d53541c3b4640a64133bbee2188444810cd3169f81/2", "e2fdbcd43db1f8211dee3ed33027e0308bca5d6f312f4c9de0290ea559aef53a/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "95305c7a0e32d7917a5f1c141ddcb84fc1aa33155f8d867d9132880b03b4f9ff/1", "9248862a087a7809f0b24f9aca21d4ec6314db706e0dc28857e575a1dd163fb6/2", "2e62d842a16b012cf53cd3a71832b442c19acb01d8c1bab0770714535d6b5208/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "bf41370ed2aad005065fe2540b0cbdbd281466c7bd31cde9e436960e8a789094/1", "fe3a821c535329ce72dae3ac2c303aa211d9dec5f3b13230f55a026939f96cc0/2", "db027c06ebeeda2c532f619b3cbb565b2474b451789e6e5e4dcc21cbedef7cbe/1", "8c6a66658b7b4cd297e4989711eaaeb5b67b3969e7f166e77a8efcec530790d0/2", "3404c545187e5366237dba9b58321a6f7885155fa12f569b9d7fff4baab90a32/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "dbe77f2a25f27272957b042b81bd761fb13a546e728551ba1510633c2ee766d7/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "8d722655fb0ebf85f449eba6166ef196c6c9c6b244402f7ae98953466cd454b4/1", "ece3d232c1ca9ef8a80b6fdb1585b8f5cf653b9dd023b0521c8da64db859ffac/2", "d6c761f2a2ce791ea7a19223881e6417601f3ccbc1989be1abb04bdac6de90d3/1", "dfac347cb71ae693ba8a54687f7112aff24ec67f88a3c66f69a7bf968fa2ac16/2", "f989fcf87fadd7d6d0176f4f34bea47e5d282f11ca72e8c9a4ca4e97b2b76fbd/1", "b7ea1f3c2d566646713b53bd09d64591fe6d4c8b5341a5f27e4523b1bae289c8/2", "fd9951b4ec899ad4edc5b3d3c84aa6d7c756fea4b1a20c4ad0ccf47423fbd666/1", "b4c6fc8104c703136852afa7bde9e8f4090bbeebf4c65a9080b14faee4304268/2", "0b653b0a104c052cf44edf3f354d84b748b297c2dc46b5bf76dc51fdc89691ed/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "36da9716ce11f25a5ed264faafa30de7d483b3d2095d7744260a3af196e5897c/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "d4be240d6509cea3cc517b90541500d66915bf0d1245ac0228ab7cc358d63b86/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2"] }, { "id": 1643, "name": "Maximum Subarray Sum", "solves": 10775, "attempts": 11225, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given an array of n integers, your task is to find the maximum sum of values in a contiguous, nonempty subarray.", "Input": "The first input line has an integer n: the size of the array. The second line has n integers x₁, x₂, …, x_(n): the array values.", "Output": "Print one integer: the maximum subarray sum.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n-  − 10⁹ ≤ x_(i) ≤ 10⁹", "Example": "Input:\n8\n-1 3 -2 5 3 -5 2 2\nOutput:\n9" } }, "cases": ["b3d27753d290a4ce2e844ac6e8c1a172df6c1426314089a1db2afb7ad2ceb68c/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "9f36ed9a97f95051bbc2ff11777c5baf537b8b3e954a759fe909d375285738e9/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "6c847f70d5224448abd84f5d882b8103c98a88d84b4011ba99a2e46482cd981c/1", "4a6082659f35a2809c92fdf5707625c448b72cdf0a4e0c55a68c722bc8136947/2", "cd66ee04c0486ea9286ca8ef2c8db3bf89e859dea8e41bf2282142d4d43f3068/1", "8b0cbb7822a9d0b6edee6cd71f9ba02cfebc2a717e007f84a9fed382bcfee8a4/2", "ec2a429c69ee8589ab974e9c56bf99f86f29869518e19a81d24babb628c88221/1", "c0e45f5672f7bccf37453741c4a5243d040e3f5b3ca78e7c89c75d9e34c2d4ac/2", "19d069a1577bf0ca04ba13c31dabeb8de05f9e8d9fdc6548ed48df252403f3ca/1", "d43574be921c54215a1e05bb2fc0c1a4b63dd2aea4bbfd5b9ebc11a2685943e2/2", "f6f47dafb3efebf4b0d6315633b679c7cb990606488b0746cd8fa996e9b089a3/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "779b4f9374a34d8813e070df3d1400c919ed5d293c4374ce56cb21a4248c51f1/1", "2fae91e87733fa61fd6252340e97d0196879734c9f6d40d04952332c30f8dd4d/2", "366badbf319d57c635145e0008a065a1b5807d100d95381b62b94bb93c2c8b07/1", "759f5e35a628d3c576a6f0dd9a4ea605679b8c6659804deecf0578e41ce0ecc1/2", "66b67e4861c0d12bcfc4625969f42b51e8533f7e9f9ec24d8210eadd0505b17c/1", "71d82de4fa558670152a5dd09b59df40050eb4bb19546f10450c277cf4f051cb/2", "ad0fadf63cc7cd779ce475e345bf4063565b63a3c2efef1eebc89790aaa6acba/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "c0a0646ba9eb63a839b9876d4267da62e2e63aaaa4dc39dfe5df25439a6df77e/1", "4b883e04ed1a2af32c21811a12f2ccc766a1d73040b533ae4bcdfad8aca74293/2", "f76baeb22e3c0aa2c164aefb2319a4486641890489bf03bf819985ed244c2224/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "8767190bb693f7c1f9307b780366e7f05693fce45f8a76b5cdded74d79da557d/1", "4b883e04ed1a2af32c21811a12f2ccc766a1d73040b533ae4bcdfad8aca74293/2"] }, { "id": 1074, "name": "Stick Lengths", "solves": 9413, "attempts": 9980, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n sticks with some lengths. Your task is to modify the sticks so that each stick has the same length. You can either lengthen and shorten each stick. Both operations cost x where x is the difference between the new and original length. What is the minimum total cost?", "Input": "The first input line contains an integer n: the number of sticks. Then there are n integers: p₁, p₂, …, p_(n): the lengths of the sticks.", "Output": "Print one integer: the minimum total cost.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ p_(i) ≤ 10⁹", "Example": "Input:\n5\n2 3 1 5 2\nOutput:\n5" } }, "cases": ["b3d27753d290a4ce2e844ac6e8c1a172df6c1426314089a1db2afb7ad2ceb68c/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "c0502a0356d47b76047c951548ba53afd056add3243447c8ee88c98615d022bc/1", "64aeb9975f234becd55bb4635e6e2f2da7a6b7bf0a896f0c07763bdfbfb31420/2", "501cff90e0a841b9b16e657b0ab1f093a97b5ba936d1e9ff1415fbf312d48c27/1", "5d5ecae912c50ea69ad250b4a661aaa78da7023cb34112296953209cc5b8acb9/2", "19d069a1577bf0ca04ba13c31dabeb8de05f9e8d9fdc6548ed48df252403f3ca/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "295c81345e60b6f097655b466b6d624bafe7aefcc0a6c0931840813d13b0664d/1", "942b4856e340af964df8a12f8092d95c62275c48f061d724cbfc97b499ba78eb/2", "6a4c0f72214f6bff10952c0183561d805558c9fd592d2cdbef4c8c4d67fca73a/1", "156da849546096a69f8ae44724fc09d67c8b69f127a1c29eedc56bc5d7bda9e0/2", "f19d1b4e07b0194c5b455266bbc842aaacdaa70714a5c9f520f4223134662ecd/1", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/2"] }, { "id": 2183, "name": "Missing Coin Sum", "solves": 4944, "attempts": 5155, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You have n coins with positive integer values. What is the smallest sum you cannot create using a subset of the coins?", "Input": "The first input line has an integer n: the number of coins. The second line has n integers x₁, x₂, …, x_(n): the value of each coin.", "Output": "Print one integer: the smallest coin sum.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ x_(i) ≤ 10⁹", "Example": "Input:\n5\n2 9 1 2 7\nOutput:\n6" } }, "cases": ["5475ddcc0a3548886fd25b25d7723a9c9cca5a25fdd98e708dca32205228b576/1", "25d4f2a86deb5e2574bb3210b67bb24fcc4afb19f93a7b65a057daa874a9d18e/2", "a843c6f643ca1655e0e3e3e2a5dc2386e5cbb4d24c6f043ce4509a6932ea8419/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "3be06bfc909a2de300378c0685fec36f71858e46d777f761edaed758e7d118b2/1", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/2", "ebbe5ada59c8b5133d74374e3af5a1c1f1c5e200d3262ce903718cd9d36909f8/1", "4abdc3a81662152e15aeb8154b4124af6624b09a5ad95988159116778c05d4b9/2", "9896ddcdbc4da96e5775afb986f02dc3af3573cd9fcf1802779138ed0a24a68d/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "37b3208bea89298570d86a56ea4966f63c12a47d92979ee79581378264d6151b/1", "4d81c95354650f37aa98ce83ccb2a218bcccb573f63f21879dd378acc46d7717/2", "604354c17536b940e29f2dec5bc05fa18e57d217e91c991cd76395127d1959b3/1", "f4e4e4b0de2a6cf2cdc0939f43248fa06cbbf711137e971b02fcf72baaff31b9/2", "67595d5858086c2a8bf99e19a3a7ffe05c37f98bcd7356dab4e1a3785c7850f6/1", "c0c2fca97731844dbbee5416f4961271d174ce7bbf7b85090ef8e08bde9abbd7/2", "9d3feb875dc1c9a6d128e87ec60846b9c6d2c1b4fbe7d47be1c7e038ec9fc075/1", "7ee29791fc17e986b97128845622b077fb45e349fdb80523fac9dba879b4ad60/2"] }, { "id": 2216, "name": "Collecting Numbers", "solves": 5069, "attempts": 5512, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given an array that contains each number between 1…n exactly once. Your task is to collect the numbers from 1 to n in increasing order. On each round, you go through the array from left to right and collect as many numbers as possible. What will be the total number of rounds?", "Input": "The first line has an integer n: the array size. The next line has n integers x₁, x₂, …, x_(n): the numbers in the array.", "Output": "Print one integer: the number of rounds.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵", "Example": "Input:\n5\n4 2 1 5 3\nOutput:\n3" } }, "cases": ["0be5594fa61710760bd37b2df0a27dfcafac84e8d0e0f9184a205ed44ece3146/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "98acc55246bb1e4c7a1327c0698607a0cd5d380a527c354433911a7615b3b4b8/1", "d43574be921c54215a1e05bb2fc0c1a4b63dd2aea4bbfd5b9ebc11a2685943e2/2", "ca9208c126f6f029ec7f3d6e36e5eb23c74ef4676e17c2a3a089d6a2931a59cd/1", "24eea187e4a8e828a501125c9b283ecb17a270a26d0cfb42fbf05490818fca07/2"] }, { "id": 2217, "name": "Collecting Numbers II", "solves": 2046, "attempts": 2691, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given an array that contains each number between 1…n exactly once. Your task is to collect the numbers from 1 to n in increasing order. On each round, you go through the array from left to right and collect as many numbers as possible. Given m operations that swap two numbers in the array, your task is to report the number of rounds after each operation.", "Input": "The first line has two integers n and m: the array size and the number of operations. The next line has n integers x₁, x₂, …, x_(n): the numbers in the array. Finally, there are m lines that describe the operations. Each line has two integers a and b: the numbers at positions a and b are swapped.", "Output": "Print m integers: the number of rounds after each swap.", "Constraints": "- 1 ≤ n, m ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n5 3\n4 2 1 5 3\n2 3\n1 5\n2 3\nOutput:\n2\n3\n4" } }, "cases": ["b38590f779546b7c8f6b1638783e3b688d2073f887118a7b37d3107fd05c59f6/1", "511d5866495efb535d0f7f9289d2a4bbc721b51de58b848063d1066521e8920e/2", "a449ce34ed75d1970b05d34dc3c2b4733bc57ed3ba0352289803d64fca7cece0/1", "f86b04df7bf90407b2aa9441d4d4864f5e141a045544d611c93a8dd9e075a878/2"] }, { "id": 1141, "name": "Playlist", "solves": 7485, "attempts": 8650, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a playlist of a radio station since its establishment. The playlist has a total of n songs. What is the longest sequence of successive songs where each song is unique?", "Input": "The first input line contains an integer n: the number of songs. The next line has n integers k₁, k₂, …, k_(n): the id number of each song.", "Output": "Print the length of the longest sequence of unique songs.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ k_(i) ≤ 10⁹", "Example": "Input:\n8\n1 2 1 3 2 7 4 2\nOutput:\n5" } }, "cases": ["b3d27753d290a4ce2e844ac6e8c1a172df6c1426314089a1db2afb7ad2ceb68c/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "3b61f87b2f61db917008e622510c4d54d537f97f73a293b1be1fc139f3cdeb25/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "61537aba996dbf5884339d1517249ba0aa4475688cbcaf34f551136964261bab/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "ac40a5ae5c073d1d42ea16fd6e3d5e49e72d0605d266e6941f467bfe25ce8254/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "612bfb6c6fdc3f518d835d4e88161d043e84782306b841c8df2bf81965e1c91e/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "19d069a1577bf0ca04ba13c31dabeb8de05f9e8d9fdc6548ed48df252403f3ca/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "c3484de56ff9e9caeb8b7c5a89614201bf80f10dcd5a1244d09de3134bc6ebd1/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "23c895548039b637341983621d97a065e0435a996bf2854a1424ba157d8f4fc4/1", "5211de14b1b0a656f782d9622cd441ed0dd9fb24d13f0299d431bdad4c61e341/2", "bb6d0da41d5e06546d0ef39bb2e8ea356631d368322f3a8b78d2de0ad4e06e97/1", "02de2d1699da5111e0a49904405dddb725893ef65117a6b9bcd115492803c219/2", "3fbdc484cd24381f4bfe4f52c9e38341a3588fe9bdb45e14a5604b2497ccb536/1", "2755f31c26131900f4511354243603b64ab7e80508b5e0468031c682bc008751/2", "cf3db454e6e61a384420e033eb58a49e30788da0a0687c47508ae67a4a4cdbb1/1", "d43574be921c54215a1e05bb2fc0c1a4b63dd2aea4bbfd5b9ebc11a2685943e2/2", "5a9125b70da8f33c9052b76053a9a29a43da3943e99dca3336256cb0d7b76c06/1", "d43574be921c54215a1e05bb2fc0c1a4b63dd2aea4bbfd5b9ebc11a2685943e2/2", "84084427e7de28f49998a19bce0c2f2a28585e77f141e1135061fe6dec938cbe/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "7764492d02fd9aa684cebb7a4c1af4da4f6f6ab617c5e8bce28ec38d98e19bbb/1", "4c7e32c02a67bf332bedb67c0f040128b5d7c7fed27b75d970f463f0849d8d9d/2", "d8b5534d420a39720de0c2655fb9bbc6617a9748f982fa8e5f28bf90ce91b061/1", "d43574be921c54215a1e05bb2fc0c1a4b63dd2aea4bbfd5b9ebc11a2685943e2/2", "66f76856388b96e4185c69b6c39b64bfcf62c91d76bf041bc625850e98386dfe/1", "2e6d31a5983a91251bfae5aefa1c0a19d8ba3cf601d0e8a706b4cfa9661a6b8a/2", "10f8bcf1445203939077ffbe24e863fd576d1b18aa2eb02e979e7049dc99d045/1", "b512f68cc84343dc5fc269252325f53739592a7941c1482fbac331df6cfeacb3/2", "e1799a325686d59e370ceb604fe5cfc38e5622b46fc9ebef2847feff47334f2a/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2"] }, { "id": 1073, "name": "Towers", "solves": 7592, "attempts": 8233, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given n cubes in a certain order, and your task is to build towers using them. Whenever two cubes are one on top of the other, the upper cube must be smaller than the lower cube. You must process the cubes in the given order. You can always either place the cube on top of an existing tower, or begin a new tower. What is the minimum possible number of towers?", "Input": "The first input line contains an integer n: the number of cubes. The next line contains n integers k₁, k₂, …, k_(n): the sizes of the cubes.", "Output": "Print one integer: the minimum number of towers.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ k_(i) ≤ 10⁹", "Example": "Input:\n5\n3 8 2 1 5\nOutput:\n2" } }, "cases": ["b3d27753d290a4ce2e844ac6e8c1a172df6c1426314089a1db2afb7ad2ceb68c/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "19d069a1577bf0ca04ba13c31dabeb8de05f9e8d9fdc6548ed48df252403f3ca/1", "d43574be921c54215a1e05bb2fc0c1a4b63dd2aea4bbfd5b9ebc11a2685943e2/2", "0ac2f35f26cb4cde634d05216c191d7ee62e468ec35f680510a052bbbfebfec8/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "8cf6d092562ac6aae684e6c834f103dd3e733638d1452f2212ef7339ecd553b5/1", "b2caf463818e33587218f354ad3cf0e75a34a6e6124c4e3fddd1c4ef255b7b1f/2", "051ca989740efd4120ef30843e20ab3538267a229cb0dd5d3c9d58889a0c2702/1", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/2", "fd798302fca29445b67c775b1146443605ad133cafa802b246de3bf119098455/1", "93f64050a09b2dbd1a4ce8635af0fd3c21ff005c4493a304083bffd0ae025dc8/2", "479964e993bd31927b574ebecc33a3e5f969551a58aca26c114f85f57e80c94e/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "f766d5fe2bad96b09a00461261b06fcfcbfe95546be7e0b1acb30621f0f3e6da/1", "7b13b41e18749fe10663d746dc8862baf0cd43a216d719fba3789e5a57614c49/2", "1b677a9a3a86a975ef447170c122c11a23e1e4dfdcf9f50f8a766b6fad9e29d1/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "f6680a76aa56b51b750eb4efa95363a2baea1cef1c9224134e1f16e298d79fd0/1", "00d9cd208c4bb685541067ed529222ed418e5cc75d71304d8ef159f3ea3aa50e/2", "68549d2d10cef9ba60de72d7fd6645211b5ca0f7b09c75be9651c9b4ca056a42/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "5bd7d31de38c4c94d12bd2f6a07a9df27c5a11760ca42348e5a54f9d1907028f/1", "aceaf168c6709487a120d0059d87a99ab4aad4ee7f8a4d05a91c8ee20161ef75/2"] }, { "id": 1163, "name": "Traffic Lights", "solves": 5825, "attempts": 6606, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There is a street of length x whose positions are numbered 0, 1, …, x. Initially there are no traffic lights, but n sets of traffic lights are added to the street one after another. Your task is to calculate the length of the longest passage without traffic lights after each addition.", "Input": "The first input line contains two integers x and n: the length of the street and the number of sets of traffic lights. Then, the next line contains n integers p₁, p₂, …, p_(n): the position of each set of traffic lights. Each position is distinct.", "Output": "Print the length of the longest passage without traffic lights after each addition.", "Constraints": "- 1 ≤ x ≤ 10⁹\n- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 0 < p_(i) < x", "Example": "Input:\n8 3\n3 6 2\nOutput:\n5 3 3" } }, "cases": ["aea935ee810545403650d0c131879fb1693222a4a800e34a981bb94e907ed5a0/1", "3e155dc581efa4f545310d7df60f5ad37a6559fd2f2f50ab198bf77e8210a2b9/2", "700f9262dce15946f8fafc1011cf7d42b8cc6a739d9f077e2157700b9658328c/1", "219e01b3bbe6e3dd3b03f6cc184b837129e85863e993772277e329d606c83b05/2", "7ba9f1a154a4fe2b6173e1b7e816264f60f3e0ece4ff09fd994705d5a0673b9b/1", "bef2ad74c0021baca6038510064b39f9345d5821f2b6fd5444ebaa1c52819a83/2", "d5904b8765507c2d596461255c4b44fff8b2f04debfe49663f30056a85f5ce4a/1", "34c8ac8c1711ec8db8d285ad064c0d89ac82c6eb951cf4d62e59e72885424bbb/2", "32c357f247e7f3d1bf22fc86a97739db958ab37cb4faf2153d0d9ce4c1571527/1", "e9e762876d49c0909d8c12efa666f97cd783307d749ae0af0089343625db7191/2", "cbbc7f038ba4210cdf7c418b9d40db0ab32ccd52c52f9146af2349f524a7df90/1", "f683005adda9d13d2c90cf1a7cc8e3ef670f7cb5164ed384786847c677edf19d/2", "df9fdefaeadac28c75cbf00245099d38d693961287262a0a1d7ed8a632337bf9/1", "f86a536899ca5f9e11f59076f05cf0904c33bda547c3c34e88c3bfc1e0287cc8/2", "bab56b9638b53b8951b67005ece4f9b1fce2e9eb398a9141f5896a91cf0b1e65/1", "d72d52b9a95e07b9e9b120e2b5a8e7bb292787addcf0a2f42b29b77cc411b04a/2", "4b1a2e126edf435382265923857984d5e39aad5e37c5e9c16dfdf19fffbaa0f7/1", "2a1648a728254769f48ce2a9fecbaafc6cda309a9e29fca5fcba10e43922a62e/2", "bef35877b4e429cebc6df0beced980f0a3222d45c4c0a307660d3bc671fb1642/1", "fddccfcbe0ef994eee8796767ebeff0527f1dae0e3bbf667ea0fc5cd8ce2c4d7/2", "7a12413cb195db37917eaad615c9c2c360ca4cd1d1c1c948c10e0ef6ce89e7cb/1", "8bef9c0b1bbf9aac65754b276caaa597be3e6e9e526574ce5ec336fb103bda52/2", "d95d9207737b654b537fb5d9c1f32bae937adb715d076e88ded22699bbfcfd6e/1", "987d0f3547b297efd2160bb7841990bb3afa726a6814c8feb7a3f95904f21274/2"] }, { "id": 2162, "name": "Josephus Problem I", "solves": 2831, "attempts": 3263, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Consider a game where there are n children (numbered 1, 2, …, n) in a circle. During the game, every second child is removed from the circle, until there are no children left. In which order will the children be removed?", "Input": "The only input line has an integer n.", "Output": "Print n integers: the removal order.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵", "Example": "Input:\n7\nOutput:\n2 4 6 1 5 3 7" } }, "cases": ["4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/1", "c5295c00ead93b36a700b78c0cae17503dba4fe423425220b23f8519b5f734cc/2", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/1", "630f7c0294c4388f31b032f229368066a5036f11c0cc0837d766700b3bc18e50/2", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/1", "c5c56a238c421daee9b21c9b6ee5e29b1b5bc7b133be3a8106784ec13d6d6e86/2", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/1", "684bbe54f3ae813a54c75d2ad81e14e7f09bc79212b970136a3342c6354ed6df/2", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/1", "ce7cc8cf71238f94906b92a2fddbc20c298f4cbb3b191f5e8fa9510ffaea4942/2", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/1", "fe42974489cebf56d23307d93baedb96853a0c0991c4ce556ce724d29e45d3bc/2", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/1", "e7242832be9a82c0797b778bd1bc9422afcef8c33fcc6b8a39d563516dd27a4b/2", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/1", "c93d6afccbebfc5f43da792a32d8ad1b6f19579a900997f18e5bb19da0e1bb5b/2", "2e6d31a5983a91251bfae5aefa1c0a19d8ba3cf601d0e8a706b4cfa9661a6b8a/1", "d8168217893a86c7431dbe75efc5b5a879ae99caad0eaf2ff3a1da12e37e4056/2", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/1", "61d6986bdbafe983d9b7d0a2c3d492dd267e2ef368b502bd0837c08bd8179f85/2", "181210f8f9c779c26da1d9b2075bde0127302ee0e3fca38c9a83f5b1dd8e5d3b/1", "d1582f96ad39e7e43e4761a50b65ae097ed24c5632f88f35e99da0929094aa34/2", "e150a1ec81e8e93e1eae2c3a77e66ec6dbd6a3b460f89c1d08aecf422ee401a0/1", "083ee0e3b8fbadd909c5b56fa79895fe4bb5fbbc7c53b922b143d4ca596b5f4b/2", "d43574be921c54215a1e05bb2fc0c1a4b63dd2aea4bbfd5b9ebc11a2685943e2/1", "76f1b1c42f0d0c12903534ca377c03bbbd79afc4cdbf97fce6f789598a8707d5/2"] }, { "id": 2163, "name": "Josephus Problem II", "solves": 1714, "attempts": 2229, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Consider a game where there are n children (numbered 1, 2, …, n) in a circle. During the game, repeatedly k children are skipped and one child is removed from the circle. In which order will the children be removed?", "Input": "The only input line has two integers n and k.", "Output": "Print n integers: the removal order.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 0 ≤ k ≤ 10⁹", "Example": "Input:\n7 2\nOutput:\n3 6 2 7 5 1 4" } }, "cases": ["f4a8ae8e74ddfb896a256de4e3099911dcaa6a9302591713898069b0bcd6e3d7/1", "c5295c00ead93b36a700b78c0cae17503dba4fe423425220b23f8519b5f734cc/2", "3f11ad6bbc7ecca0b2416b713dee77f1a635c00aaeaa946e14cde1c2bfae56d5/1", "c5295c00ead93b36a700b78c0cae17503dba4fe423425220b23f8519b5f734cc/2", "f251ddc12234e0da8d3b778bd0f7463fb477f16f47757f5617dc8b4ff4d4f14a/1", "c5295c00ead93b36a700b78c0cae17503dba4fe423425220b23f8519b5f734cc/2", "cc869bfb3ff0774d373eae1ae5dbce751f017960ad69f469047d2d571ce5c60f/1", "c5295c00ead93b36a700b78c0cae17503dba4fe423425220b23f8519b5f734cc/2", "215a7a7dc3cc760ce2c0db86c1c4dcd30362ac7c347f84d216c9272f21c31201/1", "c5295c00ead93b36a700b78c0cae17503dba4fe423425220b23f8519b5f734cc/2", "13316410c3243a6b30a5a799aabf36a1e1a8f2aec49fd3af6869c33441dabea7/1", "b0df11730281d8df8473e1cf095730ab56b070c5b7a9e641ba9214a7c578b77d/2", "0e4e7e29b59587ca9e5f63caa49528eab661ae25cbdf4258266f77fb626e7f74/1", "e7242832be9a82c0797b778bd1bc9422afcef8c33fcc6b8a39d563516dd27a4b/2", "064b320e629834a8691aec032af911ee6b7500f488f18a15559903e92ec44df2/1", "780d31f32b75e4da1cec366732ab4a1193f23b206fb5b0c057f7bde26a11daa1/2", "fb02f7b44819d2ebea185c95acaed0618bcaafb81d5bd07705220b9118ec766a/1", "bfc0815a8c21e2ba53ff3979873e4f37b861655904cafe12d56494d665d55443/2", "aa82a874d161d0a23e9170de9ed30813c4f632191db91efd41850fe7829b2249/1", "1fcc3dace9e596c87eb35254620172ed1a6929ff05ef149c580b5f6c350e1dad/2", "009e6f3263655c6228b913ae3baedb4f30453110210f9640fc10df0cf193a780/1", "6da798b0b177e3420870c816740c0183c1d81afcf02d34b7330d2e7ed5a9065b/2", "ee079ce11535341d73ef221af58a097e0d9b73e22eaae55e9559d7ca4f52d669/1", "25e679aa9530754cebb8a5124ec4f1f1f31cab9720d1b702bec3a2a3b26ba7c0/2", "0ae65e341bca02de2b6a093f5f1efe20118f500f6abfe33e31f3cea159312edd/1", "abebe4f142fc26da5cd464222a41e6d0771cff5cdc4809b08e11c7ba795ac577/2", "fbee879be13485e693c811dd8639d1cefa8fa6a69b2d186c69fb12a889941f7c/1", "d5197dc8398b11e204e2d01f4d87b55fbc2522fd24286ae766d35757bf9a4d74/2", "9e0b7e62ed65ae56fb21214c9b265637268486093c14d1fa30ef80fd9da3ee97/1", "bafd4bd4732f875e6568095a83b917ce86d00317d815dd6106c6e1702b68bf02/2", "9b36997e6cac51dc820facba7503ed664cf59eeb4a0fb03a99bd0fa4c68fb569/1", "c90adf7e08f88ffd787c453666adfb7c7ab80e0f6117440b79b1f3cfb72a6366/2"] }, { "id": 2168, "name": "Nested Ranges Check", "solves": 1405, "attempts": 1737, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given n ranges, your task is to determine for each range if it contains some other range and if some other range contains it. Range [a,b] contains range [c,d] if a ≤ c and d ≤ b.", "Input": "The first input line has an integer n: the number of ranges. After this, there are n lines that describe the ranges. Each line has two integers x and y: the range is [x,y]. You may assume that no range appears more than once in the input.", "Output": "First print a line that describes for each range (in the input order) if it contains some other range (1) or not (0). Then print a line that describes for each range (in the input order) if some other range contains it (1) or not (0).", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ x < y ≤ 10⁹", "Example": "Input:\n4\n1 6\n2 4\n4 8\n3 6\nOutput:\n1 0 0 0\n0 1 0 1" } }, "cases": ["b7f525181ef820789b1c83f885b27f8d651e321353a416b913684f6be9a0262c/1", "02ba4dbd90bacf4a00a403f3720348d1a813b051076630102dc3d96ab9b6cf41/2", "53f508e7bfa6b1b8495cba1880ac13c0bcb5f58b980a58dce268b128445bf8f0/1", "8e49cb2d9ca043c0b63fc3b9042bf69f95d5137eefed714045b86cdfe2346bff/2", "3d8a2eec28eb42f437132e71be3ed589fc9abbc62cc694e0abcbd3e928927a18/1", "5125b0a3014fda51e849a974a35e2344fe8f18ac9008ea2df29ce23dcf018872/2", "461499e2452dd97211c3d202ead9bd86d8fbcb89c36a02dc16ac4048ebcc873c/1", "571707e9675f4c59dab2cc6dd4b3231a72cd7df7267847f3f0e3b1ea296bda6a/2", "d88a839cca355713d671c7e05c8aa97b0fc52180bfa4082139a9b35a269d9be4/1", "48c7c1154753c1504b32efdb4e28f5e113d387b65f1f59e90975a04c09b5163a/2", "d9ea14cd02c5aab0ef969a9a17932e202560c54b75ac213909412b5b5259ce35/1", "3f3002802fb72b942382075c2720e134051851ce1649b69d22b3debac0acc900/2", "86581e8dc98fc610e23c57f37733d73ed1e3a4072482179abab9ee290a3ef237/1", "f75a184f501e82eec8218893d4b31de320d45d998492d1bda2744484fc7e987f/2", "6edbc2c159fb2f5a96205bddc326a5430a1f3926424bf1e807d98cf9a47fe61f/1", "f5061cb0dfafc4a92d8c0e7f399baacb357fc074c8b02942a91238726aaea70e/2", "6ab050086d4481081f41c7a8fae9947cc0d562d4b86191f66c672caa83bfa9cd/1", "ad44859570e5b938c97b565fe7b2ddc98b00aeb9a6eee5a67e06d0b2c48fa47c/2", "a46ae790b8703f99c3891230b93d312f1aa50ffffbe7b32ae1d6811ab33622f8/1", "ccc7404e1465e17d806b383f9e5302f9a69a27a1c5cd18bf04a44cb221319da9/2", "c70678d0dfe42a5aacd09751441c1a6fa47287e5fbd9be86a9157b9b972c4f1e/1", "ebe47ba9c2ffc6ffcb6c0ecc645a66437227c1dfd644a634918db95ef77f0844/2"] }, { "id": 2169, "name": "Nested Ranges Count", "solves": 1087, "attempts": 1272, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given n ranges, your task is to count for each range how many other ranges it contains and how many other ranges contain it. Range [a,b] contains range [c,d] if a ≤ c and d ≤ b.", "Input": "The first input line has an integer n: the number of ranges. After this, there are n lines that describe the ranges. Each line has two integers x and y: the range is [x,y]. You may assume that no range appears more than once in the input.", "Output": "First print a line that describes for each range (in the input order) how many other ranges it contains. Then print a line that describes for each range (in the input order) how many other ranges contain it.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ x < y ≤ 10⁹", "Example": "Input:\n4\n1 6\n2 4\n4 8\n3 6\nOutput:\n2 0 0 0\n0 1 0 1" } }, "cases": ["b7f525181ef820789b1c83f885b27f8d651e321353a416b913684f6be9a0262c/1", "26b44adf7189363f6c55f95794f6bb7df517e9de92621e020745bc087f95bf45/2", "53f508e7bfa6b1b8495cba1880ac13c0bcb5f58b980a58dce268b128445bf8f0/1", "b1bdcccbc1d1a0e762b02276bf5421f3819a248efa250be5703ae4e9dab12cb2/2", "3d8a2eec28eb42f437132e71be3ed589fc9abbc62cc694e0abcbd3e928927a18/1", "dfdf85ec770e4c1b26ac5453dd502ce14ded83026071b629419242b6dc4a0857/2", "461499e2452dd97211c3d202ead9bd86d8fbcb89c36a02dc16ac4048ebcc873c/1", "ecb524c3df2f63b794ee77e63f0122f9b8d1a9732f45f0102f303120de03f66a/2", "d88a839cca355713d671c7e05c8aa97b0fc52180bfa4082139a9b35a269d9be4/1", "9496f6252255a76585f3df8d99ce87a0471583e90558527c83db8e77f81154cd/2", "d9ea14cd02c5aab0ef969a9a17932e202560c54b75ac213909412b5b5259ce35/1", "90eb3ba735fdb9352463e89692e2567ae446ee945977e8b8fe8adeaf8664fce2/2", "86581e8dc98fc610e23c57f37733d73ed1e3a4072482179abab9ee290a3ef237/1", "195ef7af6c274a48fea79570ade4946450db9825f8a037c825681795ed733562/2", "6edbc2c159fb2f5a96205bddc326a5430a1f3926424bf1e807d98cf9a47fe61f/1", "7e0e241cacd67bba7eb9573f98ad96b2f70fc3c5cf4be2c0624072be28ecd3ef/2", "ce7382147f482c4c1c343fd9185e286ec5a2e4d6b08958aa79fe6d4555e040ed/1", "4737b625096d1d0419ec6e10d9103e6036d7b0b1edb3d44120c940098098b778/2", "c70678d0dfe42a5aacd09751441c1a6fa47287e5fbd9be86a9157b9b972c4f1e/1", "d9cf682e75d72ce6513b63f1412214cfb13a8b8e8e06ae67312b887f7fa0770c/2"] }, { "id": 1164, "name": "Room Allocation", "solves": 4511, "attempts": 5362, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There is a large hotel, and n customers will arrive soon. Each customer wants to have a single room. You know each customer’s arrival and departure day. Two customers can stay in the same room if the departure day of the first customer is earlier than the arrival day of the second customer. What is the minimum number of rooms that are needed to accommodate all customers? And how can the rooms be allocated?", "Input": "The first input line contains an integer n: the number of customers. Then there are n lines, each of which describes one customer. Each line has two integers a and b: the arrival and departure day.", "Output": "Print first an integer k: the minimum number of rooms required. After that, print a line that contains the room number of each customer in the same order as in the input. The rooms are numbered 1, 2, …, k. You can print any valid solution.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ a ≤ b ≤ 10⁹", "Example": "Input:\n3\n1 2\n2 4\n4 4\nOutput:\n2\n1 2 1" } }, "cases": ["d68ba1ffda32bd3159cc7749ca7cd6677df849e5a04fc823c527aed3c3c12a3f/1", "1d0149887067c92cef136a1ef0720ed98b07875df29300e480fe0dd32f54f766/2", "12d03556a6fe2fd8045ead24a41651b4ad61f9b97140115e39c62c68b8c9cffe/1", "941d4a32b214165bf11cb41bdab5ed37e92609a6f539c3db705c99e1ed069427/2", "9364796456a2f02795eeeea1801f7df456ce1a7f84083c79e2b2215cb875116f/1", "96579d38cacbdb0ea94f0b7b0591985c08d8dbfc381c44e796c448eda96070d3/2", "9be8ac144d09582b9935cc389add45844e00d4c5f6b236cc795369bbf2498e3a/1", "1658916badd1851c57c8be1680d6552c51f265701c4716d684a6164586ce6dbe/2", "07f5d2730d905418dda2d89fe9462c733e90163b27ced8f169bc0960536315e3/1", "cddae8f5b2f1f23c36bc2a49e7765e78330f83175dce332717b57858ae86445e/2", "6c5ec651a290b44439f53773b75b3ad73f9a077a96ad75abfb080e60df0586cd/1", "6b49319a139018fb9533db2f58f7f3f60ffa2db380cc0bca6eaf7e7888fe2fe8/2", "2e38fa46dec42f03927ff68df4b1669f30a193de397de8c447a9dfc814f812bd/1", "e2049a08aa47dc84fd56926ddaa3aad85ad1b70c6c13e10bfcf98579b8dfcd37/2", "3ec3da18a489313a6853805f6e8fdbf7b90c93a43aac683111f742c9ab094ef6/1", "bfa9bce85ef8e51ecdd82b8c732d885e882a6769a72aac54411c28868ae874a5/2", "0fad4d0fb8329b72ee7257f7ffdadc20b09620a7682bc0c34a66206212bcb47e/1", "74f4e2cad0d10055d046a585d2da8b5b138a1034d26325c4dfbd626b4d4531a0/2", "11372b8c68605ab95cc11cd97aba861575c5d94ac422364a7875a745b26aac20/1", "9b272f00e9e070af4732efbd3b5160f48840e5f9fc1d60e7d0c6548f4dd2f80c/2", "6eb9ed065b04ef1b0b215d937c0c2513683c70a6a01d66b9e9dac7c804b8aae2/1", "19a1b910536680b7b1540931874019e258276c9a1a66bbb62aaa5108fcb5007c/2", "cfea8e5c6aa136049c1183638117855cac157f3534fd80b3cdddcb0d85dda144/1", "812b2d9d930de02e35e0274e1951adc5b7e6b776aa91aa585ced9e0a5abe1513/2"] }, { "id": 1620, "name": "Factory Machines", "solves": 5192, "attempts": 5663, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "A factory has n machines which can be used to make products. Your goal is to make a total of t products. For each machine, you know the number of seconds it needs to make a single product. The machines can work simultaneously, and you can freely decide their schedule. What is the shortest time needed to make t products?", "Input": "The first input line has two integers n and t: the number of machines and products. The next line has n integers k₁, k₂, …, k_(n): the time needed to make a product using each machine.", "Output": "Print one integer: the minimum time needed to make t products.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ t ≤ 10⁹\n- 1 ≤ k_(i) ≤ 10⁹", "Example": "Input:\n3 7\n3 2 5\nOutput:\n8\nExplanation: Machine 1 makes two products, machine 2 makes four products and machine 3 makes one product." } }, "cases": ["cf18aacbcf6a265f7b950164a7bc0395d27826afd49eaddcf367a009f4b033c7/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "b16201331e5ec696b6c4cabea58c4963040ea53571e73043552770ce7bf10821/1", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/2", "d617ef583076c3086c2e6e64e69156c5921e5b69f4df0b103e3622a18786edb3/1", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/2", "029998936dd94e9fd34cebadae73cbca43c5b9bfef741efa164aa1d0fcf13d2a/1", "8bd5a23c3aef1243c78bac155b39b9d57a43d8c49665ccf6f42acf2992a94afa/2", "b6d292d84bd38524931698cdb88859ff8fb47ddd93422145595ecf47ea143320/1", "b8650fe462b5b738b2bb69af1d3c3f16974db285c79025cf1b98652763ff509a/2", "e9d5c58af924baa259a51b893a122d96db3463627d8b2cdfe44b02fd35413135/1", "094395ba86ece5655ac515da0ca860a49a3f3d2cc1064131be4a8cc39ad71c6a/2", "83a0a3376c2310d00260f6332e99c612cb2103cf0e22acaa61fcc044acbe921b/1", "769c72e875add310e07ccefc2cacb5a2c983fb12b95197660903e335c4d373ce/2", "42bcf55d95a8b7e5a7f027fa23907d1abca2b8cac9fd41ea8c1a633f68adf364/1", "84b9399ba1ce23f356e882a473805faf9794dc028784335029fadc1a74909339/2", "d29939bbf9379d65b21f74755107ba7599a75e29d564d5021093b36ddd1d1c66/1", "50c6f1c84077150e739977cc1508d90217deac8ebc7bb4c6b4ba560fa6376fa8/2", "fbf2c7e13f4fac7797950f66fd1e3dea77a875eab3e0a1f44a94ad85bd277dd7/1", "b251adaf46be703d462d2eb4b3579d1a8d26e0c606c5a7b1064caa3fc50aebc8/2", "4b3f0351a46c278eb94e0fbf2b9a005129fcb38ed8f81c33aef5f9fd57cf2561/1", "8caa81cb6f9e2b3e6b09451bd6fd345f215b482059e7017d10773c5370f16423/2", "077332112ab7e5e03887dfdb3e9da6b529b47b0a1b439cfd68796962ca92b9d2/1", "3b2f9fb7a7103f6bae312884fd12835c4752085430a88689d920327e5597c9b1/2", "c8ec75d96758b5df5e0aee2d094902462c593743cd361772154a84c494850663/1", "11981dd90a2915ba904527a04cb2781dde4d5c6ff0bdc1226d4cc1e733dad152/2", "c8ec75d96758b5df5e0aee2d094902462c593743cd361772154a84c494850663/1", "11981dd90a2915ba904527a04cb2781dde4d5c6ff0bdc1226d4cc1e733dad152/2", "200df6bdcaa64b0c7e38d460cda6667f4f09e7cebbe1fc36dff6315a352d6c98/1", "a1fb50e6c86fae1679ef3351296fd6713411a08cf8dd1790a4fd05fae8688164/2"] }, { "id": 1630, "name": "Tasks and Deadlines", "solves": 5137, "attempts": 5259, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You have to process n tasks. Each task has a duration and a deadline, and you will process the tasks in some order one after another. Your reward for a task is d − f where d is its deadline and f is your finishing time. (The starting time is 0, and you have to process all tasks even if a task would yield negative reward.) What is your maximum reward if you act optimally?", "Input": "The first input line has an integer n: the number of tasks. After this, there are n lines that describe the tasks. Each line has two integers a and d: the duration and deadline of the task.", "Output": "Print one integer: the maximum reward.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ a, d ≤ 10⁶", "Example": "Input:\n3\n6 10\n8 15\n5 12\nOutput:\n2" } }, "cases": ["9c8604f48df5aeb77609c8227c095474965c25cf4558c16c86e6f27249539ffa/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "1cdb490424f9ea0c55684cb367b6952e44666c1f14c5dd304822c6f507c28462/1", "c52f2536a9e8462dc8d533cf99662098c86d035cd6e9fd58579e0c101c2e0aa5/2", "4bd525c07933fbbee4001ee30a78af8704c4f94f560549c7b8d6399dd50a8c34/1", "93468e6667a673058664e4445aee21a7eb4bf0129b92bc2cbf2126befdf8dae2/2", "069a4d72bdb8a3c24c24494a835091cd93d8a41174957027505a6ff6bdfc24ca/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "dd43f351e6b27c6814500685380b1e66dbd53c64d10ced9987139a75d05a9fd8/1", "51d694ae661fff229e3da371d55b044b66937a0831036cfe8727f6b132e65db8/2", "41a8c3237c73668473b209c46a39bd2c9c9665d254d3c1645a2052c78ae243d0/1", "87be7729bf9b745cacdd4b843d001fb7a597ee1749ff592137dcdc20f310e3d4/2"] }, { "id": 1631, "name": "Reading Books", "solves": 4227, "attempts": 4557, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n books, and Kotivalo and Justiina are going to read them all. For each book, you know the time it takes to read it. They both read each book from beginning to end, and they cannot read a book at the same time. What is the minimum total time required?", "Input": "The first input line has an integer n: the number of books. The second line has n integers t₁, t₂, …, t_(n): the time required to read each book.", "Output": "Print one integer: the minimum total time.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ t_(i) ≤ 10⁹", "Example": "Input:\n3\n2 8 3\nOutput:\n16" } }, "cases": ["b3d27753d290a4ce2e844ac6e8c1a172df6c1426314089a1db2afb7ad2ceb68c/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "27caa31515c9372e849a2c7f94010ab97fc1a0a4b95b8e053c593e8151060cd3/1", "6f2264250160ee91b20af64f30128e3787fcf641f1c504f7ac752597e7d2cc09/2", "f25f4ee25eff1ce482f3c4e2832d965e5369dc868af746f13ee34eeb18710f8d/1", "a95b1f49791e03403e9c762dcd0bc5ccedf344782a37b171c3788746f8c46561/2", "7fa372e92a3cffeea7963b749cb512764640eaa7fbad417c487a3b63a9df8d9f/1", "4a692b12dd085df9095f3f28a37de97818d4c8799146dbdfbd485cb344b4e025/2", "19d069a1577bf0ca04ba13c31dabeb8de05f9e8d9fdc6548ed48df252403f3ca/1", "d43574be921c54215a1e05bb2fc0c1a4b63dd2aea4bbfd5b9ebc11a2685943e2/2", "b67158c93d3200c5fdf71ae790eeeee4969e2fa84d042cbda3640bec8a4dcb7e/1", "6f2264250160ee91b20af64f30128e3787fcf641f1c504f7ac752597e7d2cc09/2", "75805e44942c9919ccc5f3d542fd1fc27f5e2c537aaddc651a4f373f4ec8a20b/1", "dfa19827a35097037f4dcdd694f760ed08210e9fccb3684b79dba3989643b492/2", "90aee3f370ac62df1f572820d192f2eb1d608f4e5d23cd1988181efd524e3bbf/1", "c6be9c39d3e9d7e034151a64fe0035be858191ffaf40fad17831aec049c60d6c/2", "89830ba13957c690c4a4265b6a929126fd19487d8f5b7df27a25750bbadc6063/1", "4e782cbbd4ada1232ca48639987d8c35592fdba6b982946b284a4da7a0277ac4/2", "fc525318ed70332a3d7c25b1f26ebf8bbb79897d492a1f0dabf034f266abfc8f/1", "84b9399ba1ce23f356e882a473805faf9794dc028784335029fadc1a74909339/2", "a797a31928a40a8d3481bf439ea299b4f716e4afa60d0a91845c50d310b9bcfe/1", "2a62cf402cd3396aa00f55f892f4545f308f74d01c8caa0f2837b1982f821595/2", "fd4bd7f41bdcb5ff3a4db03ddb4892b94f1ee70ea84c676b7d8082e6fce4d8b6/1", "54183f4323f377b737433a1e98229ead0fdc686f93bab057ecb612daa94002b5/2"] }, { "id": 1641, "name": "Sum of Three Values", "solves": 5678, "attempts": 6356, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given an array of n integers, and your task is to find three values (at distinct positions) whose sum is x.", "Input": "The first input line has two integers n and x: the array size and the target sum. The second line has n integers a₁, a₂, …, a_(n): the array values.", "Output": "Print three integers: the positions of the values. If there are several solutions, you may print any of them. If there are no solutions, print\nIMPOSSIBLE\n.", "Constraints": "- 1 ≤ n ≤ 5000\n- 1 ≤ x, a_(i) ≤ 10⁹", "Example": "Input:\n4 8\n2 7 5 1\nOutput:\n1 3 4" } }, "cases": ["a372136b760f8d6d4f80a69731e6662391b65d2e332801e7722fd73da5c14473/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "05066883ae81034bf3d6a984f4af1c4c3cd8d207f67f617b5761f0f35ece71e5/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "e2fdbcd43db1f8211dee3ed33027e0308bca5d6f312f4c9de0290ea559aef53a/1", "4dcef6a0547ba147979d11689e69197b7ec3694c820549922e9b4c296e48c012/2", "8d3f4fb774ccd799cb4fb76e086d66e06316c8a9149754b41c193d5ffe66dce4/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "eac417ac0fdba9172d1f51ea2d2b642b54fe798fa477243715895bfedc8130ce/1", "7224779734fcbe96f3a982137cb98ab73077461e06e24da8c7164318f7a8a35c/2", "3d9c9d9f7214bd806a5019e2c4583c3bcecca0c95b95cdae258915b793e1b02f/1", "d402541c744ce4c6560adbcc40e80b5ebcc0d6da0075ad2d3b48baf525193eb4/2", "87d96b5f51ecf575b1766dfeee6f69f186e1ca8b8032e220a87e06bac94055c8/1", "e4909d665d4f87007d95d997e47f8ad06e5c0d957a9eec1756ec276e6868d77e/2", "35666ff476652e63bd6b6afa4f7cb80cfd21b519052e4ab5331fbd40b9ef6602/1", "70e793f4198c53c88557947365137effb2b94c3c08ba8d49172012a93bb85a7b/2", "d8957a04d340d52202279fcda4a7da1895a0ae12457f6234ec951c4ebc10e125/1", "55d119af607354860e138cbf6b792202e4848c1c344e91b38c20f461711fa0a1/2", "8421f3739d679ba293042eb53a5d026f39a1c4142965f54908be85309044dae0/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "a02e3b404b6473d273ab8dcd5e3278386198f47f5abcf21f31b7406141d8917f/1", "512296a4cc7f24a712d7fec245041392d9bb94c7405c99a9e5173c83055a5e6f/2", "fae8232c6e3a54d70f80b5b18874f3f4644632da33d9d663cf9b09c8ca2c8b08/1", "74187874dd8e69771da33e3aa433ed5e1b21a16916b5f040429a9ee5989f9ce4/2", "9d08f099575810f0087e230fad15d86c4c1282885913baf8620155f20808223d/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "c9afc93aa55b44afc4039c9f65e095b7130602531fad70a0e3531b99069a8581/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "211935667f1e30697a9bd4e2483f66d1e48a3db1bd154caf6c5a5ba39c141b8b/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "464e69f96b685fb884d22b7935840269ec5a7f3fbfc26acbf2b254deb56c7141/1", "6365f7ef309e39ba586233d4df2a11a807ac31196d88e48e3b240240f1f44846/2", "aaa161b6183fd3694502e22c7c3a80bd7493cc08c80e806b7bb489926ef40205/1", "1455fc20afd39eab0bd33704a6042ed1a1805bc735a4bfcb48f4ad05407fd8d0/2", "9ea178aa426767ae4bcfd4ad1d6369f6c7510d14a13058258f61036e21025eeb/1", "b22ea8fc26abeae698d8dc14ffc5cb2a3ba92a15deec84992e3f57e0b5280e21/2", "c151329edacb87e0329a854f901b8eb6da27a4c1a884f736f37db95f3fc9b0f9/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "1201b3051aefceb3006d85075853b19fd2c3d76cc6cc14b521eba4552b302052/1", "b89c725044c4a91ebf389168c9fe1efb47ca3d200bcb1f122325cc63359dc437/2", "e207e5c0087592a7a6a3cd695b991051778d7951bae6ca0023cc389ec4ea9fa3/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "5281eafae3269e56d5d6ee676b9b12c7721b1cbe9a43d312a817209d7962a99a/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "7354d8003d8e4264d02ec21ed18ee8a42bd7f9cd5ff9db6276c34a23d254c77e/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2"] }, { "id": 1642, "name": "Sum of Four Values", "solves": 3949, "attempts": 4411, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given an array of n integers, and your task is to find four values (at distinct positions) whose sum is x.", "Input": "The first input line has two integers n and x: the array size and the target sum. The second line has n integers a₁, a₂, …, a_(n): the array values.", "Output": "Print four integers: the positions of the values. If there are several solutions, you may print any of them. If there are no solutions, print\nIMPOSSIBLE\n.", "Constraints": "- 1 ≤ n ≤ 1000\n- 1 ≤ x, a_(i) ≤ 10⁹", "Example": "Input:\n8 15\n3 2 5 8 1 3 2 3\nOutput:\n2 4 6 7" } }, "cases": ["f489268e0b53bcad5ac7be2a98a7e29701c784348cbc01cf59cfd160b6b4632c/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "5a9c87245a122713050267cff971bd871fdaecf1633b5288ed7b813562a5f07a/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "97cbb1da9acdcb9cbe55388f5d0d9afc0497f87a81799246c4f0f80043132326/1", "269391dda543e1888caba795038dc9ff21a8856a31bb9c270965be97a15785dc/2", "bd54bedc723cbbdae8e487470372efbdee3fd087517f4c54ad5cbae466469438/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "40d45b50697daa92358ba355391ed31f880e372916a37252d62ec3e05193a3d5/1", "2462169df49fad61d8080b119284a203f4dfcffb6c654e3d73471044a4b15256/2", "3ea6b50a02376a142ed10ceb64b748764325a21bc4dbe3101259d32b4deba848/1", "7b65f0df7b3216208f5dfdf71ec07176d5fd2f0840cbad67750ebf19098e54dd/2", "81429647277ef5b843f61d9ba146aa310002f895d7f6156d7b1e96e4b7c3c4eb/1", "153628ee5c7a0effd49a8a2e7cc07c9ecabc30bb9405a2e2c68df75f8cff20eb/2", "dab033cfcb1bd506c9f3c9c0ec17935cec1bec97dbaded8c131cf95e6478d09e/1", "370856e8b4455fc8fa59c04b80690f2d66306c5a255c0c82ee7515112a012a5c/2", "75bc9a764599218fbf7637e128a317c156093f0a3eebbcb7176e69b7975b56eb/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "5297d8fc8ba99520b60ea915b66ad8274c0a84c2d941bd44d5cb78bae1ca0482/1", "02bb43e1f52f7b6c4446fa15ed23fd11735954e76e9e6327d91c220d99703e78/2", "15ae04a5e2d58b16bc7fd5e98d231ff24ca4f62cf4f5bff14f99bee992aac126/1", "c8700205e93df76a20ec24389e1a317fd3215c958b95d8744a8689ce4ffc3436/2", "598d95a5b064f564d5d9738bee19a71ce84747fba649eac6611eaaf536b6cd3e/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "8a800a0bb2e2ceba0ce3b11f658e85d354610c58da703b03624b60012adbd7af/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "c6a51ad9a1e5b02471e087611811138f3ea7538a413c097ac23616d9421112a5/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "b077b8bd36a92e14d8d280844769b0110c124c58e07182f1e5dee933c20c9c56/1", "269391dda543e1888caba795038dc9ff21a8856a31bb9c270965be97a15785dc/2", "9d3c00a8d4d3ea53237ce15a92ae3c270e019d0d5bac4db65cf6b6914d714f5c/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "955b547bd25a8e3660a338d1b530d4725bee9fce711ac335a33eb8ed3edcb65e/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "d3f6451910febec1d08112584972f055f281f491651e92f9fdedd90a9371a297/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "817eb7cf52a472bae4dacb7b33ebf615ca5c936270059ac187e7104af9fd0b28/1", "01242870401a1e9d46b3968625c7e311ccd180abeb1cc8880b065575f3eab0d2/2", "07b0f590f7a9f92834b7a5084299cb7cccfc0f3ed202e56ecb9f0ff377954520/1", "36b5537115f4483fd7254f4d239cae6ab18e6c05f4dab50b2242be54b8c58ab9/2", "b7cad881977d796c0333d3e11564d9e05058e500fb0876d356a0601762c22898/1", "30482b38fbddf168dea25a491e38c08ccc29d40a095d0204375fcc9c7dba871a/2", "4883a07e44a9c0cfdd89f8e2939241c0d857c71773de695a5268894a028f7556/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "bb74d0aff0ac1f66c9a8861ec693ceb660d3853ea62a5ec158155d9ec68ed6df/1", "e7f2c006915e8f36aa6b09bfc981886f28caf786e86c73cc81dc5a9fb5c555c8/2", "ef109a84e4ef8c2aa3bd25cab63615b0ef884db70b26dd18be4b0a6c20f65b6a/1", "2a5c0ef4c94c374823277ad5c8f07c6d222da8e1ec5be6a1306891b27f68686b/2"] }, { "id": 1645, "name": "Nearest Smaller Values", "solves": 4863, "attempts": 5086, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given an array of n integers, your task is to find for each array position the nearest position to its left having a smaller value.", "Input": "The first input line has an integer n: the size of the array. The second line has n integers x₁, x₂, …, x_(n): the array values.", "Output": "Print n integers: for each array position the nearest position with a smaller value. If there is no such position, print 0.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ x_(i) ≤ 10⁹", "Example": "Input:\n8\n2 5 1 4 8 3 2 5\nOutput:\n0 1 0 3 4 3 3 7" } }, "cases": ["df297b5fc75833f4540c3e8a1d48bf3d1cbe39720952b6867470e2d313f62002/1", "835396ad5e462295e732fe8005d543df9b275d6556da8aff182db8db91c933cb/2", "8a3fbf51431064373de4648222c041f83407271ba9b9bc5e8bffa1e44070f105/1", "a6055685b19f5a3a8494394075f00f42fd7b3c3f99dc0d6d3208cd09bf891301/2", "63c29de753dcc0a75a3a46ae2d195fec7a88cbd421b24dcb3458eae50ff03ec2/1", "9f8622e1833679471c182f7482e05c916073091e72c1651583aeaf62e31d7835/2", "0be5594fa61710760bd37b2df0a27dfcafac84e8d0e0f9184a205ed44ece3146/1", "7f4666a6e0275fd918c6a615df29231ac30d2877623f14b27d4b1ce037a23ef9/2", "98acc55246bb1e4c7a1327c0698607a0cd5d380a527c354433911a7615b3b4b8/1", "4da00d60025b23dd3a110d17f3d35755c1c1ebe7ce7acac00faf598061d5109c/2", "5f6b289687f195c4c684d93486eb6225a1f8058d680cf6ffc9242f301cd30d0a/1", "a4761e9a7e0c1709fef123263f6dfd33a5eadffaba8ad595dbe246c7bc3e8d49/2", "96988a8071fca9963ff7e460c23344c67d012cbcccba0bba6d3b3215531ac63e/1", "8aefce1b034c9b73f1f83b6b9bd36d5a047ca00d72d2272f95fd834ecea2fa49/2", "e52f981941e1427c90d4adcf6893e925774c36a320085704c675f7bb64693347/1", "2ee71d2beb1ceed0677afa13702d2353c151bbe66ffbc8bdd6f09e4ccc1b18dc/2", "964c234162bc8baa9e1d8a962624a066acc9fb1c0a7ff9ec3e7abbdb624c93ce/1", "746d426320885c973c1c9b26dae8e00bf2d9dfadee7b95f181aea85240d85bfd/2", "736f1442a42874bb50048a8bce38c48f8852eb6e3982ab8a585036d017caf5cd/1", "b9404f433be64ad1f40b0d467e737c3edd973e9f2c5d1f7e82a2c393e58b8621/2", "3c949c3e801360554e94c619166b603550586375fc722b3910a2a39c2d18c1b4/1", "e33d7bb0179f82fb696b8f306be785db38b439cc7d4a27650e44800b0c4bc926/2", "c18934af09633b1d444f035cf0c344816787b90212837e05b66ff9c3fe297274/1", "999c6057fcc6cf938b6f837754812bb47eccfe2c23d4959e9e38ffa3072ea9d3/2"] }, { "id": 1660, "name": "Subarray Sums I", "solves": 5864, "attempts": 6491, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given an array of n positive integers, your task is to count the number of subarrays having sum x.", "Input": "The first input line has two integers n and x: the size of the array and the target sum x. The next line has n integers a₁, a₂, …, a_(n): the contents of the array.", "Output": "Print one integer: the required number of subarrays.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ x, a_(i) ≤ 10⁹", "Example": "Input:\n5 7\n2 4 1 2 7\nOutput:\n3" } }, "cases": ["530f723caa7430ad9aa6caaacd69b1ba2ab8a14e3ec26988851bbdcf9532d205/1", "9e62e6489fcc4bc58be7cb23e74d25cbfcc3732c1f70e8c37f12a756d1db9381/2", "7ecf88babb527e8c4a67c19f387dd2f296f7ececc862f6162a41e98a31a3db69/1", "eea8254c7500ba3de996aa8ad6af399183f04e17d4a8102fde539dbc93a90012/2", "a3ac5a5b3afe53ca16327436bc625f54b93730c2d036b4a05a766850803cf2e6/1", "a9742eb8ee320e006666aef25ae9aeed948247f3125c9cafa7cf97b7e7467dd5/2", "373b3836d92d112641746827395e421f891e1c1bf3efc01db4644ef4e28152c1/1", "7a25ea8872da8c2f6ad413875d9b397f625b036bc3b56e6c88eb64fe58ad293a/2", "9c6a80801737c7d0b723e9f89b8b475a94da42744358fc171f656f1c72c14c56/1", "d43574be921c54215a1e05bb2fc0c1a4b63dd2aea4bbfd5b9ebc11a2685943e2/2", "7bf8848f358e374ec64d7f8626dc87d60dcc2febb6e690fc7e6f5a3322a1a6bd/1", "9597975a67bf760bcfe148da3b70920948157377dedc9d3d555c4d17e32a5274/2", "a8d5a22fcb67d2e8ebbd05c5a27bb759123069358bfffc38b0953bb88a32c1d5/1", "3e4dd0dd7199adde06dd2118b9e4a34ee8dec8410fc0e7a039795dc9ccce34fa/2", "296771065505f997ab2e450f0cc11f1868b0f789d2e75d59f399963de3f32d30/1", "a9742eb8ee320e006666aef25ae9aeed948247f3125c9cafa7cf97b7e7467dd5/2", "c0a56fa34ab5c731ba68d7934bf4d16f18304fc94331bc495495e506c625b5b9/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "6d660add643e1046d6a1693003b9788691a135503141aa336f4ba9f5c1c1fffd/1", "00d9cd208c4bb685541067ed529222ed418e5cc75d71304d8ef159f3ea3aa50e/2", "fbc274f51eab6760b45ab567bac3e3a8c7f425fe638b9006a771a61f297c55ea/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2"] }, { "id": 1661, "name": "Subarray Sums II", "solves": 5478, "attempts": 6117, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given an array of n integers, your task is to count the number of subarrays having sum x.", "Input": "The first input line has two integers n and x: the size of the array and the target sum x. The next line has n integers a₁, a₂, …, a_(n): the contents of the array.", "Output": "Print one integer: the required number of subarrays.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n-  − 10⁹ ≤ x, a_(i) ≤ 10⁹", "Example": "Input:\n5 7\n2 -1 3 5 -2\nOutput:\n2" } }, "cases": ["530f723caa7430ad9aa6caaacd69b1ba2ab8a14e3ec26988851bbdcf9532d205/1", "9e62e6489fcc4bc58be7cb23e74d25cbfcc3732c1f70e8c37f12a756d1db9381/2", "7ecf88babb527e8c4a67c19f387dd2f296f7ececc862f6162a41e98a31a3db69/1", "eea8254c7500ba3de996aa8ad6af399183f04e17d4a8102fde539dbc93a90012/2", "fbaea60b4b5dcf317244e60e70c13707720b4bf2b01c562ba348c2b841d4481b/1", "cae8934a441243980ca44aadcdf5e70da43aff4b901e7d53b6f17b479ec4986e/2", "94e24409d5bdc0c80fd2b86d29e9a72e216e854de9a97d16ecbcd7ff99d6ba40/1", "877a8799041017f1719854e4e295c6dca56cd1cf1b1914d1bfed9281f7fc2686/2", "373b3836d92d112641746827395e421f891e1c1bf3efc01db4644ef4e28152c1/1", "7a25ea8872da8c2f6ad413875d9b397f625b036bc3b56e6c88eb64fe58ad293a/2", "9c6a80801737c7d0b723e9f89b8b475a94da42744358fc171f656f1c72c14c56/1", "d43574be921c54215a1e05bb2fc0c1a4b63dd2aea4bbfd5b9ebc11a2685943e2/2", "f797d977c6da8d04e811d13a4b3ee0718f2aee698d73eb63a9bb32389075accb/1", "80318278668a65584b64df8779e86dd61957427ab38d04b4138cfd41ad19aeb6/2", "5f77f27235049ff26b77fb20d97ec86442f7e49dbccd924d55dd9f88125a8c48/1", "081266563724c2bf292b5d61ac3d49046d81063516f0dd9973299a754e700140/2", "bf88f971197da745cb3425ca6390f07009c18e91b7b96cc6af3033d66e340f86/1", "38ea4bbef6fea8d73df79e1cfd9ee0e1e8aa44b963877e0285c6e892018cacda/2", "7739366fda45786c3d259ed7eb154b549f7b13434c855c119ecb09c49c3fdcb9/1", "38ea4bbef6fea8d73df79e1cfd9ee0e1e8aa44b963877e0285c6e892018cacda/2", "f025eab90a288e0d8c69569c148d5022bb00420ca320de70cd23d50547066cdb/1", "38ea4bbef6fea8d73df79e1cfd9ee0e1e8aa44b963877e0285c6e892018cacda/2", "6d660add643e1046d6a1693003b9788691a135503141aa336f4ba9f5c1c1fffd/1", "00d9cd208c4bb685541067ed529222ed418e5cc75d71304d8ef159f3ea3aa50e/2", "f48b72df2b4a54a4a0414e1b1311ae0436654835527fae314040ad2ab18ce796/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "b50506e35d8f7913b2d34778f7cbcae919632e8c47330eebaf6ee8ea8e11104f/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "8ce06d310b03721a077c717380b6a61813ddecfa7d911838915ef42e642754bd/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "4a4f9b5e4220fff649b073366b149c2a08f14bff96536892e55c1c6e94bb3dc2/1", "238903180cc104ec2c5d8b3f20c5bc61b389ec0a967df8cc208cdc7cd454174f/2", "296771065505f997ab2e450f0cc11f1868b0f789d2e75d59f399963de3f32d30/1", "a9742eb8ee320e006666aef25ae9aeed948247f3125c9cafa7cf97b7e7467dd5/2", "2c64180bfae7481c85dcf96369c13f8431820e100846f08182fed3bc82c2d416/1", "38ea4bbef6fea8d73df79e1cfd9ee0e1e8aa44b963877e0285c6e892018cacda/2", "0445732379525256aa9752cf1e041024878265952c928346be7184ddabb89d59/1", "d43574be921c54215a1e05bb2fc0c1a4b63dd2aea4bbfd5b9ebc11a2685943e2/2", "af1858e4b826c9439dcef5516feb6b23b4bc2cb15b5851139d099a502af79bc2/1", "7c47488879d282ab8f2ec831eb50950366cb3e2c960d6d73bf2bb7d29dd58a3f/2", "47efa279a9d50c4d101fd45a2ec40c67ad782a003e00a16a85a1207a56f8fc2a/1", "b512f68cc84343dc5fc269252325f53739592a7941c1482fbac331df6cfeacb3/2", "b48f3bc4ee0bc353291b9b3ee7416e428636f5441ce76627d9fe69d15a119ab2/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "888eb80f6f54d2afccdf9f5f12d73e2486553a004e3d88c92d91c74ff9132f7e/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2"] }, { "id": 1662, "name": "Subarray Divisibility", "solves": 5007, "attempts": 5393, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given an array of n integers, your task is to count the number of subarrays where the sum of values is divisible by n.", "Input": "The first input line has an integer n: the size of the array. The next line has n integers a₁, a₂, …, a_(n): the contents of the array.", "Output": "Print one integer: the required number of subarrays.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n-  − 10⁹ ≤ a_(i) ≤ 10⁹", "Example": "Input:\n5\n3 1 2 7 4\nOutput:\n1" } }, "cases": ["4ac35eb03a10ab1826765a09afe3606ab6a9497de3614d9e9d710ed0224925f1/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "a0e15a2b8f161aa96d285ed3a7aa5c60b2f88ac4fce3c0f03c76ac3f91faf193/1", "cae8934a441243980ca44aadcdf5e70da43aff4b901e7d53b6f17b479ec4986e/2", "e345bf9764a40e8c280ba99699c3fc6bec30bf7a32e862d442f3ce2878cc49a4/1", "e3667f7d8c030260bf49046f955ec9bebdb9a4cb8a66b812fd498ded5431a821/2", "19d069a1577bf0ca04ba13c31dabeb8de05f9e8d9fdc6548ed48df252403f3ca/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "e452a359c834155b61dc9b25b167d31ccc5aeb2e847a282f8aed25093f5332e6/1", "80318278668a65584b64df8779e86dd61957427ab38d04b4138cfd41ad19aeb6/2", "a24cd5c243f5422929410556ff7b93493cd2ec1ce666e9566938b0e54260ead0/1", "e50539c888a664d507c94e94e6f5158423dfee600d2ff3e2edf37a527d92c2b4/2", "dcb2828204cec0d4a76afd3c51c7f9bfa1ccb2aa5b9a1abc08a28ee818aae859/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "7921a3693afd503ba1e9667f3dbe1eed2e4e37953660ca4aa4f4dab0e9618983/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2"] }, { "id": 2428, "name": "Subarray Distinct Values", "solves": 2080, "attempts": 2211, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given an array of n integers, your task is to calculate the number of subarrays that have at most k distinct values.", "Input": "The first input line has two integers n and k. The next line has n integers x₁, x₂, …, x_(n): the contents of the array.", "Output": "Print one integer: the number of subarrays.", "Constraints": "- 1 ≤ k ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ x_(i) ≤ 10⁹", "Example": "Input:\n5 2\n1 2 3 1 1\nOutput:\n10" } }, "cases": ["3745e96e3490026bf0edcf8459c36fdb6a2ae11857c57f3253109adce7507e2d/1", "8a86d5bf17c88b97b2bd92254d46ba4474b7227f83a5a69c1759b633e690fdb0/2", "0e2514f50eb7ed6e747f5ea82c0e1f623d03b4d7837255f286c9375c5e9549da/1", "d43574be921c54215a1e05bb2fc0c1a4b63dd2aea4bbfd5b9ebc11a2685943e2/2", "144bced63b60cc5ed064848ca086fce2eb68e018e92d960254aa826f5ff8835b/1", "e85adbc295f2024a2fffd3bc8a22818f9cc3e1eea41268bba16a76ea12b2d2a9/2", "058bb59cc08a2b8789fe98ffbff068789f12dd386c5f99b3971d99c49da0d674/1", "80318278668a65584b64df8779e86dd61957427ab38d04b4138cfd41ad19aeb6/2", "0af67b3c0f498e4f7869873feb742b46c195f49556b8405c1afb809ea3191837/1", "80318278668a65584b64df8779e86dd61957427ab38d04b4138cfd41ad19aeb6/2", "bd085a96b2171dc07020779335a271f8785d88438c289166222715e7154cf15a/1", "80318278668a65584b64df8779e86dd61957427ab38d04b4138cfd41ad19aeb6/2", "f5cb3c81ed0722f78e112e4418afa74346e0de6f5c80b075e388834254205408/1", "c989522412a28eebc66ab66f57e79b19d1164546f204da77430a25984849f196/2"] }, { "id": 1085, "name": "Array Division", "solves": 4123, "attempts": 4378, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given an array containing n positive integers. Your task is to divide the array into k subarrays so that the maximum sum in a subarray is as small as possible.", "Input": "The first input line contains two integers n and k: the size of the array and the number of subarrays in the division. The next line contains n integers x₁, x₂, …, x_(n): the contents of the array.", "Output": "Print one integer: the maximum sum in a subarray in the optimal division.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ k ≤ n\n- 1 ≤ x_(i) ≤ 10⁹", "Example": "Input:\n5 3\n2 4 7 3 5\nOutput:\n8\nExplanation: An optimal division is [2,4], [7], [3,5] where the sums of the subarrays are 6, 7, 8. The largest sum is the last sum 8." } }, "cases": ["4e7b181e8609ab1a6553b0b3ea89294fe49377aa5c90010fa6fdf19a97cbbc71/1", "bd359a4f4e2f31924f8c091c6ae7dd30a72f52de2b980a0aa6b5515f2898b9c8/2", "95bbb150c08afaf53007d650e94f4072b2ad5124ecaaf43e140f0c210a15c813/1", "68abb57bd1d384d8f4aab94d3a6e21df4ccf84b71e8f4563b849ee7c6565eb9e/2", "b7fccc1efc8452f744b4939d36fdcdc7a56c6779e46ca4b2869f5c08fd154446/1", "079e86c497cfc5899bd578aca7bd16515394c0080bd404b71081295cff147490/2", "f8cda0d88ec38b5d48606dd1d2deb4223264dd9c21fb1d3d86bd41082f062366/1", "540d7f2888c3cf9c8206b77233f8f16550ed0a591510c7cad3c7c1589f212486/2", "e704c1dbe3209232329cdc276433cd8208dcda78cfa21a54b6066af2e175aba9/1", "899ed0206c3e7845ba67eb0b64fa7d17cc7417b8df3213d7e4d27575decc2659/2", "3adfacf7037b1db644d5d49ac777a785339f19f3d05be0d785c3ccedcda6ee7c/1", "6fde6be3baec5bf05e2075133f9b879d505fc3e49ab1a7dd55c4f9138e385da6/2", "f469ac071e6f522c67cca6ca6fb249fccb834053c412f3af4e3556243b124595/1", "83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9/2", "578d312a775619eb04dd4ce93acc98e133cb3f11d9b6e5174ed3c6738debd96e/1", "69e160fd3a1e1cb8b1e76daed562c07929b3f21a3c837bf47694baaac716a89a/2", "33862985a245a7b46f0985c0a012ceeb0dec87d5114a42cacc0f280dcfa5bf14/1", "596eaec788db875331b82cad0866ba281115e5b4b4e240020136ed4263c365b6/2", "423db68475cccee4176b55f672a9bfe23c759894f3258d3cce7786e66b5088dc/1", "8034314fd0f0e0e4495e2ff020c42c2224bc7b15a7f7b69ca50401c65df21df6/2", "202c6f94123d9f82ce7e01e5f609d8f62d5bb64fcc9a5b75b4c7f1c443ba66ed/1", "4bf59d64fb902da12a5168a34f3fed0fce5ca949e724e6753e343ba0b9bef2fa/2", "0540add59354faa0f9be6c20fe0646339ef205ee6d86eff2e2a1dfeb3dbf3991/1", "99b5c30d11855d9d3616db90757be5e3c64ff2550f25a6a6433eaf0419d84194/2", "5f5bbd49ad000482cfa4eeacbf98098cf531e969fe198e8e721a61e893b0dd77/1", "208079cd5a09488a6717d93dfd977d6b27203706ee2a288a85fd076d812cbd79/2", "392be84a53dedc68bdc8e467119c427a96ce60c26daef7cb1c77d86058e035a1/1", "4f6bb49aabad3e1a724c1846d154c7bd51c920caf9d97a05ac9a3035821c62b5/2", "d03b83e4a2e332c178d998cb010534b509bf14bfade6624e63106a8f8e2215ca/1", "ea243e5457028e97f9bc93b37a72f8e80ea61ae081911bb037765590ee6aa435/2", "dc68dd3681f2846d2b7e3ae0d93623503b04a0714d3f04f7e6db1eddfdcd9ad9/1", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/2", "dac5a4d1b0cde15572287e7e84fb7399d6e8efe4a40bc7145f264e2cccbd3e65/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "8f9d894ac120ef33ed2c00edf5029a2dc1db7f062d2202e49c6579f2b9aa3af5/1", "d4e86a6f236271650efdbbf4f4e35f376c223a922addf12c0adc76fc0312b62c/2"] }, { "id": 1076, "name": "Sliding Median", "solves": 3160, "attempts": 3682, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given an array of n integers. Your task is to calculate the median of each window of k elements, from left to right. The median is the middle element when the elements are sorted. If the number of elements is even, there are two possible medians and we assume that the median is the smaller of them.", "Input": "The first input line contains two integers n and k: the number of elements and the size of the window. Then there are n integers x₁, x₂, …, x_(n): the contents of the array.", "Output": "Print n − k + 1 values: the medians.", "Constraints": "- 1 ≤ k ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ x_(i) ≤ 10⁹", "Example": "Input:\n8 3\n2 4 3 5 8 1 2 1\nOutput:\n3 4 5 5 2 1" } }, "cases": ["87fdba7ff1885bfc0a71a04ca2892be421d9a3cf07e0632a126b5c08cab08923/1", "eb4490d03c1aef0f49cd96de1f9fb4e8d315f3e4064393e5341bf0aed74859dd/2", "1d9716b9ab8502e40f83e5cb2159ee709dfc11cc3242a5d6762741ef238bdfe4/1", "0181d34c8d802bdc51b1318c556ec32c6c32b7756b607795fba07f34db02969d/2", "653e2be4c83b1f77d292002c6c82e72efb520115a19bdecc3c8008070a22b9e1/1", "d4fcf4a343f4d7d7fc4084765b5cd35d2d8b41aeb43a88365a4e7c8534e6849b/2", "c9769853a31a14d11d776b48427b6aa3c6bd54b4e34df9e23ddd5fedf7f2a043/1", "09f5c30f9323d57c232caa4f20dcd1f46649e8f8fee3ec5e327640b5bf86f796/2", "854ed3a99d967ba716e7754e821a39d98e5ebbc29e68f5f79053f96fc839bd59/1", "c5295c00ead93b36a700b78c0cae17503dba4fe423425220b23f8519b5f734cc/2", "298cfc12a32a2702e55739e31f823bd64d2ec974a87a851d2c2595480c0e8527/1", "fd6757f9693fd8f8f97689c544691ac8e81279cf6c1b9c394777e6a955e63738/2", "95305c7a0e32d7917a5f1c141ddcb84fc1aa33155f8d867d9132880b03b4f9ff/1", "7e68a1b554d61d1f2d447fa7cf46f819b845bab26c91f8a51cf6ab4ce47a2acf/2", "373b3836d92d112641746827395e421f891e1c1bf3efc01db4644ef4e28152c1/1", "4b744035c9b151d58ecb24d74581f5fa36ab198a155cea6a0e00343430281463/2", "22fa52055f579fcdf8d72a9f9f8ab92f4969487e456a4adfc93f869db6541b6e/1", "d1a7b3c70fe1552b6edb3f2f746cd61f02d1b4e6a385bead7899a81c80bed3cc/2", "0af67b3c0f498e4f7869873feb742b46c195f49556b8405c1afb809ea3191837/1", "c5295c00ead93b36a700b78c0cae17503dba4fe423425220b23f8519b5f734cc/2", "729d90afa21ca8ea2358f1c423a366347767226bcdd12d425e3a8986d9ed62ad/1", "357a1aa8a3008e3f9b37f0be0a62af4c3eed5e0e182b6e67a842741fb40b99f0/2", "a6706f2fd9c63217c9b2b061685c99797f1cdb99ed2e69e701bb8eddffd8d894/1", "3d6329fda493a851561cae4838b8a3c82519c2271735eb0463099d4929ced229/2", "17892758f334282d62fac93307da130cda6ef22f51e2f1c69aa54ec98d64b2c4/1", "15492e67aa4a137d7fd3141a0be7b643673c3c6bb5b41103780c5fb4cb852541/2", "9fe3a834028d663d202128436b2e0354ef42d734ced228986452528c8ecafc64/1", "f63e9f4c58f054a0442716e7cd078e2b8c6c15e25a9cdfff4b1d785dcd28c958/2", "0a53e38575d858855b86e232b91eb740c13a15e9481eb7f432a9d62a72c571de/1", "26b967e0b517fd5a35c498f6c098e4149cd3e713094c56a7400d104e23bcca48/2", "2cf4140a2db20a7a20ac0a3e785de685cd588b98c4028db71750b46730e2f7cf/1", "b3d8b599d36fa5f2f311f4916c44453067e068089ec05c5284608e5eb039675c/2", "031aa0ecd7e33b0c0fa4fbeba7e187b11d1c21c3010d01ec4d689355a0d72295/1", "19bb75ba5187d861ba71092cf4d2c9193492b8f26434aeb892519a6f30b9b260/2", "9f359fca461e81269f7a67409081c1e08856350f611b845654f9c9244fb0597a/1", "9d2e225a1b3d026e418abd3e23279430bdcb0c78a280797b34f95f4405accaa4/2", "c6120d955ae3e404bdda09d07dff92b216ffaa6e9f33b754e0bf12d855e250d5/1", "96513a53ba2c721685d3e0f41bd34f9af2383b80f928b6ea8e664bc02d32d59a/2", "0587e225d1d6854f1ba2ae4cb77911277c8a3969c972416832e6488b277d4f60/1", "0faed5d36f3f5c3dce9730d725660e4e05fa11a91e0c90cde4664ff52dace727/2", "a6719dd0170b3931d2bc360e6b3570390922ad80e3f5430d14c51dec1f2bf167/1", "a8377eb388ed20f30df54c095b4533cf2c293d3b88c7f48adc9eb44f9d25c97e/2", "679bfa4a22985832b465054b6f810b2a33f18f70cc7659b70635c8e2881a4ef7/1", "f0269ef781bcd342278aea23e8a785aaccdbb4bb1a19ae0b9fe1347fc72ff6ce/2", "6073c9dba64cfcfc795664eaec4c61657e24a7d90b64a49e21a5233b6de1c5a1/1", "4c621e776fe1ba6aaee07c105b4302d80a71cc84b2c613841f8a69ce71468f60/2", "c32539bf23989488f969b1509b4f073bca18ec21a49b01c8f51ce52aed7687ee/1", "00e17beb49386ab5252a7ebeef453e61adfa8d9f26dc72e681049eacfbda3d63/2", "7a00c2bbb9827f156ade9957660f760836e40362b13829b3542983a4972fdc5c/1", "2d1f51b216f38179e2158a27df1cdeffca800c65b1862779cd23422c976b60b8/2", "ca854286e2050df17e1e30daf4764626b6f27953f2851c718f0283271d81bfcc/1", "d0f0c44f693b7d725f3df5016c5f78844f6920f8205a44c3bd46f6bf8776fb10/2", "972e22feba12047bc6d220050b83b103e4d2359f6e1a99d7a77bd04e2e6b7a3d/1", "0537fe1705be869901d24b5ae5f8ec724d3813a6c18b0ee8be8a138df8f3b331/2", "aaba6f9e81318b6ff25e05784cb7cdc361e97a3856cb167a474a736b51a9be5b/1", "b1aad43c4137f4f115e0cb3bc476d6d85a5ca29ca9017061692992817f3f04a9/2", "016c6460900c6f11b95a5f1662ddc3fa4e2bfaf8c553befe52ac6ebd023c0b6a/1", "6a1a7216718a7b47f710011dc52fae1c12534237451535c4ff2c5b9d88d4e9f5/2", "9e86dac857274690e8b525b70e2213f62785845cb6a7d39a2b337149819acdc1/1", "f82233ac3c14f355ab963d68640d7e05238e66595fd5d93e632d174c7c0aaa14/2", "509ba232ab191127d8f953966f8a31e5adb4cb8ad3e1e0cbb12fdd9e42707b47/1", "0381b0bade1df49a2d60ea8064eba2e6db185dfaa246314b8e8b62d911f0b6b0/2", "b358712ee1c575d9c52aee00342f55bf36cf01ca8a2f320a322ea2c26bb78e28/1", "7bedf810222d5fb49acb61304e29b467ad44449592c4cdbdd2ff1c5837feac66/2", "9e33d5f61cc607f29ee0628cb5a30400b1b23feb18058ef8eff07c81e82747c9/1", "e40bcf6b66e1ae77253f1225e470774667337a553a37ab952cded235a98cb66f/2", "553e7f99f3ffbfe383c090ed40c00c5527695c3fafa6c329132929970dcebc7a/1", "ff06ed09adcd69ecbd4760755ba08b38348f1ffbf26f9dad94cb6e2da7f01371/2", "33e6aa2e9783c6fcfd08e4aa18bc58ac3bb6e7eeee25745ff93710d0395007e4/1", "30c5998961e0955aa8bb4398264769b03cb758db5e7ad56cc10eee00c45a39fd/2", "06865656e59d3ca61c61af4938eefc55ae3ffb53b9ee54abc678222fb7c3e545/1", "4ad8a1131b43b1f998e929b919933ba0256ebee0ce601035fb4f09089743e4aa/2", "cfa383093bcb010b764025cf6e0fff02c26a30fafa0ec65b7bb22001ad5840f3/1", "ef1da5ccc151cd272ca5635bf23ca3eaaa4c800a3f954efa3ff5e42c2b2dd166/2", "f0cd433a09c5ab0e1950c63e8c4ae6ff9bfb1d4f8e7ae78ba86e44921ec1c478/1", "8f9ffe7bc5f6f30468df2405a32d17c2a33ccffe49febf176470e5923aeb6752/2", "b7001fcb799c240f33a7c277384087737c4bd0be95203bf3a8650453c0b41499/1", "a06955c739e1d513bbd36710c77e2fa70bd473f6f15fe9edd393effbc58ff85b/2"] }, { "id": 1077, "name": "Sliding Cost", "solves": 2199, "attempts": 2512, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given an array of n integers. Your task is to calculate for each window of k elements, from left to right, the minimum total cost of making all elements equal. You can increase or decrease each element with cost x where x is the difference between the new and the original value. The total cost is the sum of such costs.", "Input": "The first input line contains two integers n and k: the number of elements and the size of the window. Then there are n integers x₁, x₂, …, x_(n): the contents of the array.", "Output": "Output n − k + 1 values: the costs.", "Constraints": "- 1 ≤ k ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ x_(i) ≤ 10⁹", "Example": "Input:\n8 3\n2 4 3 5 8 1 2 1\nOutput:\n2 2 5 7 7 1" } }, "cases": ["87fdba7ff1885bfc0a71a04ca2892be421d9a3cf07e0632a126b5c08cab08923/1", "a6055685b19f5a3a8494394075f00f42fd7b3c3f99dc0d6d3208cd09bf891301/2", "1d9716b9ab8502e40f83e5cb2159ee709dfc11cc3242a5d6762741ef238bdfe4/1", "a848cc7ddae0f20b12e80a10cf8ea88b5adf9c7ca8e53af3ca1a47da2a30c8cc/2", "653e2be4c83b1f77d292002c6c82e72efb520115a19bdecc3c8008070a22b9e1/1", "ff5a10901bf40451ce68722d48b087e78c8fb973dd7fa3071d3c0e048ea42ded/2", "c9769853a31a14d11d776b48427b6aa3c6bd54b4e34df9e23ddd5fedf7f2a043/1", "f9665edc456bca578b920d07452974316bfb8899b8b7051dd267a4b015c1aecb/2", "854ed3a99d967ba716e7754e821a39d98e5ebbc29e68f5f79053f96fc839bd59/1", "41076331dd794a2a155e9a375f6d9227cb82906867adce1b5089aa553c4ccaa9/2", "298cfc12a32a2702e55739e31f823bd64d2ec974a87a851d2c2595480c0e8527/1", "4da00d60025b23dd3a110d17f3d35755c1c1ebe7ce7acac00faf598061d5109c/2", "95305c7a0e32d7917a5f1c141ddcb84fc1aa33155f8d867d9132880b03b4f9ff/1", "cda236c5daf2527d8a83774f16a80d0de9c8fdf626cb311b22c01a44d6c7f2f0/2", "373b3836d92d112641746827395e421f891e1c1bf3efc01db4644ef4e28152c1/1", "45e7308ff361d538656b855826b8fc9180d0cba8372175205487100ae85bb649/2", "22fa52055f579fcdf8d72a9f9f8ab92f4969487e456a4adfc93f869db6541b6e/1", "a13b16f062b40430310c33269aeaaaf5b83d2c5e2ea0a7b7ea26b8b49122dad3/2", "0af67b3c0f498e4f7869873feb742b46c195f49556b8405c1afb809ea3191837/1", "41076331dd794a2a155e9a375f6d9227cb82906867adce1b5089aa553c4ccaa9/2", "729d90afa21ca8ea2358f1c423a366347767226bcdd12d425e3a8986d9ed62ad/1", "a6055685b19f5a3a8494394075f00f42fd7b3c3f99dc0d6d3208cd09bf891301/2", "a6706f2fd9c63217c9b2b061685c99797f1cdb99ed2e69e701bb8eddffd8d894/1", "0181d34c8d802bdc51b1318c556ec32c6c32b7756b607795fba07f34db02969d/2", "17892758f334282d62fac93307da130cda6ef22f51e2f1c69aa54ec98d64b2c4/1", "fda845460090f7e386599cb592aecb7b915ae5a21b11f41dbf1d864c392c106d/2", "9fe3a834028d663d202128436b2e0354ef42d734ced228986452528c8ecafc64/1", "4847483fe87fc777f0d8659061edafaf0fcc83f94905baf5549f05abd6d5e653/2", "0a53e38575d858855b86e232b91eb740c13a15e9481eb7f432a9d62a72c571de/1", "29343d150a210a60a7317f2a88dd3a9cf49d02fab43f9ece86c11b34151bd1d7/2", "2cf4140a2db20a7a20ac0a3e785de685cd588b98c4028db71750b46730e2f7cf/1", "4da00d60025b23dd3a110d17f3d35755c1c1ebe7ce7acac00faf598061d5109c/2", "031aa0ecd7e33b0c0fa4fbeba7e187b11d1c21c3010d01ec4d689355a0d72295/1", "7e68a1b554d61d1f2d447fa7cf46f819b845bab26c91f8a51cf6ab4ce47a2acf/2", "9f359fca461e81269f7a67409081c1e08856350f611b845654f9c9244fb0597a/1", "b71f5da392f9c68e45fee9aa57d852ccd21f5d72be70eed202fce9326a91558e/2", "c6120d955ae3e404bdda09d07dff92b216ffaa6e9f33b754e0bf12d855e250d5/1", "ba04f1451f75806ba346da6769727da4f231732685d63df6a9d3ae0b839dd8c1/2", "0587e225d1d6854f1ba2ae4cb77911277c8a3969c972416832e6488b277d4f60/1", "3a7c821d2eca47dabe7235f4ac1e668ebef615b6225423a69243e7c9d137745f/2", "917ce41f30eb2c38360c77398e51a225fcae48413685595bd8a27206c81dd5fc/1", "a6055685b19f5a3a8494394075f00f42fd7b3c3f99dc0d6d3208cd09bf891301/2", "06865656e59d3ca61c61af4938eefc55ae3ffb53b9ee54abc678222fb7c3e545/1", "96281a4df512ff6fac62804d783363f0b047ccf3287ec9ec922b0caa017a73e5/2", "b358712ee1c575d9c52aee00342f55bf36cf01ca8a2f320a322ea2c26bb78e28/1", "e823fbaa85e421dc1670fc61171af609363e62703be2e7af5694c6edc9da8970/2", "ac959383960a02c7b5834305cc79571a83bb7edce0bbc00836879348b7415431/1", "7315c10be31ab98c7f0dff8f1ba0831d755e9bc6ca5b431db52ff548a8f68dd0/2", "e689005397c6ba9130ccb31c58df5431336e3110fa85a13b0ea12b3450366924/1", "1867355dcc8be04c1e522a75cc8ce33cdbeaa52e9ea243e467b97ff2ddacd236/2", "5589f87dd0b2ebd1037183a60bcf158b4018eb986e4dadafce833893ad15c1f8/1", "4da00d60025b23dd3a110d17f3d35755c1c1ebe7ce7acac00faf598061d5109c/2", "a345b60f595f38afcafa6dcda1caf9faccc4d482e4e03f69d18ceddc2761bf6b/1", "feaf7ea7f65a1f83be44bc3d4bf5b807057003f718ebd2d75b59235d5eb891db/2", "475740ade3f042525785fbf8d448dbe7380fe5938393bff209879cd0b8606d5e/1", "c1021f819001204b026d3b448f13a141d95a7c12808ca5ba5ce596356ac9c656/2", "7256bc67a3ce3c345a7b908947ccc2fc9f4b5bcb6da43f51919573e4a4e74668/1", "9a75c840001fcff4170340f860cf725e36b5957736a6f3b60b717fda2666744f/2", "f28a3c47fb09247bdd87c14e8f78d569d297fcaac2509b5bb864945e59d3c2fe/1", "5149489260b71c4de84e87b39e958e66b3c4e913be342cf93481b2b93fac812d/2", "5712b98e04a7a343a4d20fabe54b3b65a14f5af3d58c286825eafce05742a191/1", "6b3868d3549b6e89217886586c4776578ca9131e25192729338bb2d246b0d794/2", "8b44f0fe6baf2b4dac5ac642e400a3095be1c7a93c59eee580ce5d9c124bff02/1", "3b3150ee2bb543b888889507a5afeb5f976a0e400e4fa8784ed8a3ddce22bf7f/2", "f0cd433a09c5ab0e1950c63e8c4ae6ff9bfb1d4f8e7ae78ba86e44921ec1c478/1", "8ae07fae653c85d4a7954d4852d91c349a7a1135c7d7ba9c7655583b0c090668/2"] }, { "id": 1632, "name": "Movie Festival II", "solves": 2587, "attempts": 3142, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "In a movie festival, n movies will be shown. Syrjälä’s movie club consists of k members, who will be all attending the festival. You know the starting and ending time of each movie. What is the maximum total number of movies the club members can watch entirely if they act optimally?", "Input": "The first input line has two integers n and k: the number of movies and club members. After this, there are n lines that describe the movies. Each line has two integers a and b: the starting and ending time of a movie.", "Output": "Print one integer: the maximum total number of movies.", "Constraints": "- 1 ≤ k ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ a < b ≤ 10⁹", "Example": "Input:\n5 2\n1 5\n8 10\n3 6\n2 5\n6 9\nOutput:\n4" } }, "cases": ["baf2d11d8cd4e9ed22f072b3b52425b24a5f28475be9d297270f6524d1b68715/1", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/2", "43422e0b6e587bb5c6984f0551598ed7d1e0bbbfaaaf6a64f9a4ba30c8687361/1", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/2", "02df93caa54424529aea9a584821db79a876d98c9d72d3be4cbdd719ff0e9c74/1", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/2", "68d8f2ae8204a4d3cde6868b55edf87924418850bb15725a049dfb9ba6c276d0/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "f29bb2c6876fd32bca6279f26ca4a9c3f21fd48204cf00361da219c67819f4c5/1", "8700107b519bcd89881ebd79213b44eaf9cd1a2697129be3110f28a4f9b457db/2", "37870c682bab7d80850ed1ac323037e694487355f2d000711a0206e49dbc3ce9/1", "a143314aef134063a9ffcd9228150623839673529eeef02ed0816f8ba30720f8/2", "9c02bbac9a02db7c596ddedf056199864ed0aed85abf637c8468c5183aac3e51/1", "c86fcea280b46f86baeadd578569920739c7e2681dd617bf0a9602fdc3bbf987/2", "0c9befb9c46ed824992f129cc383c947ef90e39f2667e45eed13f2250e976de7/1", "d43574be921c54215a1e05bb2fc0c1a4b63dd2aea4bbfd5b9ebc11a2685943e2/2", "385c6b2728cae250e8ed6f4a906801ac0b87b16ba034df61f5bf7bd554c0617b/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "2dc268737690385b447b154db05bfc331917d4f5c0abc4896aa12df6f61f0035/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "0671efae32dd4664d364e8cc05ee82deb91f87102a4796362f68b749d0ad524a/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2"] }, { "id": 1644, "name": "Maximum Subarray Sum II", "solves": 2441, "attempts": 2924, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given an array of n integers, your task is to find the maximum sum of values in a contiguous subarray with length between a and b.", "Input": "The first input line has three integers n, a and b: the size of the array and the minimum and maximum subarray length. The second line has n integers x₁, x₂, …, x_(n): the array values.", "Output": "Print one integer: the maximum subarray sum.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ a ≤ b ≤ n\n-  − 10⁹ ≤ x_(i) ≤ 10⁹", "Example": "Input:\n8 1 2\n-1 3 -2 5 3 -5 2 2\nOutput:\n8" } }, "cases": ["a9843c6b8dd87860262abffb99c62cfda2d7aa61aca741c0c96b63534cb11516/1", "732e64e47ffb9c524031887a048b6973dda5f8a9a8b697cd27b5e045df359af2/2", "b288ea82a3f00f0bc464616e0685ca0baac4c04948101ca4492497c3323e092e/1", "a0712feefe5a1f6d8376363fb8530f5b668989067683e5e475d385e4bc063257/2", "8efd293a32859336a11147bd1c9a389df44fdc950ab095b4213a5a18c3b906b7/1", "89057a0b7403bf60fc1ea87c8d41d1d49035a70a5a0d8dc34e14578cdbb3ab70/2", "9eded0426dcea5a76195a3d089ab0141fd181ded19271da47be51cf9dd19b807/1", "4b49373a681afd0aff95d86149a21d38f0ee15491391de5a73185a7c87c4b73e/2", "533bd7f66f4b5d6aaac6c32787cb164abf52ea420883a9937f2642fb5a1cbd43/1", "4393447bd3c1d55ea7f97417ecb1b36a691ccaacaaf2ebd21c59a5acf825fb7b/2", "445a5904315cd147b3e6252b3ee57c1b2e9a050dc4a0cbfd734dc61854ca6de6/1", "e113a05391b8ce0582ebb78405ffc11d14424c71f74b9ff937b857de315aa1ac/2", "f298afc9290c76c83e183890002b2d35e2d7c3a38131f9b3e4d4e0506a78fdc4/1", "1065a20e7d1686eecd7322e335d8f17b505480ee73fabe017a177590f50863c3/2", "7aa97c1632a62f903bb8f0ed75aed4a6f65bbc70c22d8321a407aaebc8935136/1", "f1470642c2203848d126a67149e623cc9489921b18dbbe4dad212b91ed9d12d0/2", "cd96b5f6377c541da8760716883dc82f1499f62c4955a074ab998b900df2f195/1", "674037d0f6eca4f020220c0fb1e8ff3010f0f240e5425662806abedcf4ee7c5c/2", "2f9658c991ae3dc48c94ad4feab52b4668c60013bd3b4f806c5c03edbec7c1cb/1", "f8b86778df70a9ac2e7731f253e360cf623620210f352b682f41550681025503/2", "0752f2650adb47e6cc8f19437110b1911bf79032e5012982d8578284f6fc455e/1", "f1470642c2203848d126a67149e623cc9489921b18dbbe4dad212b91ed9d12d0/2", "32c30753b77e23927e57b32865e799dbdbd53652b76576ff4ef84216066c869a/1", "df136dc01002621e60b1eb8cb337059623a63caa6e395a50480e4273b47e4710/2", "65055aec8b59f3f670731f0d34a44c504277963d63508ae48eeec440a6eff625/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "4a401a8872d91afec168b2b7f518bac7f9b7fa36b2fd2860b4233b0fea274c60/1", "0021a1fe2711493813d9f0553ce3acb477edec97e37eb542a2ad14e406f8039f/2", "dcf7e948a20b5bd8ef26ac0e0dac9ec34900322aedc8812808d26c867bbc2a72/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "c7b1bbafce48bfc4b4538d9b5438c94f2041bca61a44cdb6ce38f3cce9221f96/1", "1065a20e7d1686eecd7322e335d8f17b505480ee73fabe017a177590f50863c3/2", "7384f4ad73b8f6af28bb9a330d1e4ef4cb57765225cb873b88b8f969dccb17d0/1", "1065a20e7d1686eecd7322e335d8f17b505480ee73fabe017a177590f50863c3/2", "09e38e154a19b2a790bfb8e797e370e9e43ce79eefaed178cea73ac7e36c97b6/1", "eea8254c7500ba3de996aa8ad6af399183f04e17d4a8102fde539dbc93a90012/2", "2ee5f2e307538e9a1939441dc271f845465c0857f41100dd84b031225fd0ed42/1", "c730812f002668e7c68d8c0a2f2c4d96f430b9364ec4928329ddd2f25e0f1534/2", "33f742f25e52ff51f230bda98905cdc4dd55746a54e67f234d3937bed322657b/1", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/2", "02aa8337c6fffe68fd1ba20ae6529594589f27a7ea1c8244fd7273a7188ddb21/1", "e6c21e8d260fe71882debdb339d2402a2ca7648529bc2303f48649bce0380017/2"] }], "Dynamic Programming": [{ "id": 1633, "name": "Dice Combinations", "solves": 16770, "attempts": 17866, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to count the number of ways to construct sum n by throwing a dice one or more times. Each throw produces an outcome between 1 and 6. For example, if n = 3, there are 4 ways:\n\n- 1 + 1 + 1\n- 1 + 2\n- 2 + 1\n- 3", "Input": "The only input line has an integer n.", "Output": "Print the number of ways modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n ≤ 10⁶", "Example": "Input:\n3\nOutput:\n4" } }, "cases": ["4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/1", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/2", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/1", "e6c21e8d260fe71882debdb339d2402a2ca7648529bc2303f48649bce0380017/2", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/1", "2115cdb6bfcfb008eb2bab2bb79347cb064a48e4e7c4115ccbe4469c787bb6c4/2", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/1", "eecd262c3ecab667b61ebb70835f3b181a1d1530d3ebc0ef99a3a8dc3d5b193f/2", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/1", "a5e45837a2959db847f7e67a915d0ecaddd47f943af2af5fa6453be497faabca/2", "2e6d31a5983a91251bfae5aefa1c0a19d8ba3cf601d0e8a706b4cfa9661a6b8a/1", "3216895b97263f4671c3b43421f41729557561eba5800a04565ed4d1bd1ca1e0/2", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/1", "31c656391e5af170a3185bd2d2fa6275de21d80d0351fb5ca479f9be4197868c/2", "7ea9844ae84eccbf55e8330640865e36c43521e45a1baec24233327aab7e6595/1", "bf5ff2036eba4415155eec85f048e4a81749d2d140939cceb7db257e7e116051/2", "83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9/1", "cda92ac22bb2bd5e7377f203a07eb041f069424c5391cb4873c8db8bf6c82f29/2", "e150a1ec81e8e93e1eae2c3a77e66ec6dbd6a3b460f89c1d08aecf422ee401a0/1", "41ce6a24ef7151a90c347ccd79a0810f9fe76fd2b5af4eda214502e9bc15e707/2", "950333fb6214114434d581d9036ebe91cefe0cbef1eec0784e925caf4c6f591d/1", "6583bf05d9a3549ce072f01f4ade93f25e7f4a362eea016026dfbddcc143d1d9/2", "2c69ffaa2ccdba358f9000d08b1c0a0c4b09054a78ecbbeb8d39959732a39e39/1", "34c20f4c7d75130680988604e837a1747c3d728503d59498949890adad0346b6/2", "14d01c6abd3f99f28e729fc9d1b8a0e5a76d4db6e708c591ff534f605e8d2d92/1", "94060bd9538b9fc17a1f3bb892662fd247986aa49812a53b8f0215060fde5036/2", "085c348f64a3b543e973a33749e90ba20847b99016a87e5228847597d61ce582/1", "8925ee3a513c0a125e87d945bfdf015b28d06e00415f3356bd69a9f311592a10/2", "d6a1a767319c3bf2a337b16e3a14916f63e432872e0f8df1cb73b32a8b338ae4/1", "8210b1959d7f4dc4eea0202b6ddb4ed0f3d60ad8d39b97611fa6f311eb653150/2", "e6f943e38e4b9b9b96f50cef63cf12c0933f03f2b7053a9c36b6721dd143b4a3/1", "9e120aae9a5b28daf932e0cc8adb43f3d495f32fd69110a577d663c6f9c6b8af/2", "673650f936cb3b0a2f93ce09d81be10748b1b203c19e8176b4eefc1964a0cf3a/1", "2c53299df327def4f76e9f3c9bca78b2526714feca0ee41ed94c1ebfc77957de/2"] }, { "id": 1634, "name": "Minimizing Coins", "solves": 14642, "attempts": 15635, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Consider a money system consisting of n coins. Each coin has a positive integer value. Your task is to produce a sum of money x using the available coins in such a way that the number of coins is minimal. For example, if the coins are {1, 5, 7} and the desired sum is 11, an optimal solution is 5 + 5 + 1 which requires 3 coins.", "Input": "The first input line has two integers n and x: the number of coins and the desired sum of money. The second line has n distinct integers c₁, c₂, …, c_(n): the value of each coin.", "Output": "Print one integer: the minimum number of coins. If it is not possible to produce the desired sum, print  − 1.", "Constraints": "- 1 ≤ n ≤ 100\n- 1 ≤ x ≤ 10⁶\n- 1 ≤ c_(i) ≤ 10⁶", "Example": "Input:\n3 11\n1 5 7\nOutput:\n3" } }, "cases": ["e10af96334f37d83e52216771db7343778fe8e8c49802a319595df3734903c32/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "59134ed0d0882c8d79c6e9774b67e40993119d31ea3822c086806d885f48ec6a/1", "085c348f64a3b543e973a33749e90ba20847b99016a87e5228847597d61ce582/2", "f939d06871d7133866b6675420aed5b917a09315b213de189dbaf98fad95984d/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "f626374d8871db92397bf3a3513b59436500cc7618504852e424d64183fa642a/1", "876e13f4e07bb39705302c01f445ffd2d2c3b180a207e4d959d6b671c67da09b/2", "344bdfc8f0a50e3c93e91361023bcd768132eb7f0a2e9f06bae876008289fd7a/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "604479ca1e4919a5581052b17e12ea0c7fef1c2eb6ffc0303e803183d93549eb/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "868b06bf9ee73e89f3e3d849d71c51b75c1389caedf19dc1e6e7034cf987ebe9/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "0021e9ef770e51f971e386b9aeaa7b143316d5668aef2e3d606db377a384f3f7/1", "8d2510d85c94c519a91dbab464e232a824442bc7f6ef8901d8b5534825373878/2", "c2895f57b160a0853c6f8eba3c1de410fcba40987870b715b0d43151819bc5ff/1", "ca2ebdf97d7469496b1f4b78958f9dc8447efdcb623953fee7b6996b762f6fff/2", "e66e05983e7ba9ee75b74c5b882bba056b5b1b887ab93c6f3967d4d88c4c842d/1", "085c348f64a3b543e973a33749e90ba20847b99016a87e5228847597d61ce582/2", "a2e601db1d74a4bfe9b35ae46ce1ff1189d6c44143da659b551094a7318ee677/1", "eea5daac8b1d1b7b82edaaa7fadadf6b48a439a874efd036fb0666e68c17462e/2", "b46eb581faef829861d6256d9f6b4bf536a21ebfad38090fa7f5160cffc9f629/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "17b54659ec5a656d0509b8b9788e9bf2b56cc60d151bab3fd27f36204dd3f3f0/1", "876e13f4e07bb39705302c01f445ffd2d2c3b180a207e4d959d6b671c67da09b/2", "80b12e6b3c55f63b5d05d820a681ebc280f4c3643c7e8ae40d5904fa2a87278f/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2"] }, { "id": 1635, "name": "Coin Combinations I", "solves": 13615, "attempts": 14712, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Consider a money system consisting of n coins. Each coin has a positive integer value. Your task is to calculate the number of distinct ways you can produce a money sum x using the available coins. For example, if the coins are {2, 3, 5} and the desired sum is 9, there are 8 ways:\n\n- 2 + 2 + 5\n- 2 + 5 + 2\n- 5 + 2 + 2\n- 3 + 3 + 3\n- 2 + 2 + 2 + 3\n- 2 + 2 + 3 + 2\n- 2 + 3 + 2 + 2\n- 3 + 2 + 2 + 2", "Input": "The first input line has two integers n and x: the number of coins and the desired sum of money. The second line has n distinct integers c₁, c₂, …, c_(n): the value of each coin.", "Output": "Print one integer: the number of ways modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n ≤ 100\n- 1 ≤ x ≤ 10⁶\n- 1 ≤ c_(i) ≤ 10⁶", "Example": "Input:\n3 9\n2 3 5\nOutput:\n8" } }, "cases": ["e10af96334f37d83e52216771db7343778fe8e8c49802a319595df3734903c32/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "59134ed0d0882c8d79c6e9774b67e40993119d31ea3822c086806d885f48ec6a/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "f939d06871d7133866b6675420aed5b917a09315b213de189dbaf98fad95984d/1", "81afbd0eda68593a58c755fdb2a0306397292674707aeefaf10b0a5696cff0f1/2", "f626374d8871db92397bf3a3513b59436500cc7618504852e424d64183fa642a/1", "0f3a9eef781fbf6b32a97b4639f5653b1e591e568c22795f72c14aa1bf3f79c5/2", "344bdfc8f0a50e3c93e91361023bcd768132eb7f0a2e9f06bae876008289fd7a/1", "d30e1b3e3c81b72d09addcc745d67c3783825ea721ab6a8a9b03866e96ddfadd/2", "604479ca1e4919a5581052b17e12ea0c7fef1c2eb6ffc0303e803183d93549eb/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "868b06bf9ee73e89f3e3d849d71c51b75c1389caedf19dc1e6e7034cf987ebe9/1", "da10852226ce6ed1cb745f99de92bfdcd558145ae8528d24b721e680ce99ab93/2", "0021e9ef770e51f971e386b9aeaa7b143316d5668aef2e3d606db377a384f3f7/1", "868ef0bfd97db438d51028d2c959210f484ac9d8030e8fed22fc96e608a86e85/2", "76c0c89336938802ebdf72b1de43b5acdc9e02c3104dd42b4b1a31ebaa76dd9e/1", "25d4f2a86deb5e2574bb3210b67bb24fcc4afb19f93a7b65a057daa874a9d18e/2", "7ad9e01ae90ba3d198d736e438708625648447e6f4bbe41569bbaca2254738b7/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "033021cb3b5937863163213de4469186bd76a43bbb0df6c20bb9eacc04ed0cfd/1", "fc9735836525e02ff3a58da49102b43b6196d8a642a1bae820706dc3d3e704c5/2", "0830f4d8e3924c2b0bd39619adfe93981778ceedeb07aa8f088d0a3811e0e864/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2"] }, { "id": 1636, "name": "Coin Combinations II", "solves": 11447, "attempts": 13030, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Consider a money system consisting of n coins. Each coin has a positive integer value. Your task is to calculate the number of distinct ordered ways you can produce a money sum x using the available coins. For example, if the coins are {2, 3, 5} and the desired sum is 9, there are 3 ways:\n\n- 2 + 2 + 5\n- 3 + 3 + 3\n- 2 + 2 + 2 + 3", "Input": "The first input line has two integers n and x: the number of coins and the desired sum of money. The second line has n distinct integers c₁, c₂, …, c_(n): the value of each coin.", "Output": "Print one integer: the number of ways modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n ≤ 100\n- 1 ≤ x ≤ 10⁶\n- 1 ≤ c_(i) ≤ 10⁶", "Example": "Input:\n3 9\n2 3 5\nOutput:\n3" } }, "cases": ["e10af96334f37d83e52216771db7343778fe8e8c49802a319595df3734903c32/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "59134ed0d0882c8d79c6e9774b67e40993119d31ea3822c086806d885f48ec6a/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "f939d06871d7133866b6675420aed5b917a09315b213de189dbaf98fad95984d/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "f626374d8871db92397bf3a3513b59436500cc7618504852e424d64183fa642a/1", "244f862919c0a3931c6d71e72aabf2ea94a715572bab442cc340e32960369732/2", "344bdfc8f0a50e3c93e91361023bcd768132eb7f0a2e9f06bae876008289fd7a/1", "0423031ff2c6c46ed12dd84d01ef1544af099c3941f9ccb101bab75efb70e862/2", "604479ca1e4919a5581052b17e12ea0c7fef1c2eb6ffc0303e803183d93549eb/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "868b06bf9ee73e89f3e3d849d71c51b75c1389caedf19dc1e6e7034cf987ebe9/1", "cb6ce5c0119286edb281ac2fb75d31fe5b7b534f2f83b4e2b19fcdfc9b373365/2", "0021e9ef770e51f971e386b9aeaa7b143316d5668aef2e3d606db377a384f3f7/1", "82f76ee423705fa730d5356648c1950598a71fa0ee69377087777615c0d350de/2", "d909b88f7c8c937e81baa370ced0cc726666ce9de0686e7edb97ec72c2aaa7ca/1", "b31b43f591c7dc62ace02ed34410d02351edb71f241bce80a807af00bba0fc1a/2", "d3bc9be453d800e8c7ff25e8d7f3a81f217b272e3f8e627a86ac9ebb873a92ab/1", "88cba64ae65a53533b1fa2a77fc4145fe7e61b3e3c6a005b8870162e0097ba15/2", "17b54659ec5a656d0509b8b9788e9bf2b56cc60d151bab3fd27f36204dd3f3f0/1", "244f862919c0a3931c6d71e72aabf2ea94a715572bab442cc340e32960369732/2", "17b54659ec5a656d0509b8b9788e9bf2b56cc60d151bab3fd27f36204dd3f3f0/1", "244f862919c0a3931c6d71e72aabf2ea94a715572bab442cc340e32960369732/2", "ee0731328a0e34e62c3d246ccaa519bfd9df78097440c2979643faf385d31b39/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2"] }, { "id": 1637, "name": "Removing Digits", "solves": 12754, "attempts": 12994, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given an integer n. On each step, you may subtract one of the digits from the number. How many steps are required to make the number equal to 0?", "Input": "The only input line has an integer n.", "Output": "Print one integer: the minimum number of steps.", "Constraints": "- 1 ≤ n ≤ 10⁶", "Example": "Input:\n27\nOutput:\n5\nExplanation: An optimal solution is 27 → 20 → 18 → 10 → 9 → 0." } }, "cases": ["7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "54183f4323f377b737433a1e98229ead0fdc686f93bab057ecb612daa94002b5/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "90d7ec0f0acef104d8b6252794295f661a0149634868d02a1ae0c358099638f5/1", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/2", "87574c1abffa14d93d932b1f75f4360b83c6d1ccf3e514c6ca4de4081a9fbd31/1", "3840bc236ee03aacbb1ef7d5108ddfa347c59f10b68d4174affbb53140f31273/2", "060e1cfe50a45a3b6f62df5fb7e21795e41a63c2339ae4bafbf93884c7605e40/1", "221c480639ab25d97b487b56214ee18b3046062bc797ca1d2a420ddf9b203cf2/2", "1d80e39fd6bd0da095d75b9ae8c248a6dd0b059290ce258c1c5f89d2638639a2/1", "2dc2959566661a65036621053f2fabc7fd4a542397b8902b0937b9233a242c43/2", "5e0daffefdbebd59aeea1a3f505b7b8885a4b492bdf1a40ad4cb042c679b023f/1", "7f97eeb21b4dda6cdb8eba6482020c3eb90630757a71f6d3d5181560334c1a8c/2", "dbf0d0e39a51a7dbe5738bbd54b6065369d3f204d81208a6cdf8e083097e3f98/1", "7a3a19070a78195b58d5b7d0c16c51ab0d88f0d2ec301e5cc49b21efbdb52033/2", "10c547e3484bc32e80684fcc78ef4bf00c7998fda58b5977d7d736041fed13fd/1", "dcc7cbac92739d8f8815d130fd011df716ccf083445a2e6b163a24d2c9893093/2", "490e5a95df4dc9479908e48b77268d944689c03609bb9937a8eb39415ac035e1/1", "77bcc122f3cbd04c04afd0a72d999a7bc2b64f6b65cf468acd3863382bfdd48e/2", "d9a324375878d47660e4cb455ce4beb59afbbff0b60f3c6377cbab023ec35f57/1", "1aa3243df00647377ede013332f3db0d0730a8b6221f84bdeb25f2fef0ce1076/2", "14d01c6abd3f99f28e729fc9d1b8a0e5a76d4db6e708c591ff534f605e8d2d92/1", "1aa3243df00647377ede013332f3db0d0730a8b6221f84bdeb25f2fef0ce1076/2", "add34cc3516f882cc427bfc2ce0bd905ef3158eca6b4f821e670f1bbe8387a13/1", "a8b651eed2026dac1c5d9fde6ef7e952528e7c7e3ca87374fb84347005bb8f6e/2"] }, { "id": 1638, "name": "Grid Paths", "solves": 11792, "attempts": 12196, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Consider an n × n grid whose squares may have traps. It is not allowed to move to a square with a trap. Your task is to calculate the number of paths from the upper-left square to the lower-right square. You can only move right or down.", "Input": "The first input line has an integer n: the size of the grid. After this, there are n lines that describe the grid. Each line has n characters:\n.\ndenotes an empty cell, and\n*\ndenotes a trap.", "Output": "Print the number of paths modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n ≤ 1000", "Example": "Input:\n4\n....\n.*..\n...*\n*...\nOutput:\n3" } }, "cases": ["3480750e2db22772fcd6f45160a3c5f5c7fb43d67210ad257de9020bf2c6b251/1", "18acd9ce2b16734aa9692dc15e6ed975ec2b729eda12997e2cc808a25c2bef21/2", "243d6f5e90e7a137d770d098c4c3fc05215c9236f5b4977a15429a8fb79981b0/1", "07b9e0caa09897736e91a8ece9e732052f2e72d6aae754276f829a933c0a9ce6/2", "3f6c5a8a60723903314eaa0eed1f1ffa71bdc9ac2d35624fec9270b49822889e/1", "e65305e9101efdba6f7e202287d754cf3fbb4c904a63a9d7af7b6215ef2cc10e/2", "6180753910ec1bb556ba009d61bcfe013359312631e5429b4fa547e0d94e0be6/1", "b2480240d51e91c25953f5be13863bf6eff88786b5d8cbac416adfae669c9027/2", "1599b15328aa8563a4e986fe038bacf296af313826ba59e3a5e33079aaba6bb4/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "7619cef73b087d05de1c02fa072f2c41d31c9c2ac90cf89d29259a90f7033fa5/1", "f0815d7ee47f882f3eb895eae73c22d819b199a44a7486d4851d5d1142478863/2", "f120248eb4cde1eab1c9a0b6b52221e4ae75420dacda0430a491c0600b31c9ce/1", "5fbfb9a95c03ed94e2b50366ea734331b3801f1f14ceb2904776bc825d8bf43c/2", "54bebcdff8aab0a52e79bd61f2240578f75058aa464dc36fadfe39ba0c5f56ba/1", "005b970241aacf18e44725ae33ab66c1d380db102e5cf243ec839b048178d50d/2", "6eceb1aebebed8d22ea06f02b1319e183829c8ab2affc9a7254a564a683c6b21/1", "156f27ff0a8273e283656c124dfed01842e14087cda82fca818a0b587b366de4/2", "43f9c4571cf54317cc508d9b5e54931a3c53b8cae5711b484e5abe76aedcd1e6/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "1360e2fb261c5979fe3a0b309b257344749bfcc6be68546bac04964d2c41e97f/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "eea9c84bdc1c02eaffc6dd43007ad472a555ae7208936e1234451dcb0b5c5b50/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "c06c0e22a42fe487897a312823a993ea48d5d332b9234e7e6ce1cc403a1d3a93/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "2582550ef05ddbd53bf5b132cc8404e14cd590e20fbfcce6cb6b335b0e7112c8/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2"] }, { "id": 1158, "name": "Book Shop", "solves": 10662, "attempts": 11760, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are in a book shop which sells n different books. You know the price and number of pages of each book. You have decided that the total price of your purchases will be at most x. What is the maximum number of pages you can buy? You can buy each book at most once.", "Input": "The first input line contains two integers n and x: the number of books and the maximum total price. The next line contains n integers h₁, h₂, …, h_(n): the price of each book. The last line contains n integers s₁, s₂, …, s_(n): the number of pages of each book.", "Output": "Print one integer: the maximum number of pages.", "Constraints": "- 1 ≤ n ≤ 1000\n- 1 ≤ x ≤ 10⁵\n- 1 ≤ h_(i), s_(i) ≤ 1000", "Example": "Input:\n4 10\n4 8 5 3\n5 12 8 1\nOutput:\n13\nExplanation: You can buy books 1 and 3. Their price is 4 + 5 = 9 and the number of pages is 5 + 8 = 13." } }, "cases": ["88522bd43a86491eb12d66097894de851b495ab25c49af5832645ac60261d75b/1", "6e2ae11dad0616f66bbb2b6e6556f580bb987fd911d7132aa6bee2bfc7cc7b52/2", "867b3fb1671b320a8ffa31e1e843973d929adc3cd45eda764ffa0f0c0b4945c5/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "ac373d773185da8d91282c9abec5b555fb4954ffc2d0a17ad7407ac4e0b76ea5/1", "5a0e95da83fa399e0fccb4e16bedf4549b0dff2c4e760752c1985a84c4610541/2", "54c56c5b9ea9aa288737efb394bc40668ca90ecd34a51106ca7e0c092aa7b684/1", "83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9/2", "38d806c38471445b6826fd4dfa1a17d26e4de5dc3f9d1a2be07af02c4ea4efea/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "75a070befb08a0d66a7fd39c7e50218ab51f7f7ab6a2e0afce0b115dfe963f6a/1", "4569d9f7f26c5a14a84d631a28248e3872e3ab56f67765f38ed098ed75e35f1a/2", "bfed3b540efe79cd7a165ec6959f70924c8b0ccb8dbac68fd256149caf344e66/1", "75cd60ee9e72b950c1a0485ff85b8774b0a4a2dc3e1cd95bfb1f151e40b8906e/2", "7c4d473eacc5a30bb5f1af3fbb41cb4775e8953fe30ed0b6dcc0b006080ea697/1", "edca2b873ec44f58621670dc5ed18b0a2c930425229eecf4dfc1ee1909f8a592/2", "40920c960f43a4bf0121edc252a3ac5bd15fae089fd44fc5f3fecf75c2386d29/1", "9875d005a2d6692cfb39d05fe4bcca4f204642286db96841c59b7371258ef0e4/2", "3318ef2f67cd34ceefbcf36257bd7f73e1028b805f7357655d4eb3cdeb4bdcea/1", "9f933131de0bda2f8cac91f0a40c316b330cde31f7e2d2975e499380aa668fa3/2", "5406364d5397a20e56bb501169d2357a3c8cdaee3d3d51654fa0445652b04593/1", "27f8d822ea64f5bdb9564c533195e35d21689b84bf074d83bb2d7a866b5276d4/2", "cf79005d3d3f8ad2942f3edc80d7dd90e358e01d7a96525d484898a6430251a3/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "f0988313a04f575cec5d5b5c903da980ddf406950c186c9613841da534bae070/1", "4569d9f7f26c5a14a84d631a28248e3872e3ab56f67765f38ed098ed75e35f1a/2", "1513e3d098e7b1d3c815763313c4f5d480cd6b1a587acace905f519cb9666f65/1", "1a252402972f6057fa53cc172b52b9ffca698e18311facd0f3b06ecaaef79e17/2"] }, { "id": 1746, "name": "Array Description", "solves": 7436, "attempts": 8376, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You know that an array has n integers between 1 and m, and the absolute difference between two adjacent values is at most 1. Given a description of the array where some values may be unknown, your task is to count the number of arrays that match the description.", "Input": "The first input line has two integers n and m: the array size and the upper bound for each value. The next line has n integers x₁, x₂, …, x_(n): the contents of the array. Value 0 denotes an unknown value.", "Output": "Print one integer: the number of arrays modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 1 ≤ m ≤ 100\n- 0 ≤ x_(i) ≤ m", "Example": "Input:\n3 5\n2 0 2\nOutput:\n3\nExplanation: The arrays [2,1,2], [2,2,2] and [2,3,2] match the description." } }, "cases": ["781c951bda61e6c9574b5d2aa0868246be004048d2b20bc7995d7dc5491485b5/1", "db9fd7bf3f74b55edde5af762dacbb47e90b5ba8994289e648395caec9241ed7/2", "075fc21fc80e3ccd7492f5d63bae858854e21c526806485dcab4b14351487565/1", "33b9400a6e33f309e0b59129329ce057e1f9342c72cc7c83de52c38a8b22446d/2", "611fe47535367e678a6f06a13ac130d1f18537a70e542a499f0bb06b9c2c5e4d/1", "66c342932aa7c18f7bf1fa212aa011069fc2e50e0c7e9e4c73fcaa6851854c47/2", "4af3c2effda587119598b5e32962142081d96793b1822811d261f93c366b6cba/1", "e1869ff48edf4f4eb56c13206ae6c4e032f7d19e4dffbbbc3484612e00f81afb/2", "7947d747a416a5c7a5757a0c8a3e86af4945fa47e3a643230e380e2e84d11fbf/1", "6fa15c991b10631c54dd03d13dbd458367201945850c2ca59fcb280afbb3d2d3/2", "b89aa54bda7e2485ccf54784f81f474062da5a0c6963223488278c3b100eac16/1", "5704298453fd3fda4a9f8d7ca775dea25b4d3148b48eb6441f5f334d7298f75f/2", "d2c7ae55e341d4930b452f578d7bcdf88463ed44611b07772209a58c7c767436/1", "1371bd62ebded14bec27609d413d456684a2dcf1161d0d53b63ba2341740bd00/2", "3114830d254b647c7cf117156b2daac96ebafcf03ed0c29f83966e0cbb80307f/1", "b66b0fc0f09c467e2d16124115d60dcf91031bbdaeebf5f9027f957f6dd73f74/2", "3099274096ba93389a86149bed215173c232b89924fed175fd667f118322ed08/1", "4643ad3a37bf23683a45ce0e180bd2d8978e90eea91afc535a6c1c363a743329/2", "f3c082f1a538e8c0a3e63fcb37f9df979c85e73f5406374ef11906cdc8c59949/1", "e02b8d4bd6114a9446936f2d92bbba48b579c122cfe990413a12c09d7d87ad5e/2", "aef03d231838ccb932c8cb7dea7b558a9d61559274ee32b44bfdf808a2226f46/1", "ef9666b5feb156b379da6221c914f57e477035ed4667343c9b6a2385f98456bc/2", "f6ff4cd43510eb9168028115cecf418136cf779291b1608977cdc348c73cabe4/1", "224e53e19a774f343907e121e0c2d1e5074fffafcbdf12d0c238dea027788f00/2", "7840765d24b4794f7fbd3db657dd7ba517a6290db2926db0508da8a8ee13cdf8/1", "1b4301d152eb4e21fe1f08026a6b68f556992b27b4b997f1c43344c16c4d3289/2", "b5f640ee204320a0acc8278df793e8390286c6b9e51af6b3460619a0c88240ae/1", "ce415f6360085c45c59cd6b6a2737127aa960d1de4142ec85f2cf03a3a13aee6/2", "a3bca093fe1f266f1a90c8236211b9189814d231a43cfff6d7ee3b8d99a9ce90/1", "f59059e7abc60f91c79edd3ece619a9ba3fabb2029dc09e3547dfe73b3325f40/2", "8a8c0140719b6042b3759ab14381abbbbbd1f083c1f9d4489b7d8d6255ba17c5/1", "2e71cd5e578b336de3124ff3e09d946623d00bf251a07925dc54be5780efb843/2", "49c6a0906ac326d4f388297e6384d2266c93dbf67c4fd3d872e31c311b76006d/1", "6c5b3901840276665cae265ed7c0fb13493cdb30ed940920024398639496f5de/2", "c12338efc749c06bfe583716d85952627327d59eaec80fd92da971dd581a8556/1", "41f4c90a522f69ac3dfc9d9dcc09074790f912819b08c3f4354336ccabd24726/2", "167fce9d370c41359e06096a91932f77ab86e326fc2793f02b9bccde2d06b490/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "91549e9c781658615c212f94074eaa61027aa76731815940dff25df67655d5af/1", "20d2add851bf39edcc6b5e830930f962db7e19dffa2cab8610eed551eda6c302/2", "e1cb2dd0451320c3bf06dec7388b621b53b3781839aa08a2c40b8f488e60b317/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "1c0f97434fe53c4fe94129b7970edca9164a329860e86bdbac609716ea4729ad/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "3e6ad0f9bc70a4b3c5007c56a9f18addab9dc3c3ade7d1d170bdb18ce05b1fa6/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "518292f43973f28c4552209cc4f64bea3188e5d60287b680360b3232fff045a5/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "75e0b48db4af64081a7cc6744d3d061e2c3662b16e17cb5dabed098ddbdbb62e/1", "eea8254c7500ba3de996aa8ad6af399183f04e17d4a8102fde539dbc93a90012/2", "aa65d9632c3207b8202b3b0f55eed18c521bee9097ef208a3cc03d3d594ea523/1", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/2", "dbfd7c6f783b1e7690c9b1e4d0fb44b9a5afbbac5036ca45d711a004af48b475/1", "219a06da939762c2c1edf02b58ae8fe36943476cbf42c86d1800e96da3169f46/2"] }, { "id": 2413, "name": "Counting Towers", "solves": 2999, "attempts": 3202, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to build a tower whose width is 2 and height is n. You have an unlimited supply of blocks whose width and height are integers. For example, here are some possible solutions for n = 6: Given n, how many different towers can you build? Mirrored and rotated towers are counted separately if they look different.", "Input": "The first input line contains an integer t: the number of tests. After this, there are t lines, and each line contains an integer n: the height of the tower.", "Output": "For each test, print the number of towers modulo 10⁹ + 7.", "Constraints": "- 1 ≤ t ≤ 100\n- 1 ≤ n ≤ 10⁶", "Example": "Input:\n3\n2\n6\n1337\nOutput:\n8\n2864\n640403945" } }, "cases": ["b4791ee88c8a679a0c7a4d038f84a9543bc4a7995ecbfc6db562e74245579dc6/1", "9512ee1919ce84e053b26d7d36fe891f43d41de65d5a03555d3335cd108fdb1f/2", "3db8a2c06a16acef3f7f9a10d68c7f7b444f90fe303e0c495ff2c9246bdcf2e2/1", "80c4c659bb49b84fb98229353706ce15f4af5e0b647b8901d0ca8eb876d66ed3/2", "eb0d448dba291ae7577b4a69c32ec8fef5350cd3bb1a65c2acf522a266816e67/1", "a131d20c6d651b8b6c81289b906e921baa6927a3c5f5fe4a21ff7b771cf17b5f/2", "ffea5f55aa11ddea39c2b670e867f3ede42681402d490390ea365e8c60876c7a/1", "3bfde1900c0bfb2b906cc902cdea2b2cda1a01099821125c098f79453e635f52/2"] }, { "id": 1639, "name": "Edit Distance", "solves": 7920, "attempts": 8450, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "The edit distance between two strings is the minimum number of operations required to transform one string into the other. The allowed operations are:\n\n- Add one character to the string.\n- Remove one character from the string.\n- Replace one character in the string.\n\nFor example, the edit distance between LOVE and MOVIE is 2, because you can first replace L with M, and then add I. Your task is to calculate the edit distance between two strings.", "Input": "The first input line has a string that contains n characters between A–Z. The second input line has a string that contains m characters between A–Z.", "Output": "Print one integer: the edit distance between the strings.", "Constraints": "- 1 ≤ n, m ≤ 5000", "Example": "Input:\nLOVE\nMOVIE\nOutput:\n2" } }, "cases": ["c09e00e4dd5cb9e2fa26c9da5fbcd9d8a2a7a02792ec7205db880aa007cae66b/1", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/2", "18643b34b70deb4743f98f15ceacc270f056dac454471f82bf331b5e2eaecc24/1", "a9742eb8ee320e006666aef25ae9aeed948247f3125c9cafa7cf97b7e7467dd5/2", "e6b78b4de10f23837d75fca2eb2640f085fc408bf2d4b81cb427349bc8d1d2f4/1", "9a92adbc0cee38ef658c71ce1b1bf8c65668f166bfb213644c895ccb1ad07a25/2", "41d905d2d4d0bcb17329d3c5e33c7cc0112e348745aa9c6df3f0cc5e1ec452a4/1", "2e6d31a5983a91251bfae5aefa1c0a19d8ba3cf601d0e8a706b4cfa9661a6b8a/2", "7e6e3e2453103265e60dfd90eb368f19d568cd7b9be0cdec4dfb9cd34c614687/1", "1a252402972f6057fa53cc172b52b9ffca698e18311facd0f3b06ecaaef79e17/2", "51f1a642727cf4dde20cb782cd317719b98b15a55302f839c9c3af4892cc59c9/1", "62e705905ed87372ac0b6a354a5abd5d0edaab5b675e174ed9caa62ee73dcf4d/2", "85b1f54889188e22767f4d5cdc9083f6e48260818255fd986aae4aad138dfa0e/1", "5a4c3cb9d8f9752010a715d1c61d343a7ed3df425403006b259c6984d83ddcd2/2", "71bd06fe22aaaee23692875baf2ab75288bf717f956bc2e0bd5768fd30463003/1", "3013dd5977dbfc99271b5aa00666bb23ee02aefa404dfd18d636f79521d79937/2", "1d14dd8223daa41f0eabe1f22ffecf9d4e2140e01882a91c7625bf891acc77a0/1", "42757e8e0821550ecbfc2351c42705efbb08f80ddee17ee9712965b9cbe9075e/2", "e42c444993a9f12bf07938f57c4ce2a3b0f24008dbce2422f2986180280f515d/1", "2d99ff9c8b6f090be51092b0a1ea76c1870ef8cdd36589511d84afd08a521eff/2", "962a8f529f47ba4cd527497d4b850ebb9402becf781db39a4b0577f52302b211/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "daee1cd25194ae952d046ad9b9c81d3c07dc5332440b58d6d7461b248be56712/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "e071af81b16807a1e97090eb9066c11a0cd2d3396cecac065c83c927875569db/1", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/2", "4a344b1a8cda6cc50fc82cd15c150c7fd73c886b121f291df47683f5d904d041/1", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/2", "c05ce9357aba4973cb87203a09b7830cebca1649111ca5b179187d72db51f343/1", "1880a4e62eb46acc4153f0cd2a5331b303904318de4143b3c80b4a45ab9031c4/2"] }, { "id": 1744, "name": "Rectangle Cutting", "solves": 6772, "attempts": 7421, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given an a × b rectangle, your task is to cut it into squares. On each move you can select a rectangle and cut it into two rectangles in such a way that all side lengths remain integers. What is the minimum possible number of moves?", "Input": "The only input line has two integers a and b.", "Output": "Print one integer: the minimum number of moves.", "Constraints": "- 1 ≤ a, b ≤ 500", "Example": "Input:\n3 5\nOutput:\n3" } }, "cases": ["65390b0e24e35155e6f3ad149a8592eb1f5e7e0f5827c6894bd2564f728c0822/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "c74ca9fbdc8f2a3d035d2dabe6e476e33e61bb7741f94b8c4d947186c36d866f/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "aca8cbbe96ba89bf0fd068d4b4069213909923c48085dca9e63b124bc1544bcb/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "cbbc6c7ac2f08dfcd704b57e1e4c21bb9e942dfd217528c5558af4eabcbc7625/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "b4e957e0334779b159abb9d00b7a560197095163204852ec43dc2cacc130f372/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "7f4f246aece829c3194aa41b0cfcac3b384861367dd01896f964db3363ad6721/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "2b295762aa02f570c3be1e90b0cd8041d4bf1ae0eda2930be771abc530d1629a/1", "1a252402972f6057fa53cc172b52b9ffca698e18311facd0f3b06ecaaef79e17/2", "c30c8915f85dbd1f738932b581d73aa8a1c0094e27a46adc9881d792934882e8/1", "a1fb50e6c86fae1679ef3351296fd6713411a08cf8dd1790a4fd05fae8688164/2", "c86e0101386576d437781b9ee00de3d9241b3076421a91d9b8a7ad4f5abd3056/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "c3e8fcfbaa9a64d8d26fcfc09d94ceb644f9730202b0b472dc9dd84fc350f97c/1", "25d4f2a86deb5e2574bb3210b67bb24fcc4afb19f93a7b65a057daa874a9d18e/2", "6104de9fe01bbb5e51a261a47fc7416bda6c55d65e1ec3b062e169f39af1169a/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "0eb9494018d14614595175d943dc95b0df20c2fb58193eb45f171a146f8f70f0/1", "2e6d31a5983a91251bfae5aefa1c0a19d8ba3cf601d0e8a706b4cfa9661a6b8a/2", "d717fe942b89e1820db146659f372c033abd5f4fec1392d3370a1d205fca1568/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "d72c689419c8cc3c832599202c204afc24058b40b352d996567bb7c96aaa7920/1", "25d4f2a86deb5e2574bb3210b67bb24fcc4afb19f93a7b65a057daa874a9d18e/2", "5c318b41930b1ed5b6bb17d7811684c6e864ae42d69385e541028c10f82edae4/1", "1a252402972f6057fa53cc172b52b9ffca698e18311facd0f3b06ecaaef79e17/2", "bf091090dce2ab972a081f44fd939069fab2c29c6e41b39c55e860cc5e25cfd6/1", "25d4f2a86deb5e2574bb3210b67bb24fcc4afb19f93a7b65a057daa874a9d18e/2", "1dbd1747dcfdf6b29c66f70919957dce0557de66aaa281d4499f0701872997f6/1", "2e6d31a5983a91251bfae5aefa1c0a19d8ba3cf601d0e8a706b4cfa9661a6b8a/2", "a95c4a77f4d8edee7f29448e682c9979e6b5ad686ba95ffdfd6e0d317356d4b7/1", "9a92adbc0cee38ef658c71ce1b1bf8c65668f166bfb213644c895ccb1ad07a25/2", "c0b5047a1e62c7ccd28fd783e9890c286b14e2accb14fc656554e5fd1f5a1f51/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "ce31356820e98dd6ab0dd0096b468c46526a82556287e2b397969dc81e6b732d/1", "238903180cc104ec2c5d8b3f20c5bc61b389ec0a967df8cc208cdc7cd454174f/2", "df1374501ed50bdfc417f12f80221051efc4dd45fd49aab76592a1259959cffd/1", "238903180cc104ec2c5d8b3f20c5bc61b389ec0a967df8cc208cdc7cd454174f/2", "5bbcd64370cb3b6db25f06072a4fc99282233b5986a63740871cfe317f934bdb/1", "4ec48e2794d2e37223e0a3c11bd2937020e6274071fc5035f659de78608b61b8/2", "3f11ad6bbc7ecca0b2416b713dee77f1a635c00aaeaa946e14cde1c2bfae56d5/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "0452843ece05a280945d53f73a5b58cb85528f6d763a5d7864ec3a93bc3cf673/1", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/2", "6bdb58821438c868daa6cc442b50fc3850d88945f2d7d91adbd7bd47a7f50732/1", "25d4f2a86deb5e2574bb3210b67bb24fcc4afb19f93a7b65a057daa874a9d18e/2", "eae528b76c3f4b1ceeadecf7a68ff81e965bdab1d81c01e360dc6a9f5550f64b/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2"] }, { "id": 1745, "name": "Money Sums", "solves": 7860, "attempts": 8231, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You have n coins with certain values. Your task is to find all money sums you can create using these coins.", "Input": "The first input line has an integer n: the number of coins. The next line has n integers x₁, x₂, …, x_(n): the values of the coins.", "Output": "First print an integer k: the number of distinct money sums. After this, print all possible sums in increasing order.", "Constraints": "- 1 ≤ n ≤ 100\n- 1 ≤ x_(i) ≤ 1000", "Example": "Input:\n4\n4 2 5 2\nOutput:\n9\n2 4 5 6 7 8 9 11 13" } }, "cases": ["b3d27753d290a4ce2e844ac6e8c1a172df6c1426314089a1db2afb7ad2ceb68c/1", "408085562dd6967374cb1cfcf8860d843ce5804ca389aac8676615e8cb71064c/2", "206f58be59dfa08f2a6f76ff776e92ca759bb80e0c9e42ecca54492c5a014c18/1", "94a83b7a2286b98b6b92055791c3ed758b3ff32fd6cfe7c2e3b2f6917f8e2ab1/2", "5bbbfa328539a6ee01adfa7fb6c867a35addaf55fa79d1b8ccaa796cb916c388/1", "48e6c3232bd7e367e69cd0fe3cf2d0be73f49cac8fa860ebdc6d7b37b600e367/2", "3bccb911fe0a34ea9975cb14b260ce6c487bca5c889b84d5f7b005e4f55721bf/1", "54e6de53a2dad6e5024b398a5a5a4d5bff47ef20aa319043bcd71f9a6f325fee/2", "d63f534ae6b6e385de771b0e041aff2e728a7086fe256b09792e1dfa217b578d/1", "7cb3365c6e423d28eb9c9f3848a575282ec4484f5033965465cf49ba2fc4954a/2", "4ac35eb03a10ab1826765a09afe3606ab6a9497de3614d9e9d710ed0224925f1/1", "7394a85e568657e27bf8719b2a83fc7b59cf8116c27a6b009c0c413f08b02610/2", "3688c99a984cf4df0356517f033df4ad84959c7319a293817f2dc93345651e4c/1", "82273ec43348a0f475c142e6ebbb151193ce020cb745b1cd6c846b0d8d11b4dc/2", "f3f7924462a4023f5cd3956f91b1201965deff8223946ab4bc9be7b2bd9d2cd7/1", "c4b56bead967134934d7216217580094852af27009e7cd6cf9712fda31564a49/2", "0477b8d7a87ddb8faad939a68aa3e391d718d5624a29ce20df4016a1af46605d/1", "84fda3e0a48aa8f6106c0d99fe366d64ce3b81eef73698b4ef93246839c488fb/2", "b160ba03c1cdd4c2211405e7eee6a7d4a78a779c6f879d395cb36637367f4057/1", "a217c55d2294965dde92a2b3153f8fc3eb7fa597e487d68dca5dc23c35a938b2/2", "61c14d0031dd614bb9562c294d0434bf7c76e749a454381076b9bc380e585cfe/1", "92e6baeab2ee0864403fa76dcc53132534160daf26ccc58b5d9c31e990fc5e21/2", "ad0fadf63cc7cd779ce475e345bf4063565b63a3c2efef1eebc89790aaa6acba/1", "c9a1a5ca561d46dbf3efcde9f2dafe07ffef8471a543be5a607a2ed770a329be/2", "78c99d3d6b616088393953e727f38d29938349e56f54cf4eac736336373faa10/1", "15eab17e709526088c1ca3d69be2dc980e71e98788bc01d9e7eaccb43250a464/2"] }, { "id": 1097, "name": "Removal Game", "solves": 5718, "attempts": 6242, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There is a list of n numbers and two players who move alternately. On each move, a player removes either the first or last number from the list, and their score increases by that number. Both players try to maximize their scores. What is the maximum possible score for the first player when both players play optimally?", "Input": "The first input line contains an integer n: the size of the list. The next line has n integers x₁, x₂, …, x_(n): the contents of the list.", "Output": "Print the maximum possible score for the first player.", "Constraints": "- 1 ≤ n ≤ 5000\n-  − 10⁹ ≤ x_(i) ≤ 10⁹", "Example": "Input:\n4\n4 5 1 3\nOutput:\n8" } }, "cases": ["80a56c0c73b69a7d9d909d7d4a486640aabb4d69b0c1f92a0bead4c368eb7a0d/1", "e6c21e8d260fe71882debdb339d2402a2ca7648529bc2303f48649bce0380017/2", "3459fdfb3be25f8915a5d2b9cc586c46e06445c87a8c95716655295d6f34603c/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "0ce08b4b920eec0adf842df3ebf7a3f73b3907f5a1ab88a0bc5d601fd684564a/1", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/2", "da25f22cca578855a2e53b9f1fcd5c09042547cc6dba1a37267679052b63e6a9/1", "cfeb3721a817579ed0f8bf7235b8b586be2d1f6426e5f7e4c3d3d62a3015f8d7/2", "eb6f69ab555e6ad2b8b36edaae02be12232562aa59f35e2f71f5bc4d8f36b411/1", "1a252402972f6057fa53cc172b52b9ffca698e18311facd0f3b06ecaaef79e17/2", "0d89b8d695a21c88db4648a709385950d2dedf51ba28473c96bff695f4e5af07/1", "dd0a630c5ce0e0164c5f4d53333201b7dc23de4e1abf11dd8bc747a540b90c57/2", "9f118c399b99d3ccee71393f0be27ea9264ee713c770ac7ac6393e595488005c/1", "9ce9b97d63e67eca359c73dbd5ce15f618066ca54556e8088abfa85bd9eaddfb/2", "231c072fc7c85afe991fb805940dc3074bbc05a2f9b903f51475fc1cedc8b964/1", "25f15f152ff41df13fd16e89de19bbf93cfd481016cb635122d2cc7ad8a33884/2", "18dc1a45a755b0e06acda9c83ce04534c54f09ca87d50d3878c18edd923cc4b0/1", "53476956fcdd2f327c3d3f986694b6bd1ab701680c13723ede37138218d378aa/2", "5a1664501d6493bc39da0a3762ce84cae1e8a39cc317268e7b0b4d7c0b137cf6/1", "c70b835ce80ee32f43eb22d81cdb31810f8c72be4fbacb5058aefa669eb80539/2", "a5b309b371477ebe2b58d750e5aa1b8b3663175453bf3b67f4b57510db64c005/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2"] }, { "id": 1093, "name": "Two Sets II", "solves": 6387, "attempts": 6948, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to count the number of ways numbers 1, 2, …, n can be divided into two sets of equal sum. For example, if n = 7, there are four solutions:\n\n- {1, 3, 4, 6} and {2, 5, 7}\n- {1, 2, 5, 6} and {3, 4, 7}\n- {1, 2, 4, 7} and {3, 5, 6}\n- {1, 6, 7} and {2, 3, 4, 5}", "Input": "The only input line contains an integer n.", "Output": "Print the answer modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n ≤ 500", "Example": "Input:\n7\nOutput:\n4" } }, "cases": ["4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/1", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/2", "2e6d31a5983a91251bfae5aefa1c0a19d8ba3cf601d0e8a706b4cfa9661a6b8a/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "bcea5d7d8b256f1bda5f90a3ede41899e94b89fccb4e4d2786073b5bfaa0002a/1", "a4f74150a342aec06746adb74429b214180139dcd6105962c46f09ab963392aa/2", "f7dbab4769334b25f2b4c0606fef276da29bc7477cc15f51f0967a6e477e7c94/1", "71066251655d2977649f2da9c4e09e675138c41b980043d07825c34e72933044/2", "e15cb49f231c64265cbcf05790aa5291ab7ee9f2efc092fbcafea2d58e5f83a8/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "703d2c10fa601276a4dd96193faed68902a642a44eb5b01b40d6fc8499e12822/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "5c862790153d23a72dd410bb8b36819d51ac248cbaec4f6742efd8e75f20b175/1", "88d65a97104ee3d3c3bac4c176e0d2edbba97d22b57d95508fdf8d456bbdba69/2", "8f8eea956d0ea50d6442fdab213326f75bb6f584268b0795ad452faa85db5f9d/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "13a57a1832cfa5c92e7f46e6832f88c96d0fef54383f12574cb1dbff17e7cb50/1", "5738fe4bd73c47a0e36399bbe463f2c06b24133cccefe9fddab3f76934eed45d/2", "63d38dfd2364f474e8b5238ee75b225569b8bc2cc80938696ed7eb41cbb93c4e/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "9a1f8059e8bea1d6bb8868d0fd8ba25953a5ee111633c56cf96b3b995bf05f8a/1", "74728b58a402e5bf780d5c6317a80689b70b92d744c2299822714de52ea22df5/2", "bb4be6de6854f575525fafc394479ae42f5dc81d3c474433f7c25b1a033bfaf2/1", "c038ab18d29c10874a12f7c5103966f808505fd48e6aed3305d20d74c0d0c5ab/2", "792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49/1", "6c382537cdc87edc47323950c5e67e227cff428318b9b33a257f20d0c1e0e17d/2", "b35e87b5838011a3637be660e4238af9a55e4edc74404c990f7a558e7f416658/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "66c342932aa7c18f7bf1fa212aa011069fc2e50e0c7e9e4c73fcaa6851854c47/1", "1adb6137ad47f7969688c95917794d42305b53ac24db6b22bba397ebfb63a1c1/2", "4ec48e2794d2e37223e0a3c11bd2937020e6274071fc5035f659de78608b61b8/1", "4c6f56b4c25f93af46a75fca55a940f3f10e9e66340bbee9d4367c62f3d6fe5b/2", "792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49/1", "6c382537cdc87edc47323950c5e67e227cff428318b9b33a257f20d0c1e0e17d/2", "792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49/1", "6c382537cdc87edc47323950c5e67e227cff428318b9b33a257f20d0c1e0e17d/2"] }, { "id": 1145, "name": "Increasing Subsequence", "solves": 6455, "attempts": 7420, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given an array containing n integers. Your task is to determine the longest increasing subsequence in the array, i.e., the longest subsequence where every element is larger than the previous one. A subsequence is a sequence that can be derived from the array by deleting some elements without changing the order of the remaining elements.", "Input": "The first line contains an integer n: the size of the array. After this there are n integers x₁, x₂, …, x_(n): the contents of the array.", "Output": "Print the length of the longest increasing subsequence.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ x_(i) ≤ 10⁹", "Example": "Input:\n8\n7 3 5 3 6 2 9 8\nOutput:\n4" } }, "cases": ["b3d27753d290a4ce2e844ac6e8c1a172df6c1426314089a1db2afb7ad2ceb68c/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "df297b5fc75833f4540c3e8a1d48bf3d1cbe39720952b6867470e2d313f62002/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "8a3fbf51431064373de4648222c041f83407271ba9b9bc5e8bffa1e44070f105/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "5b1f6a1e3cf29f886ff5f7e01e218e1107563e5cf4f7077c184aef8d34b0ee0a/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "c3d2e9743fda1de87617a74144cb5fe35839eacb344027ea6bbcd80b730b1ea1/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "19d069a1577bf0ca04ba13c31dabeb8de05f9e8d9fdc6548ed48df252403f3ca/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "0be5594fa61710760bd37b2df0a27dfcafac84e8d0e0f9184a205ed44ece3146/1", "d43574be921c54215a1e05bb2fc0c1a4b63dd2aea4bbfd5b9ebc11a2685943e2/2", "98acc55246bb1e4c7a1327c0698607a0cd5d380a527c354433911a7615b3b4b8/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "414ae5fcfe4858908286cf252ede2bff5beeb0e92f580e0c8dd6420f5db50595/1", "aa19beeb929794500be4910d790847b2f9cfd6c80e8614491d90478a4fbc1e61/2", "2189c166185d6b380576a5e300c72f075a2ec2f54e8283b5f0dd31edc1e96d8b/1", "7967da211f5678b263bde0310fd5e90b19d621b353fa8ab9ee8467193a712758/2", "b52de0b2857b552723f3afaaff23da958873b16cefe2fcc691c9f445411154a9/1", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/2", "4d0fca6bdf8ff10664c5856e7d1bb554c2b1e8b2eb3ebe2c45145da9376fe5d4/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "c2350a1c203332bfb59c276e7ff67995df284f208f83488b0a9bd01920804daf/1", "ce3238bf88811a6ee196eda8040193abaeb3a62b683b6e861bac204afc372d79/2", "ad0fadf63cc7cd779ce475e345bf4063565b63a3c2efef1eebc89790aaa6acba/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2"] }, { "id": 1140, "name": "Projects", "solves": 4204, "attempts": 4781, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n projects you can attend. For each project, you know its starting and ending days and the amount of money you would get as reward. You can only attend one project during a day. What is the maximum amount of money you can earn?", "Input": "The first input line contains an integer n: the number of projects. After this, there are n lines. Each such line has three integers a_(i), b_(i), and p_(i): the starting day, the ending day, and the reward.", "Output": "Print one integer: the maximum amount of money you can earn.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ a_(i) ≤ b_(i) ≤ 10⁹\n- 1 ≤ p_(i) ≤ 10⁹", "Example": "Input:\n4\n2 4 4\n3 6 6\n6 8 2\n5 7 3\nOutput:\n7" } }, "cases": ["046ed4ef92dc9eabb20f149522e4bce867146f1634db790e9b55a62413269823/1", "fa389a3a50c977d2daa47badb0a5f93d79c33f1f84aba754a657843d74e2be7f/2", "50832f2714ae2cf80da04433afb363c754abff89cd985ebacbb085ae9cd62a8a/1", "d657346f4b1b586fc2219de041804d0a28946ab90d1f9175ee0769e2a19abf10/2", "e1bf44335dd1faef1f84b09415f8317edd72db74985f6e35234ac48b87876e7f/1", "f497f18670edafef25de408fd94e53557484ae9b47a206bc9bb5c0f33aa018e7/2", "60253537bba7f29e5133b6a3741d4b6a50639891a1019b0e07345dac033aa82a/1", "774b11a99fc0c33ff82cb34de26b0be1c6005495b399843bbb60e889298006b9/2", "d702f0288d1a4fb8acca7ca4eef46861d358f6bf7880351327753fd365003b13/1", "7d95d2923118bf3cdf3f5d4600b1df557deb75d0ca2ef0f8d3718c3691c86455/2", "fc4de62bbf19edd7deb9e1b71295eb842528b4313c7fd22380e28dced64dac65/1", "ab11158b3f6d3e27f6cfd86c60633a5c0ff87db54ce3daad09d93483d98949d9/2", "9c6c11e40070eed75b1371db5f2400ff29aa0961c191c8225d236f9c7f7d1e15/1", "6d964e2fdc118143888a81f65f217ef16ce1dc8fca1a2e4f78c1d9ac80c04058/2", "5e1864d8bb18d49112f708fae59d32e6a2aef1aed18479c2194ce94017aa080c/1", "46641e840422189a077f705353ee6098eb8075d2549ccae3a4ac1ba369f5b3cf/2", "ae793e049391b09ebd4b2d868ca7685ca5e8dd3e0baa92999f1d70deb5261d5d/1", "e5a2510e578a8226dcc44fda3694bf0185e030f049fdffc3a4f3ae5510f6f064/2", "5d58dacdb0c46d9ed93f1a25df735838877b60f51a5c42d39b9548b612f4d8ba/1", "4479aca013513cf2cfd76a4ffb3410873ef5d8d2d5e513407dac69ec8d9592f3/2", "f7d602d4aa8fcb5ac182e126d4b48b7768a3ba407cd63d98f6034e5c1e5fdd10/1", "9334e43950c68b27f3dca436c2d181175420eacbb2cee92a5965607c08098a86/2", "515069c4b86d6f31aa4eb3e005c956a54da1377a09a903c90146025c53fd43e5/1", "0711f42a765141470460d34c758bf62ac98cbaf680d67bc29dd890eaee7849fa/2", "a9cca0042485825a53128a865085549751de366aef5c9d377abcf1a3c5bd51f0/1", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/2", "1a632f48fc717ebe1cf1e9359362a7048a4bf8ef469098fc7782bc7d4879b4fa/1", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/2"] }, { "id": 1653, "name": "Elevator Rides", "solves": 1944, "attempts": 2597, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n people who want to get to the top of a building which has only one elevator. You know the weight of each person and the maximum allowed weight in the elevator. What is the minimum number of elevator rides?", "Input": "The first input line has two integers n and x: the number of people and the maximum allowed weight in the elevator. The second line has n integers w₁, w₂, …, w_(n): the weight of each person.", "Output": "Print one integer: the minimum number of rides.", "Constraints": "- 1 ≤ n ≤ 20\n- 1 ≤ x ≤ 10⁹\n- 1 ≤ w_(i) ≤ x", "Example": "Input:\n4 10\n4 8 6 1\nOutput:\n2" } }, "cases": ["ad8c45a8657a066ad134e9f76ec9cee55aae4844278b79d25d0d827b8cac3888/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "7b1310bda139759eaef00748e378b211a9ad9c42dd907b1b421daeba426936e5/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "28267402611f821c79fe70d44d8487931baf122e49726e5c5aa0f1d6951cce74/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "f2a5335f5b58ecf71315221a97b7a85274cf1f2ab28d6ce0f232b837e3a7801e/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "290f22934e3d5b867aa7061ebcaab678eb6e0a3b92300b07e4864e13ba17776a/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "c7d6ba48adad048839af3edd1f9b440629f78ab0fe893033da2e189a45efaa01/1", "9a92adbc0cee38ef658c71ce1b1bf8c65668f166bfb213644c895ccb1ad07a25/2", "0deb1726376939f325df261864778d0c1e3f3f9d84161f18166568f3b2d653c5/1", "2e6d31a5983a91251bfae5aefa1c0a19d8ba3cf601d0e8a706b4cfa9661a6b8a/2", "c96195973172987a7828e4bff95fe11253c8dfb3215aa02e04ea2372ffcf1927/1", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/2", "478fa8188f4639247cb87cd0f0ce79f5e6720046832b702f16a42f76fa16ce43/1", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/2", "e58eff2314803d68b72eaf2ae0071d1ba1379b41151f8d0dc627d215f078bb59/1", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/2", "6ff131f4aa5501e9b5c8bbc0b257ecfba1b89ba9efe37f87e9e06d4cec8f0f98/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "f4cba2f8a693a305b2fd63a2776b6e50d13059589e66bc372d0083c030c95575/1", "25d4f2a86deb5e2574bb3210b67bb24fcc4afb19f93a7b65a057daa874a9d18e/2", "0820b797e8114fbcc958858648687ad8be6a022bc60982fed7a8c2d556c219e0/1", "25d4f2a86deb5e2574bb3210b67bb24fcc4afb19f93a7b65a057daa874a9d18e/2", "e4e10df87c8e8a9505a790da1428bd74be6939121282301abc985e23905c66a0/1", "25d4f2a86deb5e2574bb3210b67bb24fcc4afb19f93a7b65a057daa874a9d18e/2", "a1b7a58a0024e457c6121ebb6fd2fd16cc0bd6e1a8efb5d8d7262b601e8b7e96/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "4e916b4caa32b562a5f55db10c505444589069c5adfc17018082b6209f9337c5/1", "25d4f2a86deb5e2574bb3210b67bb24fcc4afb19f93a7b65a057daa874a9d18e/2", "143eae95e2baa2329d4e8a5955289edf63b27aee419049a51708ce02c0fe8136/1", "2e6d31a5983a91251bfae5aefa1c0a19d8ba3cf601d0e8a706b4cfa9661a6b8a/2", "7bbe47dcfb2a98f39a547cffbe9f82a9ed58dfaf99ba770318a11ab2e0004a8b/1", "25d4f2a86deb5e2574bb3210b67bb24fcc4afb19f93a7b65a057daa874a9d18e/2", "65d2275de7c9ae3180b152b05769147e926b521a2dfb7c2aeebcb6c2737debb1/1", "a1fb50e6c86fae1679ef3351296fd6713411a08cf8dd1790a4fd05fae8688164/2", "4db62df0027a82edd6ee92cfbf964ce499295ad9440ef30405d8c16887b8ccee/1", "1a252402972f6057fa53cc172b52b9ffca698e18311facd0f3b06ecaaef79e17/2", "39e66c33b7a41577125876e95235ce34c685b765b4ab22e5f701f4a2b07a2458/1", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/2", "bb7d160496d699a9bdac259000b55df9c0b9d91efc5efac68a90d6306859af92/1", "1a252402972f6057fa53cc172b52b9ffca698e18311facd0f3b06ecaaef79e17/2", "f29518d650968db4c4fb2402d66e60a62074f7f27ae76cf226872acf6a658381/1", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/2", "a780405466bec01210fa5247b8b1f839aee6ab3e051721a9d265bc87db000ad8/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "02c50d92c7d0309683c85683d69622f2a281b346a8258a244ecabe8eb66f5952/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "3f5cf3b15b96ddcacd787a3dafeff224eb8ec025a33d86d0b5a1a657fdc6b3c0/1", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/2", "eaec72498217a6fc616ca2c25fffe9d2c999d0b23b13a246763991e37e04566c/1", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/2", "7b3221e7d75972a55c9929f74bf1c22039e112e9d8167549af6e01f3e56a21fe/1", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/2", "e4423104fb7a64901a6edf06ce49494c22d527958efe97a3f09d733e53eed998/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "e10af96334f37d83e52216771db7343778fe8e8c49802a319595df3734903c32/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "ca88136a222d75770bf3260fb66ef973cfef2df6c1d463f9c3b9d95db0475674/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "3bad4f18cbb23c206a452448ef7f024e92b9d2b921b128b492d7a91e53024498/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "90a55a5fd8457ec6534d33ac75d006522561f546ecb4a22d8025e49868eefb1d/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "c11aaed01b8ee25c96d70f93e95974c6d913ac6d1a4371f06b77c2f6fd86584d/1", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/2", "7e3553598a615130ab476a9035ccc97c32936d284be62b35ae42512edc4ec35f/1", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/2", "0943e4fd9c7d4fbb891b7153b50256ca5c8da9dce2cb80e619d11dac590c9fe5/1", "5378796307535df3ec8d8b15a2e2dc5641419c3d3060cfe32238c0fa973f7aa3/2", "1ce4f643138443b611314ef41b508cd15f6b077b230673e68f05b4c99738ca49/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "1c0f97434fe53c4fe94129b7970edca9164a329860e86bdbac609716ea4729ad/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2"] }, { "id": 2181, "name": "Counting Tilings", "solves": 1092, "attempts": 1211, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to count the number of ways you can fill an n × m grid using 1 × 2 and 2 × 1 tiles.", "Input": "The only input line has two integers n and m.", "Output": "Print one integer: the number of ways modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n ≤ 10\n- 1 ≤ m ≤ 1000", "Example": "Input:\n4 7\nOutput:\n781" } }, "cases": ["3f11ad6bbc7ecca0b2416b713dee77f1a635c00aaeaa946e14cde1c2bfae56d5/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "dfac347cb71ae693ba8a54687f7112aff24ec67f88a3c66f69a7bf968fa2ac16/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "f251ddc12234e0da8d3b778bd0f7463fb477f16f47757f5617dc8b4ff4d4f14a/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "f65ceaae246de02135c1326ff5188bdd166c9749c021c91e49c0b9a79f9c7262/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "77c185504ee5b5306f538b5a41fa91b6fd2e085789ec5ebe3ff09faec3af7671/1", "565b6c5dfda1c10331dff54981307263d2de6444cd54226a8964a58b1d1e5b0e/2", "76afe424e6daa1b5a886504758a483364122c2f5ccd4f5e4e3f02b69c8ad8c2e/1", "565b6c5dfda1c10331dff54981307263d2de6444cd54226a8964a58b1d1e5b0e/2", "a7e69923ad0681aac3b6a3373f6bbd7861fd383b5a412ed023d00a5c596d64c0/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "93fcd485d1de3707c580935bd88c81aace14322dad4c1275c3b38e7b397addb6/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "ecd2df4556a4fc62d5286ead23059af25943d25c4727a721931d3b7471c3bf6b/1", "59dd96a7e9ff8f9e77863b0bc5a0a62110a8afe4ed448348b34d4b3e35ab2d63/2", "43250ffd057ce8cf39ebbe56d634e67289c848b6e371963cf6d532d1f43039fd/1", "6319aeeb332a69115dc91093b545726558476158ea62292b30e8cc65e1d16481/2", "28a490c3b29ba624c3455bb5bad8c92906df180bb2dc3bf25d50e76e74147683/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "bf5cd7adff73d836ff0dbecc9439b97ffb66a699928b71be3e967cfed2cd05fc/1", "7c43a3e5388390dd07882e55da9787aba8bc23cc1848e9dc093907496fd06dd4/2", "4736ce693f70d081c37fd3297c347c2eae2f27eb43f454f932dd13ea9300d2a2/1", "0724684bd27a634e732babbabb73168d7f0fd53554ed89f41fdaed382659ffe2/2", "9bfd2e893f2a9407a3d6df7e336523846c97b04a0e0b48743dbb0f9205f01277/1", "96433cd50b09a70e8831f47a7d91acc8e44cba47e4dcb5db371e29aeba8e1307/2"] }, { "id": 2220, "name": "Counting Numbers", "solves": 1364, "attempts": 1523, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to count the number of integers between a and b where no two adjacent digits are the same.", "Input": "The only input line has two integers a and b.", "Output": "Print one integer: the answer to the problem.", "Constraints": "- 0 ≤ a ≤ b ≤ 10¹⁸", "Example": "Input:\n123 321\nOutput:\n171" } }, "cases": ["18148bdaad97f8eb437da29b7fa19b012e0dc8890e8339b54b2e37c53d127964/1", "4393447bd3c1d55ea7f97417ecb1b36a691ccaacaaf2ebd21c59a5acf825fb7b/2", "0ccdb5a77ba5bf7687f2565a8ed97dfb9c1af45503c496fb646312239fab5101/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "7ccdd490f6b3380bf5ef76529f8a33c3d0d324062b190d63706eaa7ffd0ce85a/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "e3a549d1a288d6969e1a0ed21e101777d1611d7b12748eb3802954697c5f0a5b/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "276ba7eafcaf7aa28930ffc43e58b8960aeebca8e4b515754083ea8e93c7f725/1", "b8a62d70fbe41ea7af4bca3801ee6984e87db0bec9b84cf7714ebfbf4ab8a83a/2", "37e33abcd4079b466d92508ab0d17630465b485e21aea215471c65e75d25d250/1", "cae7795b13b5ed3ba20dd5e06b9d161a891a8db61888243f47465e523690868e/2", "60985146ac139aecab7958db146dd2d8d7469e236cd6c49738575b02f0bffe92/1", "df0a15c97566b327c647049d62dd83baa3f00b144e8edddf16dc5bf323ca4550/2", "3361ff65018a1baf48101fcd757eb163ca59593412ef648a0bae5567b85059f6/1", "db952efa0d638e41f1eec8df0c5ef5d37e830e8ff1618e727e92139a23b988f6/2", "02e185af2ae2cbc80de59e35e5e8820a72448928c7b270c763bc0047881178bd/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "00c20a2fe88b8a7e619d79285b02199c8a05c57fd114baa0788eaaae31e4fdec/1", "bcc2ac6a8d30486f0292e48048455718d2ccae522563977b4fc3a85f60d111de/2", "eb858680dd8d7dca693cd022ee6889226204fd785dce3e89b4a42fa035f15dad/1", "ecf38a911e07dd082b434872ad56066bc023932546c774e0a70bab25995ba6d4/2"] }], "Graph Algorithms": [{ "id": 1192, "name": "Counting Rooms", "solves": 11551, "attempts": 12327, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a map of a building, and your task is to count the number of its rooms. The size of the map is n × m squares, and each square is either floor or wall. You can walk left, right, up, and down through the floor squares.", "Input": "The first input line has two integers n and m: the height and width of the map. Then there are n lines of m characters describing the map. Each character is either\n.\n(floor) or\n#\n(wall).", "Output": "Print one integer: the number of rooms.", "Constraints": "- 1 ≤ n, m ≤ 1000", "Example": "Input:\n5 8\n########\n#..#...#\n####.#.#\n#..#...#\n########\nOutput:\n3" } }, "cases": ["ff115dbfd28e683f73cdb4c33107f05cd16f7b1ca379502f880fe9b96f187538/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "e67c75e6e3bcd7b57ef3711754a363857e6821c6226a23e2bcbfadc30347028d/1", "1a252402972f6057fa53cc172b52b9ffca698e18311facd0f3b06ecaaef79e17/2", "053f45de85eedd78aa47da94d10aeb38fba8427311a02e06bc8ad5e04a5a688b/1", "7ee29791fc17e986b97128845622b077fb45e349fdb80523fac9dba879b4ad60/2", "6854c1f815d9b36a75fee91875a50852e41b01788eef40e3d32ce95564c4beb7/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "4b0d8b2d5b1f265b3d2f4f56491f40265457807003bddbf1b6d0b1fc4e627952/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "eb4e695e9e35f7294fa10b4398ca494134986029374b874d1ac008736d2c8b87/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "bae2ce500553746c19c97738f7593d57efdfca541ff28f76595e052e4bf21420/1", "d0448db203d272f0d6fa9d4be4a4cbef7825ab7c48bfb2234b930adb1adc6fb6/2", "50206735060941ee0e9b4dabec12c207e0c93e85ac0a59aa73ccfa38c5bf99d2/1", "460d6aa4e0880006b882ee15b761096fca478b2174d62531a5cf775d7888417c/2", "750a493af574c1476eeeb0b29366fbecf5acf483cb80b33de3a32a2683a9054e/1", "0af257e71d0823b5eb6788da0d6665e4c36c310a14810538f5d4e7025c66bbd3/2", "de43e0698860b02af4ce18d9df03d195a2a6e053b31a89dc99cd70c674457e8c/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "fd5597f73a3be2c5d10a3676646d5895ba91aaf97cb1dd7647512daf9eafa3bc/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "1c63f8149733e5cf2425507238cf10899dceb13ce56a18a683dc4d01c51cf007/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "ef251a2e5ab099cc45807571d47ccb40b9f3410d33609ced319a1ef2b6d6bbc6/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "391af992d51912c858f913c5218e94ddfefcc578b49800aef356afd711aa46c7/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "63060710da9776834a05f2bb3329c45e8ecfb36ba967bf40f3684c86ced67e6a/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "7aef96340e090884ebe3b45cf09c94bd6923888ca4e0377be3cd08fb8bb94bb5/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "697e035998f21466a14cb2b6214a49f3ee83cfdd7d924bf5607918e64092a3af/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2"] }, { "id": 1193, "name": "Labyrinth", "solves": 7288, "attempts": 9053, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a map of a labyrinth, and your task is to find a path from start to end. You can walk left, right, up and down.", "Input": "The first input line has two integers n and m: the height and width of the map. Then there are n lines of m characters describing the labyrinth. Each character is\n.\n(floor),\n#\n(wall),\nA\n(start), or\nB\n(end). There is exactly one\nA\nand one\nB\nin the input.", "Output": "First print \"YES\", if there is a path, and \"NO\" otherwise. If there is a path, print the length of the shortest such path and its description as a string consisting of characters\nL\n(left),\nR\n(right),\nU\n(up), and\nD\n(down). You can print any valid solution.", "Constraints": "- 1 ≤ n, m ≤ 1000", "Example": "Input:\n5 8\n########\n#.A#...#\n#.##.#B#\n#......#\n########\nOutput:\nYES\n9\nLDDRRRRRU" } }, "cases": ["d9362c3e8b246c5bb2901a2c4db044c861dc48c1d733b2e930f2c03b83c99029/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "5882c414c93ba15dc2f67768d4ae1229cc736667beb0573fa04eda0f1f7f28ef/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "8b5cdcfdfc2a3e1acbf61aa33303a85b64255a5ebedb56bd6450fa4a94d243ff/1", "1a380bf2b650761e40b9235cb63de189587e3039a22264d6c2cfa119f92a2cb1/2", "6f3395e6f8201aedb04483d233ed8c07787a1c58d72cbbd79367b4c25cf0f053/1", "1601f7fbfa1cfb5d90349954ecaabe2d976a023fb33f9575ed9b00e43b808a6d/2", "0c88aeffb0feb7592d8ca4756d1718af428baa437003d6021679e6b7e80b47c6/1", "c56a4c8a445c76ee91a8f678d03e914d579b6b443e73a70c14efce1927d2fd4f/2", "88500cfef389ebab73713b00c262abf2164a623b3f19d83fecf966873fbc1b40/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "d36b28f384161dcc546a7b8066716fbcde89839c6fe4884e59cb868cb900504d/1", "e2c72e6f5a257ba032533f98df533c5066d168943b33736288b308f337948cdb/2", "39bcffd1074a3e9e1e0e524acbd3ef6062f3fb604463e9ac84c5dac137acaf16/1", "9640aa2207191eb5090fd1685a7e47648845bad37b6f049aef80bf95dc8ae6be/2", "753da2f49670e184bab658a86355413fc6fe7925cfed695f1baa2a1b9d0ef663/1", "7daf286785fc42e03deb0ba8383263ffb3480834710f16c01abe8eca6f70480c/2", "1aff03ae236f810418600ff7ccb011051565e7411a6f8bbf27005569412e0a87/1", "87bcdd7c4fead85ce46cbfbbf2f9ad4ab18bdeddf94d7dd5f9ece0961f182fa9/2", "86db8978bc37c8884e4224d6fb686fd247b6888c90b56bd645f011e0bdbcfd53/1", "ffeaf88835fe6760b1c4f148e0caa504445ab0facf2765963164773d25636a2a/2", "69d38f09522578f316016d8b9d0098e0082300f72c66e656e17edb16013aafa4/1", "e553ce9b61a79d85d7064da262710d1524d5c5610a82fd783f82e5324f2c3cca/2", "3d5f25fa10486d5059bfe87f28554e8fa18d9e0f1f1d6f27f3d3f3d324ab45f0/1", "945261be1e16cc77b35a28d74176cfe0f2e7121968e495252648b0c08eb4dddb/2", "a3741d01c777ef2d255f1bfc161c81839d60ce485ffcae4b82ddf23820909bc6/1", "8d2cd4218d0eaaa93e98c6aa28c583143bb3281860ce436e4a6a76a23e0b3df4/2", "097d9cd6826b5f04dac73af7227eb9df8c532539fd2f123560eb6a7d4017cd95/1", "1601f7fbfa1cfb5d90349954ecaabe2d976a023fb33f9575ed9b00e43b808a6d/2"] }, { "id": 1666, "name": "Building Roads", "solves": 9300, "attempts": 9742, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Byteland has n cities, and m roads between them. The goal is to construct new roads so that there is a route between any two cities. Your task is to find out the minimum number of roads required, and also determine which roads should be built.", "Input": "The first input line has two integers n and m: the number of cities and roads. The cities are numbered 1, 2, …, n. After that, there are m lines describing the roads. Each line has two integers a and b: there is a road between those cities. A road always connects two different cities, and there is at most one road between any two cities.", "Output": "First print an integer k: the number of required roads. Then, print k lines that describe the new roads. You can print any valid solution.", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 1 ≤ m ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n4 2\n1 2\n3 4\nOutput:\n1\n2 3" } }, "cases": ["79f5feca1af085b7600abe6b5588d12f6a5efd496cb57cb673c731786c5da9a3/1", "5f9bfe7f85b61aa38730fb03dc0049ed7e2bbb755e498f7322a2a59e95d04030/2", "d461a8780b65f66b65ae1d06714fa8e3ff3c9ecb7e83dbffc14dd8694f1d7817/1", "c51a99625cfa5bc5f7dfa37cf237df24b1d10fcb1007819a4c350b880d800a80/2", "838e2ed83e1b24c7ccedc9623dbe79673e91ef2849acd5bb54580ef0aeb59e07/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "e38bf0ceae46fdf5f889c6055c0c560a3905a89fa97da93d003fea8e980f4253/1", "0880b9669fa6d82f7223ec67bc09b247ed598249020bd967e01c7f5dd42818aa/2", "e5d3ceac4bd2e287eba8ba2911ce3223a6fd183dca8daa619ceddb24d610bb1c/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "e46502b5861fb478c32c3133762aee394dd860ddca3e712cb204395cd33a826b/1", "6dbad966c8028a23ba633923979bcf230702ca7095d132e35dfd0741d8e4e67f/2", "bf004a0e2672deca20b2a8df508764f42601f6baa88343de6d53d2b54559e4c7/1", "90351ac07146851cab34149df9bdc7344103f1679f97a31e5a80c7bfc8b33108/2", "dc887ab427d92caec04dbf48eadb4c857d809739a1381f0d0ad522df5dc08809/1", "17bb5dd4aa34492b873eea7e3ee15c6bfb92486542e7f816950849c5413591a4/2", "2356fb970bc812c0942750b71779189d8e851980a463cd0ca44e4faea9b4eda7/1", "25ab8602fe9ed23195fcc1c97dbb9ed02a659953059bd9ec1538f00d32cdb2b1/2", "82cfc6f05389749b42da23ab5a813a4385d5ceb193378c231ae9007d557eac20/1", "3b20c4fac2648ef2e6e774f5a496b6ad53a914a32ffd3d885e96744cf0649644/2", "a16f42add22b1b58a1fd3768830e59e8004d052cbe6c115b087b972662edc76b/1", "3c27a5e6301d0d6ca4b8521fa2a603673c0d5ed1283cead2623c5de48bcc0db5/2", "bc56d238d2bd03c3813351a215804ffd2c2dd5a49dc54044f50fdfa92055cb15/1", "5f9bfe7f85b61aa38730fb03dc0049ed7e2bbb755e498f7322a2a59e95d04030/2"] }, { "id": 1667, "name": "Message Route", "solves": 8064, "attempts": 8427, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Syrjälä’s network has n computers and m connections. Your task is to find out if Uolevi can send a message to Maija, and if it is possible, what is the minimum number of computers on such a route.", "Input": "The first input line has two integers n and m: the number of computers and connections. The computers are numbered 1, 2, …, n. Uolevi’s computer is 1 and Maija’s computer is n. Then, there are m lines describing the connections. Each line has two integers a and b: there is a connection between those computers. Every connection is between two different computers, and there is at most one connection between any two computers.", "Output": "If it is possible to send a message, first print k: the minimum number of computers on a valid route. After this, print an example of such a route. You can print any valid solution. If there are no routes, print \"IMPOSSIBLE\".", "Constraints": "- 2 ≤ n ≤ 10⁵\n- 1 ≤ m ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n5 5\n1 2\n1 3\n1 4\n2 3\n5 4\nOutput:\n3\n1 4 5" } }, "cases": ["1727e782b3d049df6fd6a450f1472541cf29bc26a3ecb63f23a0fb0ace8a0dd1/1", "a1a47dc3cb767b32c882453ddf5525e6b27310d2a45c8d7518813a6817005434/2", "39b46d497cff33133d28f39c8099699065cc837d572f18c30d5388b71b7260ad/1", "bff6ac4aba7d284d49c01257cd9b9fca0c389f39d591469e6e4ddbd142d41518/2", "848c633666946f05c4d61125ed5ab82e46260ad3585675ccba6a183ac75f87f4/1", "648859fc08813cadc5d22ca3ace9dc867eafcb09094044aaa153ac10d9eb3262/2", "cf45a9a8abc7c3b5e85fc143e3329fba016efb910fca86701fcd8b19bb8d0a83/1", "5fe283805be8e567bd436c200b6a4ef9bb162314bc540592f5fe10dda163ce2e/2", "28006b6b61500ece100249212f36412ff43f7b2c499e251e631fb2a78293da0e/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "a9858d272de5e9fae8c4ef7423555f7ae9811cda77fbb8464b4849f18e5ce012/1", "0dad6eb4c51ca0aa98a893b67b49cb5ee457fe2cf5f671e5284b86a92eee4084/2", "57be2b8e1b8ebbfed03070465d7d8798b602e319cf086cd916cfa7acddfe7235/1", "d63e918885af910c60d2c76db1bd82583947a4b29d82dbb6a58f984099a1bea1/2", "db2074d4659d3b10be6a81cd7f2aef7e0bd358fb72f0436d1e47c06023f4a03b/1", "3309cd4996b448dbc0241f9c8d22735c299dea718abf2dc48a2c82f85620d1a8/2", "a958be8d0be27040239eb8784bc5e53b2cb452c62dd94991aafd5c363b819552/1", "4d0e282e92488dda41fd835c2e5f1306e1c3bd055e95dbe95ca89ed4f3eb2e89/2", "8f931d41f5852e7c694d0471ac1941fa963153cf24e12d21b5323f68547958dc/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "7219e739ac6abf6a39e141de2cb2077c9232bf435e87f0480dfa0c026523e347/1", "c904f7681caa1d1881fa5a4d820074fdbd5c53e94d0702329d1ee83b742bc8f8/2", "002dfb9f465c99443d7ebadc03d781ef47c53a3049dd84c1f1f8cf33e68bf82c/1", "0481fbd22c956b787c7f453e5d71243f7282a147b4fd25010e7c835603ac318c/2"] }, { "id": 1668, "name": "Building Teams", "solves": 7753, "attempts": 8129, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n pupils in Uolevi’s class, and m friendships between them. Your task is to divide the pupils into two teams in such a way that no two pupils in a team are friends. You can freely choose the sizes of the teams.", "Input": "The first input line has two integers n and m: the number of pupils and friendships. The pupils are numbered 1, 2, …, n. Then, there are m lines describing the friendships. Each line has two integers a and b: pupils a and b are friends. Every friendship is between two different pupils. You can assume that there is at most one friendship between any two pupils.", "Output": "Print an example of how to build the teams. For each pupil, print \"1\" or \"2\" depending on to which team the pupil will be assigned. You can print any valid team. If there are no solutions, print \"IMPOSSIBLE\".", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 1 ≤ m ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n5 3\n1 2\n1 3\n4 5\nOutput:\n1 2 2 1 2" } }, "cases": ["f6d1ef2f5c2a281cf316cca2be88342f90760c0a21cc133f597b3d92c437a3d6/1", "6a796cb6df083e17905a91116bcc651d97d9ade02df6d6145e0c77d6d2beb5eb/2", "7a0a00e665a7e8513e6f5967b31e3d08e1b968bdb4f1b40567a2da5f9a81b769/1", "1cd1150f48c7d3116a9f9972a37468606d5c17054dd03fda379cfe12e64d2e84/2", "5f8ff79f8e40259093cda428a374db84dbcc26296a9bbb09342b94c534ea1012/1", "fbcf8673dcc551b867405dd2703f1c088b5a81c758b6dfbbecd4b2bfeb76a085/2", "d43dcc5b4ad3e075178ed50b4b64bd349fd198544486a7f3b71923633fdca6b5/1", "895d5ad64884098bf6957a5077ceb21f61a6e31ffe7caac33ea99442ea8f92ac/2", "0e5d69ff6fb533a3e0ec53991dd6d3001ef05e18733cf0f2c41fca9470a7340c/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "6f1d48bd108f2567f47357c8b25d3afdf4e393848f467d124b13a3716bffdd55/1", "2a463695cb6a23ebbc511ca2762fe24ead4a7ef06333044ac40df5de61466333/2", "23f21dd1e37b077fa2f1b8ff0287169286fc3033d9641f99b3e64a3fd2778b6c/1", "ae5539ed3e7fc100dfb5c1698f273c85c08c08a3c00031435aea3a02d346c962/2", "9f3ef59adc831da6d9cdb18aecf78edbe466d314ce8a46ad5543fb558dc3ae19/1", "c10e198ed3e8828ce4db5d801a32a0d3ab036c6c8b0a782db2092e4da7d6b8c1/2", "f716fe6b26ef725f9e8e99dc55112ebe32755fd299b2863df9300263ab504295/1", "0a4681835558587f3489dbdd76be8565b3c6280c45794486ff7cedaf1def4d1a/2", "4baec1133f15902b3375f0d8013d9c963ed52e5c85b204c68310bd01f3b2351e/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2"] }, { "id": 1669, "name": "Round Trip", "solves": 6260, "attempts": 6883, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Byteland has n cities and m roads between them. Your task is to design a round trip that begins in a city, goes through two or more other cities, and finally returns to the starting city. Every intermediate city on the route has to be distinct.", "Input": "The first input line has two integers n and m: the number of cities and roads. The cities are numbered 1, 2, …, n. Then, there are m lines describing the roads. Each line has two integers a and b: there is a road between those cities. Every road is between two different cities, and there is at most one road between any two cities.", "Output": "First print an integer k: the number of cities on the route. Then print k cities in the order they will be visited. You can print any valid solution. If there are no solutions, print \"IMPOSSIBLE\".", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 1 ≤ m ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n5 6\n1 3\n1 2\n5 3\n1 5\n2 4\n4 5\nOutput:\n4\n3 5 1 3" } }, "cases": ["890760c364d3dea537eda2d40dd32adac64f7fbf1db7ea004eb35ec369a7c5cf/1", "7949ba262b5e5e6c69be6b8be1989a12e700528f3aa5dbbdf6b376de4074a7f4/2", "0932add3f8ff5204a024119fd374f95fc04563f08e6f212a8bfb04e162da3b0b/1", "ce9961c6e919e8e65353bcaa46c7d4f5510400ef5ec8acbfe19744dbcf72f3d4/2", "531d1ede4beb7b3c3c492f19f08e87b4cb558868b4f05e2e1ecfd83213e2daa9/1", "1849e08559b19f447f79c1b951575c7579ae316c53f35bb846f1211d5cbfd45f/2", "c512689082eafb711c490001ef761f77489dfeb7c4b471e0dfe45fb0b132769f/1", "bb2e12516d4316a214e84e388768c674c91d51155c1b1fdd444882d305e2a0f9/2", "8f20f6c68a491e591e971cedaf81e9cb8883bc8a9988b075b2984d833895d30c/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "ae6e2bc8a036aba22b81fe2d8b9a18097df0c2fd9d9408b9afa93de64ef0bf15/1", "feecde1bf20166dc89fc3a5300409020551e088fd7abe6d65b063b07e1d62945/2", "99ff57f52b1f4077d694524bd13d13223750a46f127e6e7270b0669e26573991/1", "1adbbc6b8ad9fb918a0324e4c1ca6441fbde605a2e4889d09e20e252b17266f4/2", "d1e427ebef2afd1750f38ce9547692455c60407cf2b1680549063fb20942fad7/1", "617fe6e10f122aab055e4c1af214c9a8fb448fb5e5c6fce9b665a134e0d170cb/2", "616bb841d25a62ae4317977e4a33175647d4e3d1ab6a679e629106f31ba98f9f/1", "0707a73e7913e1b0f827cb0a14322205152d761b20f5e7fda69a71f7c48c83c8/2", "221b5b8b2f59d3d24710478f9785d4dba2654292aa6a08a3eaf686b3e2997987/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "5df22787ccd0e5c4f445277657475469eb980c6b6a79ce66f35133542d7a6c2a/1", "1fdc4e1821fa4735f3cfacb4328e10bc9ef11943a0fd4b367dcd4c2ad0b5f868/2", "0db8215608ee681d5a16a49fe3b6ec26226c1c63058d1112b00c59f6125a036c/1", "ec0666bcb653323e1b21947b85503d24845b691b7f1aaae93ca76f0ef88add51/2", "4bee59d7e41a3a98677fefd131d082643853108b903359492b1a9bbb286fa7fa/1", "ec0666bcb653323e1b21947b85503d24845b691b7f1aaae93ca76f0ef88add51/2", "7219e739ac6abf6a39e141de2cb2077c9232bf435e87f0480dfa0c026523e347/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "7ce784a0b5222ab4f37480531cf01b758c3a6c25ee70cb655429e8734eeb2528/1", "823ffdd12282df06029fc9e4e2e5c1545d8b306ad74cf41271843a48b709d21b/2", "a8a0bf86f22ecd07757caf802ebd1254ad03e33137fbc55f82a515c3f34b34d0/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "8b3346857df81e1c58fd9cc6264c8abce9404e6c2060c1e8064391307fc2d76b/1", "a59d4fdadfc7f742ad64a14e5dddb8f7aa418671e5303aa64da4920f058aa12f/2", "db4d9eaf08b19efdf7522669c9a671f693c5322d27bc040741d1ef0f43c210b2/1", "92f394bbd882b5d04aac8a06f0d305eb0936f1cee583b14ea43840a35c4183a0/2", "305104e15abf7b2407921afc068620455e0343fbd659748c33d1d33793873b27/1", "f38a419a9fc1ff2a5e8a636de2fcd90284b83947d850eb27f2a11d68eca0eb10/2", "fe15c8ab861db1507298a1df0b080dd3784aeeed394e1f2398781faf0b07740d/1", "8b33b461817304b7ed52676edf0a47eb1329d6095405764b64b508c6304299dd/2", "22d1eacec1b12b949e541512758a835309a93a6d49c5d8a6d7c0d75519ba7704/1", "75a336d0eaa485f71b5b74519a9a21e2ade120463d7d0faf13badf7f1e07275f/2", "d88a19cc21f6e57e5138e2a460d71f2823d45d00b3034182fef12a7627292f62/1", "15f777099fff954fdc123b147957de91c3f5b147ab01e1ed4fa9f66f72ace0e3/2", "5046c481b6c65f936d0594d47a0fa7d05158356d1748fb15d058ad14d20f7a23/1", "a59d4fdadfc7f742ad64a14e5dddb8f7aa418671e5303aa64da4920f058aa12f/2", "195549fb272fa68c082131c98c86a6737bda39e23e6e4c29b57f859da7c45f21/1", "3228df1e3d1fd77716621be9339d11132fb9c47d51853dac747ab6a1d15ab134/2", "ba9f7f7b56093d16970a56101510f16b2d0d47d8e00aea66b00a20e25b95ab5b/1", "b85aeef4b052d87b0b8ce913189ca08e339abc12ff53191f63f2c85b9bcfd57a/2"] }, { "id": 1194, "name": "Monsters", "solves": 3563, "attempts": 4460, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You and some monsters are in a labyrinth. When taking a step to some direction in the labyrinth, each monster may simultaneously take one as well. Your goal is to reach one of the boundary squares without ever sharing a square with a monster. Your task is to find out if your goal is possible, and if it is, print a path that you can follow. Your plan has to work in any situation; even if the monsters know your path beforehand.", "Input": "The first input line has two integers n and m: the height and width of the map. After this there are n lines of m characters describing the map. Each character is\n.\n(floor),\n#\n(wall),\nA\n(start), or\nM\n(monster). There is exactly one\nA\nin the input.", "Output": "First print \"YES\" if your goal is possible, and \"NO\" otherwise. If your goal is possible, also print an example of a valid path (the length of the path and its description using characters\nD\n,\nU\n,\nL\n, and\nR\n). You can print any path, as long as its length is at most n ⋅ m steps.", "Constraints": "- 1 ≤ n, m ≤ 1000", "Example": "Input:\n5 8\n########\n#M..A..#\n#.#.M#.#\n#M#..#..\n#.######\nOutput:\nYES\n5\nRRDDR" } }, "cases": ["219e5dc1e2d3cdbfa381c9fca8ce8dc0252c8eb12cb526bc04ed0132c6c9b026/1", "58fab9e2275a52fc77a9226c8b9e45d2518ce1ca0d76fc1d87828b52d94ade5f/2", "6d7e2e6d4f5739b040ca901ace6f71fdc689a56d301dcdce97a824c2b29eb000/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "517e90f78d1c95b681f957f2c996a9d389bfe64dce4c5449a23b8a71ff236210/1", "84f3dffbf31efca1606f333a392db64546794917513f5eb7a7789c4df0c9d1bf/2", "1ace6ba52fc555e5c4b4ea46a8b5c2a2bb3b09cedb3aeda12caffd989dca35fa/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "c68c79ed0707d54de3527d0c2575e5e916bbc51cb5dea3c830ef3c0b8c292fca/1", "a231ed9a7dd83c4bb0ec360e9b3d00dedf14375eb5fe92e00663d854c16e55ac/2", "989e4ac28827e4a0909aebd907342b2ae8d70a92080f557ebbfcc6db76a249ff/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "529326d049ff07ac7110f941949ccdfce0215ac22f032b65c8c91986986165f1/1", "1104a4b59754dc6573af0a9ae3764b45ca78b8e0b6aa9cc2875594a441625ecc/2", "87593fa5c2d5d59909f840e434da441534782d1f398164c31c81c5428b2ee09a/1", "09394df352cf35092c26af38e8782313c364d02859b19ae0907c28268184a15b/2", "5472e0864917e1662c47f65c109b334f86488eee8ce0367fbefb96809c43d9e7/1", "0e686ae3178d6cbead37d926c52e6f5730055e8c8ff108f9068eef9d174223f4/2", "caf538d88c5c7d1bb771bea14072f3c9a3ac29c3dc7c61358a6848d603511ed7/1", "b8a68477b58cbe1260e083a13b212aa71c964393d4d6177bfbbb31fb903e29b8/2", "060d9b5148777d2169d35e97ea698badf432908840961980c68b6535235e0193/1", "d2bf13beb6ee17f40807dd2c2c49257ab98f98e9bb038621186a92121147b133/2", "2b241c91331142170245ac7688a82ae046fb58217f61069ea429f2a530e0ea1f/1", "b171e09412c749f043816408efb328c8bc0f164e57e58604f9c36e1684f51300/2", "a8ec3eb60aff1e943a0823118c230797a424f4ab4dd77a62c1bb1a841ddf2500/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "04e6efb26954a3a36e54e6bb778d34e38b14618675712acdee0a89b520b1676e/1", "c7cc043be9530f31fb4f2d97434c5cc599e7278637b8af8d32d0fa06f8de0f9b/2", "3e0b720af9432d62a8469a3227c12c8be09dfdf392fb842a8c4da750597497eb/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "ed17b7da54287dc8c9ee4c84e8647274dae3288b7d47187c47e89f8c7aaa368a/1", "d2bf13beb6ee17f40807dd2c2c49257ab98f98e9bb038621186a92121147b133/2", "20f2c54cf54324da8473384b04928b66d9ca436000bd5c85d590bdc20ebee350/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "5b579695ad3736ae1cba87f8fceb4b70344b05fb4b9f210ec830fd1dea1d3560/1", "fe56902afa1414c5b0501e59f3ee3897522ba8970a5c27accde6ba398965359c/2", "d0182a19cb3334bbc04c51119852035fb583ae938bf98e969237fde6dea675f0/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "8251dcc45d2d3e6854a8f8d9d5233c931d08e547ecb4a7aafa1f43c5ea4a9769/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "eb84c0d3bc0e828b04d6a430bd633d3ad3c57d4601ce144f4ef1d5e8307cd51e/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "6a3acfe650bc3a22ce27069104230b600f0b801a1e298f6aed85669ea1251584/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "1cf99392d02b7b1715e1d242a32b54a49b37c0bdb72fe0ecea238f242f8e3dfa/1", "4eb1bef767c93506b6a01d845a082845d5a8d2f0019e76918e3933647c8dd33c/2", "876d9f450d9c9dbe7d0896d17fea01febb56442f0cdaf81a7bf35ad1a661c1fb/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "4218cc785b9cbdf09478d4a1a8a18d4fc084f66332c543692df877dbc2c7c5af/1", "d2bf13beb6ee17f40807dd2c2c49257ab98f98e9bb038621186a92121147b133/2"] }, { "id": 1671, "name": "Shortest Routes I", "solves": 6420, "attempts": 7173, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n cities and m flight connections between them. Your task is to determine the length of the shortest route from Syrjälä to every city.", "Input": "The first input line has two integers n and m: the number of cities and flight connections. The cities are numbered 1, 2, …, n, and city 1 is Syrjälä. After that, there are m lines describing the flight connections. Each line has three integers a, b and c: a flight begins at city a, ends at city b, and its length is c. Each flight is a one-way flight. You can assume that it is possible to travel from Syrjälä to all other cities.", "Output": "Print n integers: the shortest route lengths from Syrjälä to cities 1, 2, …, n.", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 1 ≤ m ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n\n- 1 ≤ c ≤ 10⁹", "Example": "Input:\n3 4\n1 2 6\n1 3 2\n3 2 3\n1 3 4\nOutput:\n0 5 2" } }, "cases": ["10ba91ad90dc789f62ca2a429bdd9ca5dd77085b59c3094865ebca6faf512a36/1", "d0bde31423527adcc459017aaa0129f145dcc192268d2c50ad7b9f4bbd8ada8e/2", "8e45489041bd97dcd58f166d720ce0ee3efc31ce621446375e60fa07b48dfb6f/1", "708d821d0d5eac5e143effe90b1db1ada7f05f569fffbb099882eace44d5459c/2", "b741458f5a688755533a88300334b8c2f7ecfc752d89f9286a0f71bd6ca3bfa0/1", "5d02dfd1a9997b87c4d130def8aa6220aa5e39177031af8a5344114c6fdf8fc5/2", "62ad40fc233c2cd10a660a722bcd5980a363696e6245944f321a512741008ce6/1", "52ab388035efb4a3008b0a7606593650aa7d021b3a84dc92285bceccd5d0b28b/2", "eba541fbab9f23ec9cca8e4cd9f21623100dae61f241a5166525fa5d42f7797a/1", "150ad5817843deee68cd3a327eda62e4b71766180c413bfed14eaf18002c078d/2", "ee0c1ae55d075d11223d38c57a30c76d45e8f45479fc162768c493908cf77bfa/1", "5fd9fd40f04e877091af2b2e49c9c1b5b465f69a6dc78650d35dbb17ae5f713e/2", "82a883d3849d2e211cc65e955e7130022c3b57c6a9f752dc51392982c51cd9ea/1", "6a260c4292f67e267909ed617ba7220f304c55d5aa827e96f9a221f84d2e742c/2", "47f3c165ad5f9148b6239493d7d0b82116657a8a155996e94c7545e67230e26a/1", "75b1a7a0a1686aa40d6bb86eb998803bd1ffeec4c4b551b7d0ec1464e5c4c48d/2", "ff1643731e0e3372d71b76c919aecc907ca643f48e0944ab2d3012fb6203610a/1", "03dcb17feb7d5bdd66d3a4f2bf1d917c1b6711f1f94309e11fdbd59dcbc8ffa1/2", "f204def4c8c660d8f634bd0b3e0f4e337bd62f4f4dcfc2057eb950e9f6b46feb/1", "ac13a20b67af3c5e4994b5d889152378d5cc7067634eec040f367e0262c8763e/2", "316d8b7b3b32900518d00a1b27204a61e98bbe77b1e5fa1e2c2790801a98d89c/1", "41ed86a922ad0b8aa30bc57a28f52b14cc003961d8495922f9a2835424a8954f/2", "608942193954205102a02f7f5f5479fb3881432e38aff6c3c24d4ea46a7e3180/1", "02a0f18fe5d2d527f06953652ee5729681cc94c4142921245c57b30c58592c03/2", "8796e4d2ce0967ebd89da36a046452ac05cad8199e7e2690f7495f3b20d1510e/1", "41076331dd794a2a155e9a375f6d9227cb82906867adce1b5089aa553c4ccaa9/2", "b9b238817f604c64e4fe33cd0a61f5a72aa1f006f97b0d52d97e7d4f43a4e1ce/1", "8d200cb894024adb3d6063f389c6966c3b2506d7992c85da10b1b9f4311f3fd1/2", "81d4dcf9a7879d180b5c8ad3eb0a5a515dc17a0ba2e32d69f1aebcdf4bd18613/1", "6319a10685f2ed6188c0030b359228d273c8094ceb3872486565731f719568ee/2", "6202e05529aba02706fe1c03ec7d07ed68c2e254b69047129b52185f875b9a1e/1", "49d8e942cef667ac1695744ee1f88f2d292d32128198ad681e14a9b6019f7ed5/2", "d302f090565f18a159ee41051d0dbea756202fce97fac475a56bf101ecf02471/1", "49d8e942cef667ac1695744ee1f88f2d292d32128198ad681e14a9b6019f7ed5/2", "a563cff68cf3d8ade012345cf49bc668cdb1f02f7a75317091066f81c0db16d5/1", "e3f193156a3c93c457e2df1f658d5017f95cef4f65eb3f2e68e2ce23f2fedcdb/2"] }, { "id": 1672, "name": "Shortest Routes II", "solves": 5443, "attempts": 5909, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n cities and m roads between them. Your task is to process q queries where you have to determine the length of the shortest route between two given cities.", "Input": "The first input line has three integers n, m and q: the number of cities, roads, and queries. Then, there are m lines describing the roads. Each line has three integers a, b and c: there is a road between cities a and b whose length is c. All roads are two-way roads. Finally, there are q lines describing the queries. Each line has two integers a and b: determine the length of the shortest route between cities a and b.", "Output": "Print the length of the shortest route for each query. If there is no route, print  − 1 instead.", "Constraints": "- 1 ≤ n ≤ 500\n- 1 ≤ m ≤ n²\n- 1 ≤ q ≤ 10⁵\n- 1 ≤ a, b ≤ n\n- 1 ≤ c ≤ 10⁹", "Example": "Input:\n4 3 5\n1 2 5\n1 3 9\n2 3 3\n1 2\n2 1\n1 3\n1 4\n3 2\nOutput:\n5\n5\n8\n-1\n3" } }, "cases": ["58d82d6e5050d637a5ccbc27e6029aa1c1e3bf608781aea1790f803b1c221aa6/1", "dd7e6b3214cca80dd1570a9b50d3db3f26cb735532518b11de65d8003326769d/2", "d249f39ee02dd687869d2e1a4136a400480f3591520d06c2fca82d584a337f09/1", "f67e343da93b0f6283918c7b0f035304bac35727705d3dc416d41cb650da4f2a/2", "b2354540f8f29695b56a24874c6e22621856aee929d727785a01964114df2140/1", "00e825bfa84a708cb85a96cab90a96983f1efa5df3c0858ebc247af9a115e76a/2", "8b829cc9718cd7357e3536fd8712944cb8c7e3d870c03274aff3a01260dc88e6/1", "79df17cf58110f3d60a4082f0868a0b6964f87df6a5f558115d9a548eaa3dc35/2", "a824bd11ff0a02a48317ced5ca22484d57abd7eb6bfeb5d03b6b3f82955639ca/1", "e67cb8209268fb77eb6f51ed0f1448cc0ef89290a70def1d8236b859f9c163fd/2", "50ab9e684cf1b4116fc9d1dbcaf3d6d4e4a890f508c16c4cbc725b490dc19d81/1", "0f0ba227c0bf242b820a55ff8919f3680c966e9e65378b4c325cbfff31e653c1/2", "da79161707766c84403002d5f3a71cbc16af45e87de80789f7027c58423e3a0a/1", "50b621cf154f18914851037ec9449429baa820d0fadcc28c5fdad4b27c4033ef/2", "e617a006f062fc004c7cd8ca581b7af149af99cb6d6623701b72397051860cc5/1", "f12a9495e17d6dde55c4b634225b9ca0b5ec78fc7f5d7e0b3a11034cd421eb60/2", "85f3038ea21f7dd9ed3bf65e662b746f3803d1762db36223e520b6cfd3e0f962/1", "01b0a832211e01ced462ff8a3e1c6923fd57253198fa004ff5653ae6b52c1c15/2", "07a013884d1a8a126b2bef32b933051714446c621c0196958a3e5d01178a599a/1", "a3be4bcbfc4ff6ca8176166cad170d5607f0fdc1e4d58a4a3b67853be62bf875/2", "9d29d61993784d088e416d86eecbc70a0f3d866d01e2da780fee0cb3fe262c56/1", "8727c65f78c35e1877a0a27ac15cebd4bb216c53a60e0a89a51ef5bd8970097f/2", "f18aa446419d869f0dff52de99505c38379259ea9a48601400e4687422170828/1", "ed51648c1a3ccd539a00b1efb5ea722e336afeadb4da136b2f60e31a4094426a/2", "4251394e962cfdcfda8eb92cd24cc39fa5efba85911d882fd7114ee5076376c3/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "eb81dbbd3319a882eaf8449104563553bf7d74aeb7d28478fc6cb81d03c9de35/1", "dba327c56242723fba81027a07a1c26551df1729df80ac7055a9d53c2e2b6c07/2", "d57b95cec10b6b861d8335b2ff9756f6d30e9db0032aae623d99975e819ec85d/1", "cc2e2a98e6a88e127b8c66646591252bb2b205f63ea284d4d6378dd60bd2e2c5/2"] }, { "id": 1673, "name": "High Score", "solves": 3158, "attempts": 4445, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You play a game consisting of n rooms and m tunnels. Your initial score is 0, and each tunnel increases your score by x where x may be both positive or negative. You may go through a tunnel several times. Your task is to walk from room 1 to room n. What is the maximum score you can get?", "Input": "The first input line has two integers n and m: the number of rooms and tunnels. The rooms are numbered 1, 2, …, n. Then, there are m lines describing the tunnels. Each line has three integers a, b and x: the tunnel starts at room a, ends at room b, and it increases your score by x. All tunnels are one-way tunnels. You can assume that it is possible to get from room 1 to room n.", "Output": "Print one integer: the maximum score you can get. However, if you can get an arbitrarily large score, print  − 1.", "Constraints": "- 1 ≤ 2500 ≤ n\n- 1 ≤ 5000 ≤ m\n- 1 ≤ a, b ≤ n\n-  − 10⁹ ≤ x ≤ 10⁹", "Example": "Input:\n4 5\n1 2 3\n2 4 -1\n1 3 -2\n3 4 7\n1 4 4\nOutput:\n5" } }, "cases": ["5d80c98834a3883dfe89f7671bd2fead2401b543f7e3839103b2c7383700d8d9/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "4508d5bc9f4757d772fcf5856c11ea209328708d92398c1c0115aef1c771ef70/1", "8fbfec21acf8f74313698199401f9eb352920bd889b4865b272e657167808aa0/2", "2295897b7346e622f3f3d906280b4b2004dcdcdb07e28a9c30012dbeda83c8eb/1", "997ff9a9efa2ad4adab1549eb0c466d9a44cd4757c09df3fb8205a806ddd9c15/2", "dd6ae81ce80c856c3d720a7ab7061ef2fb1551138fe64c4ba5d2997e94b034c1/1", "c6973e153f819ce7aee0c5112d602d936196befbf0a098253931589565fa35d9/2", "1e370bcc289021e5881b49c17a98ca525debc2c32d56132fc72c6ec623f6c55d/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "d5de2b652eb82351f63c33622972cf23a9858049a9398b5bd0a7e5496ccf8edd/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "b729acfbd319913d296b9c1c01d1bc2b2b335013e39ffa3515b4eb79cddda37e/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "a85d5e960305def9d5e94ba8886e0c0e8e02c63356c8646711d80788628971b2/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "e1aa6439618dc872588ada05139ff161ac24a830afd4f145f6eb7be9d65f3674/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "eb206c6c65a2a25c97637cf5effa6a020d86b4434be7d9b8e8fe40216c00e9f2/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "ca26f58154e58fbc608170d78fb292755719d1c677740950a9058fe931afd0a7/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "d31400a9196af8d78037127201e471353fcd1f5aaecc9939ea4740a054559c0f/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "76b3953d4249ffc71e9ea9cc6c51ef6574db07181bedd4c5a71ccc2165a7d3dd/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "c5702f5945e272ea04e677cb4a03e590de89efbec1241b3bcd3bd52c826c1877/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "b2e27b76b60e28cbcda575653824a489358b9616927a045ebe6f04bade38a83e/1", "d7b906a85360766ca93a7f2a3391ddc205bb248d2ec6e045769e67889fc1ebd5/2", "3fb42e7b015c80fe30c95869392ba397e8b945ee34819c03a97fc12575a2cf7d/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "daf8a4ee2340c291887fb21440c462a2829e57e30108a043836dc98310632fc3/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "78783f6609daf9b762fa04951ebad610534f8deb3ed37697d239d410d7b72a8a/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "72d52eb9ee1b11255b35d3e6d1234a48728b5faaab2eb5bbbe50fff90e2f9ad4/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "12144e192e9c5676ff6888ff53f668a7b6170c77b7f2b2b77b7c96726d7f0a0c/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "8f8a02ca69f32212a78ce4e7c2defae546411798bd4eeac6aedd5c7344cb4165/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "089d0000d3a5121cfd18903c1b9e616adcfa6fc6a860de97bb8910b1e2ed4b26/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "240b38fba92433c89ab68154360946db7875422a417a7b3c34410ef8c828739d/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "4d9691c3cdfd19a1c895074d3b0ff8da5317981656eb555914e329719958137d/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "310716d8086f9d5c2a463a32a9e178ee6aaa8226be7af45785b336a5f4e75b72/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "bb631eb94dd258073165a78eff1030f2b290251b2145edf5aeb2e18d3a67d866/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "7b3aa3a7200204311e808bf660b5bc1848c1a11151d795067f7bb6aecf402aaa/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "fdc76f430d34ed5734e8c4803adcb186937afd5d6ce1ee72d3a8050df889cd31/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "b5e32bac3c1c49315ccb57120093a1c44b4de2fec98acd267255a105731123bb/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "6871c0a760c0b021beda2f52efaafbb9cd65890ceb37a4bd6fa30d17ed7d7908/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "3304302f7315999868fc196b2ae814212038ea46cea7b3a9b9d0eefd08aa55fa/1", "621a0a15007c2d9869c82e1296bc77242ce590ef384c7f9e7ced43564f039cda/2"] }, { "id": 1195, "name": "Flight Discount", "solves": 3354, "attempts": 4377, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to find a minimum-price flight route from Syrjälä to Metsälä. You have one discount coupon, using which you can halve the price of any single flight during the route. However, you can only use the coupon once.", "Input": "The first input line has two integers n and m: the number of cities and flight connections. The cities are numbered 1, 2, …, n. City 1 is Syrjälä, and city n is Metsälä. After this there are m lines describing the flights. Each line has three integers a, b, and c: a flight begins at city a, ends at city b, and its price is c. Each flight is unidirectional. You can assume that it is always possible to get from Syrjälä to Metsälä.", "Output": "Print one integer: the price of the cheapest route from Syrjälä to Metsälä. When you use the discount coupon for a flight whose price is x, its price becomes ⌊x/2⌋ (it is rounded down to an integer).", "Constraints": "- 2 ≤ n ≤ 10⁵\n- 1 ≤ m ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n\n- 1 ≤ c ≤ 10⁹", "Example": "Input:\n3 4\n1 2 3\n2 3 1\n1 3 7\n2 1 5\nOutput:\n2" } }, "cases": ["37286b9c16b458100db08767fec2af1b0e179458d4c6d3aee3bac5116053215a/1", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/2", "a8434ed848c1689e030781c880d60056f5e3c6ec156e530fc3d889616709d236/1", "a1fb50e6c86fae1679ef3351296fd6713411a08cf8dd1790a4fd05fae8688164/2", "73e546f64d6c8b6c26df769e4bec3b5341d7cd56ee884d8f001f340e60628ef3/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "6079c4c03270f561eb5df17b6c70c7c9bd4f2857bd94fa6a0ec6f0e085683fee/1", "2ae098a65234ac4acb2d9778e1ef690b5ad230e76a476f727fcdcf3a50193eae/2", "5d41d995f6893315f06a994899bf0fca124f61d5b87e4d24b8527e9df1af7ea0/1", "b0a70f42cc226b90df3444b066df67559014f2c165bc478b0e0147fb442e2c7d/2", "1206b60f3962ed3fd5f7b61a99b02f4d9225a384930a08731012bfb11e741eca/1", "ec9239ecb815e89f59c0e2069de43430f0731be57f0e54beba7ba202db10df11/2", "518e39f1b46cc466703b64b3202dee576f604eb2934d50131ceea1fca7d77178/1", "bb0c15c5ad22abf6710968fd0c2159667521df290ca1da55664b290797f5d0a7/2", "f910c7740414030e44569ce950c540ae0442f913a37d7aa17e4c34955afaeff0/1", "cf8feb7bb3fbdd8d2a38ed83256c449353d4a8573d3a34f08a518bc034f3f0a2/2", "0410c2e78f7f282d66b6a714782e7402b82ef4dbcbc95359f0bcee6a743f46f6/1", "893b430d0aa94ad781f228071579465ea043ff4b66bf677a4c031b864be9abbb/2", "253782c9e510bef21e100ee935cc3cf8eee16dc770b7ded3a71b3eb7a84c45fa/1", "e00e6031fc5e7ef95c526573343419859e112cebd550f10e2089bf393f5ed2bd/2", "47680bb399441326f19e114013be1de81aab54e21aa9caa13eabab898bb5c0ee/1", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/2", "f3e8615aacb70132006ef09ea66997ae42953ad9bd3af3dc736b959cef326050/1", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/2", "d302f090565f18a159ee41051d0dbea756202fce97fac475a56bf101ecf02471/1", "d8ea85bfa8078ab6ba5ac6bf24bd8590bb2eb00f067a9e87fa2d74a97101f985/2", "6202e05529aba02706fe1c03ec7d07ed68c2e254b69047129b52185f875b9a1e/1", "d8ea85bfa8078ab6ba5ac6bf24bd8590bb2eb00f067a9e87fa2d74a97101f985/2", "315544a47f1f171e1d5c407dfc9fd9ed3371d1b03ecdfe990ed83f102ffe0ce3/1", "e4355a05c3a4b156700c4a1a32867d8f7a25a0dd24c6146c2deb2a1c96a6c93c/2", "0876f63f0e18e605a7371349120fa0014e689f7e10dbb94dfa5f4c488192903d/1", "9a7f91a861f59c0cb27f0af9323d158fdab7740d5e3c8016a60f4b04c0fc41e0/2", "e2389dcad4d3cb04e2fb56fbeb07571500212b0d4f07cb256fca134afec85c52/1", "0433e993a3dbc505d6e5cad972a1df0ab189cfe7ceece5e94fd47ca9a074370f/2", "fbb4d5e5a0debf1a2521834ab5109c687469a8f042c9656b92cc7ace827d2f57/1", "4f7e6c1f5d7febce42e1ec132dedce4454d818d8521a909f7ed04b9abab3b596/2", "cd311282c0087a2ecf9875ef87db35f9f446eb902ca251379cb3f4090537714a/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2"] }, { "id": 1197, "name": "Cycle Finding", "solves": 3041, "attempts": 3575, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a directed graph, and your task is to find out if it contains a negative cycle, and also give an example of such a cycle.", "Input": "The first input line has two integers n and m: the number of nodes and edges. The nodes are numbered 1, 2, …, n. After this, the input has m lines describing the edges. Each line has three integers a, b, and c: there is an edge from node a to node b whose length is c.", "Output": "If the graph contains a negative cycle, print first \"YES\", and then the nodes in the cycle in their correct order. If there are several negative cycles, you can print any of them. If there are no negative cycles, print \"NO\".", "Constraints": "- 1 ≤ n ≤ 2500\n- 1 ≤ m ≤ 5000\n- 1 ≤ a, b ≤ n\n-  − 10⁹ ≤ c ≤ 10⁹", "Example": "Input:\n4 5\n1 2 1\n2 4 1\n3 1 1\n4 1 -3\n4 3 -2\nOutput:\nYES\n1 2 4 1" } }, "cases": ["b9ce96d458d1433290671dbbfdb61cfb67d687122118711cb0092f4b573c414c/1", "3d950dc3ad075f4ba1119cb13f80847f76f5fc0a81b451e2516d08c91b15ae55/2", "f10e265261fdf89aec10679ca681eacf17c64f9f600fb69dd31868ee6cf2f768/1", "d51aac071db41c7f1f9387ee7a0b104fb708418ccd3c182bb4bff346ab044ec5/2", "995dd41fa8d98cc5d284db175160738d9b5a90e7c0268cbd93b87041f8367bae/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "38962ae6134d2334ff0cb4230caf645878708d477efed25c63b02ace32a8fb87/1", "cb81bef0b84f73a7c85d7178b5f9ade8436d9c5e584ea2a18bf184987dfb5a5b/2", "aa0166a1eac561172e8eeba1293cfa02fa9dfe460e57a15ce761d1702dd0ab99/1", "2c053708895d6052c2aa77353d16f20097d410dbe898125d0b15f561a2d805ca/2", "d84bf500ffb82eca578b2e078e25054295c3199ba3ed2eadce2e0e50856fa2f4/1", "b300f210113b36781cc1fa5bef75c9134b5e81ca2e9412224669a21f0b8b7b69/2", "0a9e2e499f40d388c982e1be9d348b581a570eb04fdb28a3000d06b52a864c46/1", "fe1011753172a702c6ed19fcb8b593b190c501b24047147d034650ac34e1242e/2", "995625b235f5fe576763f7631ba41d7e12f628f38b8bb4eb34a076fe1a457868/1", "967226abf804c9d0ee853689200c0a384dcfcfe8c2db6b3e1ce88c6082d5a709/2", "6c1c48e47c02bbada1deb3954eeb3ebec54a49d8002d9f75655b565e28e8db58/1", "99ac8a5e2647b271d4600b6a13885154d78c66a15e875f6978db612cea2a5b51/2", "3ee9b171c702f13d11fa21171f648980f4bb18d859cb84b1c987bee7d527e55c/1", "e4b2659a6bce4424e0725126814b04c2e352ff96afb370c60ecdbfe802ac2ae0/2", "81df623ae1979c4cc46f3510d4fac602369b4658d4177efdb0c99bc1d3ef6f60/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "3783f3cccec875d57540c2e3267c964abb46a05a0f7725f121fcadd5fcca6660/1", "e6f5b3defc8d5c676a095c1c3a11b67019955ed0ab464e84c0f25d1f67d8fc79/2", "d564197490d67ac482b4a0897b204d8d43ef91307c2f20c416885de0054219b7/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "880da042d9cb164e8cff938b8195d3e4d572f747bab6cf13bc95df52e956a8e6/1", "7a1bfd675334602ee441863ca5e52f15d36e253ed3d97621ced85bde85735ad7/2", "14b0bc07ac18902569ce72c3ba4f27c5de93d99e224b24969aa483eb6cbf6d47/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "56fee0a2e9e7086bdae8a0e7f6edc292a67cb94030fd41cefd86a1c2bb7ed4c0/1", "b8cdf04fd9e52b1efebb218bf059385200b9221cb77bef2b5ac1b2914c6f5f2a/2", "1d595b216636a5b56f2348f15d23205de7ff7457b46d53c09d806699d3fd07a0/1", "b8cdf04fd9e52b1efebb218bf059385200b9221cb77bef2b5ac1b2914c6f5f2a/2", "9a625454dc2b633c09977389ac0fe486c40ee11c720a72d1da61de3769c87cce/1", "6610e8c5fce265dc77dc69026ba9fa453cf58fe2809b11b05921108a82ec557a/2", "cf67694276e94b8b762a5fee3f32c03ec5fe21e3474c3577323db6902f53333f/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "402e690319ca95df9872d4704890e0e88ccec087a4ec295998769021aae07df6/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "a4a9e9e152060666302e22a36f8de161a73fe597959bcb87a738cccfbb0b75ef/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "ed820179875211f5a85808c7aec5e20b867592dda8d59084cfa2371d1fa9c487/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2"] }, { "id": 1196, "name": "Flight Routes", "solves": 2629, "attempts": 2905, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to find the k shortest flight routes from Syrjälä to Metsälä. A route can visit the same city several times. Note that there can be several routes with the same price and each of them should be considered (see the example).", "Input": "The first input line has three integers n, m, and k: the number of cities, the number of flights, and the parameter k. The cities are numbered 1, 2, …, n. City 1 is Syrjälä, and city n is Metsälä. After this, the input has m lines describing the flights. Each line has three integers a, b, and c: a flight begins at city a, ends at city b, and its price is c. All flights are one-way flights. You may assume that there are at least k distinct routes from Syrjälä to Metsälä.", "Output": "Print k integers: the prices of the k cheapest routes sorted according to their prices.", "Constraints": "- 2 ≤ n ≤ 10⁵\n- 1 ≤ m ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n\n- 1 ≤ c ≤ 10⁹\n- 1 ≤ k ≤ 10", "Example": "Input:\n4 6 3\n1 2 1\n1 3 3\n2 3 2\n2 4 6\n3 2 8\n3 4 1\nOutput:\n4 4 7\nExplanation: The cheapest routes are 1 → 3 → 4 (price 4), 1 → 2 → 3 → 4 (price 4) and 1 → 2 → 4 (price 7)." } }, "cases": ["d1829c1b7cea6d2563ea636e6e89b537450c50746cbdc19484b76f377d55f624/1", "f5b5a9a47f662445c3214bd77734732323f666b1129f6bedec1bb409c2ce93a6/2", "2d8fe6ce4098eaac1cd74b74d100b23018644e85be0afe3026647c936fa96d86/1", "3b0143464a1ae7207fd74966192571f3bfcbd2ac48fa9ead2d7cc972cd62ed89/2", "b179f3dde19fc5b800fa3bdf619590410d228b5862c1ffdc1dc410d73ddab707/1", "e61a197bfb2e52547c0e26d426f05ed4a00be3c2d89269d0258145fec3c9bc9e/2", "960f9fd35e65dc2b73015604bd1bd8f09beed4fdc02e036b0b5bf383ea7617c4/1", "ba030786635910218a596fff5281af371e598fcb6a493e055cb72c8f3cbca65e/2", "8eee6e7f66b41670b0dd8defca32e9f7be523f9957bb54906ef620208b842824/1", "33ea41e31d5be4e0419bf06eb92573e1669b26215e5d2300dfd85e76f723ccd1/2", "e4987ae58689db1a869589a5906b21a7e481c046a43c74b75ce19355894bd361/1", "aac840928b1ec1e8b944627e04450db2a1a7a5d684b2ef725209f110796282e1/2", "23adfcec1892f739ad4a0f40452d2d394bc5a1e4ade53b7c9a02765cd5df869e/1", "48cc6c64523bb519d7459e54b6567c7a1a3ef364ef8602595facd23a97669a01/2", "ace58f8f5867eeab869b9d3162cf9f83d37be4f456a269fb6bf3ea8e2bd4ebbb/1", "346fda7cb21c5c661ce09161e19cd5c626f8138b51577f2c1674eaaba185ba11/2", "6d5cfd1a4f370f9bf19467bafecebe5fd0160ed3a80d996ada8255ca1e7b01d9/1", "4258bdf75f80411f3d8f0fb8893f3d71c441f4b021ce445e0860da3ba66ea462/2", "7d44767e3e5e211021b17d0830414556aac6e59a19cb51ed278dc622e67793cd/1", "07b1ff0b6aa512fbbecc5fe5acd06fa8d5bbea118df7f803b2399e1d45f79523/2", "870442daaf9900342943f9438e7261396322cb4c29545f6db6f7311ad7f20b90/1", "2d29bb7ce9b5fb188b3ab4cb9720790d50045f38ccb422faf6f831521cc74c60/2", "01ef92b258d563e88989f48293dbe746782a93b04fbbc0b9eda30633990beabb/1", "2d29bb7ce9b5fb188b3ab4cb9720790d50045f38ccb422faf6f831521cc74c60/2", "e612ac78c484b2f602cbcb03a8a174831aae7437ba757c71d75ff926a008a8ea/1", "90e91479f45f11385cace49f482f1a623b6445741419d22f0be9f5ed9263dd83/2", "703b927623c3e4b8027fe7d18769e36270b771bceeff3bcdfa5c51a0da6c0cf7/1", "90e91479f45f11385cace49f482f1a623b6445741419d22f0be9f5ed9263dd83/2"] }, { "id": 1678, "name": "Round Trip II", "solves": 3036, "attempts": 3577, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Byteland has n cities and m flight connections. Your task is to design a round trip that begins in a city, goes through one or more other cities, and finally returns to the starting city. Every intermediate city on the route has to be distinct.", "Input": "The first input line has two integers n and m: the number of cities and flights. The cities are numbered 1, 2, …, n. Then, there are m lines describing the flights. Each line has two integers a and b: there is a flight connection from city a to city b. All connections are one-way flights from a city to another city.", "Output": "First print an integer k: the number of cities on the route. Then print k cities in the order they will be visited. You can print any valid solution. If there are no solutions, print \"IMPOSSIBLE\".", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 1 ≤ m ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n4 5\n1 3\n2 1\n2 4\n3 2\n3 4\nOutput:\n4\n2 1 3 2" } }, "cases": ["79331d665ee34a73def55676df11d5a992ad09c35781ef652881f748fe7f20d1/1", "a851de00004a3961c3cbc8589e651b8261058579175344d41699b922c9744752/2", "9151ec5537e2034c748ad7efe3db6751fa0c228cd2dc9421321c42852fe1fea0/1", "25358ced2e84d1393a9b21c8ec7766539fa429e3bfa19ded50b15addcbfcaf40/2", "3248225aa5688f24cfc8325cb7a33fe9c1af6f4eb883d67d36660c4b8d169c7c/1", "738a2d48ad40e46803c8e085878b2efcf1f4c74f3d78c9d2301100042f5e69df/2", "d53165d42a3081253868c8fe295fefd1d52b8baff59032a128452716ffec48f6/1", "c015ed0fca86df43e15a263f2b5361d234fbea4fe1f28a049777951ac6e47680/2", "801a905d97cd6d3e8f0c19145f2fa74e00aa53682fc7257cb4fe69c7ef0471fb/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "b43710decd73a5618928aa5b9a7be4c5265f189600905857c3a797e6cf3d0277/1", "2eff12e4b7a25242ac6191c81b34c92a1022d276b39677a9469a0c11590738c8/2", "d47e710ccebe6b3b317457bb743b0ebb1cae88cfd0b4271f26eb64e3e09777a4/1", "c87f89b8812bc77384bbd3c87410305250467697acd9794b360fbf1a026f6114/2", "701f30dfe59fa4afd1e076114cb46c1babfde72a16b17625c2c13b85f7b43a63/1", "5add73d4c472143737d2a395985b232bcca9b99bbe374cd6b5a371030e087859/2", "5415b968218ca816037cf6d85292968f0a4d7610764351c813249ad274a035bb/1", "567de584a785a99465c43758be447aee220d567b15eb7d3abeaa866662c343a7/2", "1556bd8f018560ade46523d0f17f9e7d53af3d6e43561e61fc0f68d36a01da37/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "745c7d7838bbddcd9d29d237d242be1efd70795273cd75f72fef9726b1d0bb32/1", "2873f8f015b1492736c83cfa367f7502a09cacf42340a8db2570bbf62e8fa6d6/2", "7219e739ac6abf6a39e141de2cb2077c9232bf435e87f0480dfa0c026523e347/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "cc6f5b25a2db416e9b032d4583f41028a780fb51fa6fb469cd956cc116b78358/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "0a1c4737f7abd82597cd6df170f8ed92776d0a20b3fbbf312c0f6a4e01b3c238/1", "d7d371bf842e9aff827e5b5b91539a61b5d07b68dfc9bbc9a7ba071bf8b7f34d/2", "4a4d6b70b112f632fce26c62d2132f9f9bd6d3e47efcf543698fe7b07eb58dce/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "319a7106ae8c1d29d54a4baa5b2a317a791413c76556ba67788378e8f8382ec0/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "65e669d6d3dd09990c6eab0ea4e41ccfbe3dc1c74d373e9cc459e4e86f5c3189/1", "ec0666bcb653323e1b21947b85503d24845b691b7f1aaae93ca76f0ef88add51/2", "e1055972d26a7f83589286f55476b9254ae7052b0df2768c1919f19fccbf53a1/1", "991a0c4cca07a091bafbfe94d47c19721ffa4ec4ffd531b85a90927531f06693/2", "901ff4f665854ee698adc1b2692c9b4184420a154cd93b4406b787f3e0c17470/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2"] }, { "id": 1679, "name": "Course Schedule", "solves": 4190, "attempts": 4365, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You have to complete n courses. There are m requirements of the form \"course a has to be completed before course b\". Your task is to find an order in which you can complete the courses.", "Input": "The first input line has two integers n and m: the number of courses and requirements. The courses are numbered 1, 2, …, n. After this, there are m lines describing the requirements. Each line has two integers a and b: course a has to be completed before course b.", "Output": "Print an order in which you can complete the courses. You can print any valid order that includes all the courses. If there are no solutions, print \"IMPOSSIBLE\".", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 1 ≤ m ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n5 3\n1 2\n3 1\n4 5\nOutput:\n3 4 1 5 2" } }, "cases": ["09bc11853898113d82340df91d1c2459850a8affaf12384f0e0b5225da9c7955/1", "3c63538cff7c16f89b035b31621aeaaa1957db50caaa7d9ae7050c795b2f3e39/2", "8645fa7ef7666795dd694c9132232315a145c173bb05b70951daf8c60d2429b2/1", "245854870c0a2b97023f1b84e89bf043f792b26b2fff390199ede4fef913af48/2", "eb043c4ea971e6561824269ff41931c8a230b1ac15487dc93acbb056b67977dc/1", "70e104a112f928d2082394d2091fbd7cf3bb67f79f53da75c7217bdabab66739/2", "98774d5011458e69ccc10e375767f51abbfba103eea1fed239d1e5779346fc29/1", "6e5c6a22c009fb9038a2cb337a76754fef54f1f8d1f0450df2a50a3ee3fbc7e7/2", "4fefa069d4add1f7c1cb93622b96e4735b12c71e464749901eff17ad4b68bdd4/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "1954012b8301a3e5f98ce307e66937817d5ce66275933713f0eaed308b049d28/1", "0ba74e1d4e6234e5fc48a22230bb8f3749fbb1236ecfd40230124441b321647a/2", "3a4a98cd2776e5b17e0f7a8e24691e0a4731e0d2932cbb240323802fe54ee594/1", "9a517563d4fb99f116d78ac589eae0b4d4706f11f142ec4dc380d8170edaecb6/2", "b9ed18c61d17bc5da1cd96cd72ab651e3b33467a9dbc8993e956b55166da08f4/1", "029940f95e70b97959574cb5570f2e818deb2bd569d26e87a49995fed84fc533/2", "2db75517d1211f3ac14bdf51b437779f6de7ac74206a66156930c9b35b111be4/1", "6c2b216a4fe254205ad4e28bc7d392a584ab5c41fd9dbbcb2b1a0c69d53d37de/2", "3b86155c7755d3177ca9224eade01eb3ad026dbcf46919631edef3c5eb031183/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "054a2b252918fbb5d4b89351f8b8f292c811fb088e1bf7d13d87945c09da1753/1", "fce65a7157e06e7a587b48442b2deba936bf667c3d14bb698d5b3fe51a8dde29/2", "745c7d7838bbddcd9d29d237d242be1efd70795273cd75f72fef9726b1d0bb32/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "de85ecd179f35e8de345fc92a877636eb5f53cc9a4fc1fdb56f65299e4c6c69c/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "cbd72ec69969b0ed0aab170c430a10587c9bee0fe2b4a033d4f48f8c7f6a1b04/1", "a221bc5d3c0d6b606392fdb96312713f14e29428a77a2adae59d49547d97142e/2", "9f9b96d7adac9d671a3bcc6e93f27b4af9c56ed600e80cd145df8e2b296a0cd6/1", "5ad576077b3bf25168496b9459c96774c3024f57ed037fa14dd1bb0062a169c5/2"] }, { "id": 1680, "name": "Longest Flight Route", "solves": 2778, "attempts": 3605, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Uolevi has won a contest, and the prize is a free flight trip that can consist of one or more flights through cities. Of course, Uolevi wants to choose a trip that has as many cities as possible. Uolevi wants to fly from Syrjälä to Lehmälä so that he visits the maximum number of cities. You are given the list of possible flights, and you know that there are no directed cycles in the flight network.", "Input": "The first input line has two integers n and m: the number of cities and flights. The cities are numbered 1, 2, …, n. City 1 is Syrjälä, and city n is Lehmälä. After this, there are m lines describing the flights. Each line has two integers a and b: there is a flight from city a to city b. Each flight is a one-way flight.", "Output": "First print the maximum number of cities on the route. After this, print the cities in the order they will be visited. You can print any valid solution. If there are no solutions, print \"IMPOSSIBLE\".", "Constraints": "- 2 ≤ n ≤ 10⁵\n- 1 ≤ m ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n5 5\n1 2\n2 5\n1 3\n3 4\n4 5\nOutput:\n4\n1 3 4 5" } }, "cases": ["fea2f69b7052cf9dfb16e2996243d94291b6d1363861bd02d98edc135e1035ed/1", "fd858f79ee7c1c8e9e6f575e6bb01aa0adab929e1a9206f02ea4f2b4e01e1f86/2", "c171901ad61e39bdd52796b183f956438d44365ef51435ae03998e10747f8ade/1", "1dad183b9d7b182580b2a5fae102913e4d6c4ecf66688b25a33f87472725283e/2", "d1fb98d688171896b5828c60bdf99f71eda59e7cbdea7937ac2f5c3cadf4262d/1", "c5bcd60c232c213c630e630f63e093faa8673c2cc1c69b3de54de753afc76db7/2", "2dccf18e9e401b2603057a038eac7b8bcae3b6ab5d1c9d48f0787e02375b3276/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "9b50db239c131337b7f9728e8544a4422839da1bde388c6bae6921ed39fba188/1", "3cd70fc7a2739003323dc6ded1c3974cc4c0bd13c3fcff73b8afbd0715e6066d/2", "ca5d135e3e646cbabb8f684c36b5c1a882bec97f79c3c7aaae6d3df395e7b667/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "41ecdec502c338bfe61ca747da3d4ed3d86c1815d078e285251f079fc94087bb/1", "47544f40d5a26be554f924b36fbcc624791383a674bb9fd62c2e961911b79e09/2", "ab3a8d89bcf470d56da37809e02057f47c19f2014c486071348b2c571abe76f1/1", "95adc8319c268223b3258ba5550023c5eab5ff69c9919a9df0ee4ad20de29a0f/2", "9f90381a8d9593e7407725535fee95cfb8b1e95575278199db956e193ccaa01c/1", "988a428f310603ec3327a5f529e21a0b466dc73592be69b8139cbc5c7e2f07dd/2", "9c98d56efebe3bd5dd660e29a06bd2fe1cfdf8438f4b53af0e098e0834b6da18/1", "2e2c5d8a086e368847edf7f4d099b1e0903d00af28e36a2cf77624c20382656f/2", "054a2b252918fbb5d4b89351f8b8f292c811fb088e1bf7d13d87945c09da1753/1", "ceddf5b74448f8436a84cc5a19e885f9ba0d5ade23a7071db614c5f22a9901b9/2", "783e2b55fe7ea5f29dbe2f6da02f331a7bee13f5a9885af8d8e7add198cf355c/1", "280287d486bcbb8ed09c65aeb6dfcc9636d8f4542f9b1634d19b05986280424f/2", "7219e739ac6abf6a39e141de2cb2077c9232bf435e87f0480dfa0c026523e347/1", "c904f7681caa1d1881fa5a4d820074fdbd5c53e94d0702329d1ee83b742bc8f8/2", "35809816940c510bc572624bb92b6bb7a7a8f3e2cc70bb84ec239007ac5039bd/1", "5b36a24aa0ab8d08bdfdbfee3fa85b24a1ead8557a521328fa21f5e45f1f71d0/2", "cbd72ec69969b0ed0aab170c430a10587c9bee0fe2b4a033d4f48f8c7f6a1b04/1", "cd6d3fa80a2ecdc22a97954ab9b05c68b23b1a9c99e06008eb69645d40dc6eb7/2", "ff92a9222f6d8c73d539f4277be52d46ca59cef50820c61e2384cdfbc3a7049c/1", "22d269f8e9fa1ed8fd899c0356a27941848577ec7715bf1da2af49429950ab54/2", "9342f23ea79944018fddff380b00e9108935c6a0bf18545dd4711df22c344576/1", "a59da35e553a8b23a08b731223fbd3b4c7e0717d7b0b243cd8f8baf198b30788/2", "d1356c5aa786f6ba36e74864008b19331699aaa52049c1c8b835c5b8fd3ecbfe/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "a14214de551a0a83d83ae226ff1d9b0f3540b347217f7c16d9c60c97a0663b57/1", "5b36a24aa0ab8d08bdfdbfee3fa85b24a1ead8557a521328fa21f5e45f1f71d0/2", "194ecbae29755a338d652972031165c9a11cf59c2eacfff42b2239c2454e3b34/1", "280287d486bcbb8ed09c65aeb6dfcc9636d8f4542f9b1634d19b05986280424f/2"] }, { "id": 1681, "name": "Game Routes", "solves": 3087, "attempts": 3456, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "A game has n levels, connected by m teleporters, and your task is to get from level 1 to level n. The game has been designed so that there are no directed cycles in the underlying graph. In how many ways can you complete the game?", "Input": "The first input line has two integers n and m: the number of levels and teleporters. The levels are numbered 1, 2, …, n. After this, there are m lines describing the teleporters. Each line has two integers a and b: there is a teleporter from level a to level b.", "Output": "Print one integer: the number of ways you can complete the game. Since the result may be large, print it modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 1 ≤ m ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n4 5\n1 2\n2 4\n1 3\n3 4\n1 4\nOutput:\n3" } }, "cases": ["a7d5ce28bee352fa1522e429230cc67ce6e43c709946fe47461c4631c5c459e8/1", "20d2add851bf39edcc6b5e830930f962db7e19dffa2cab8610eed551eda6c302/2", "1138b4a192141ba978f0bf0b6f8a4205d5d8df50967aeec48afc71c3050eb25d/1", "238903180cc104ec2c5d8b3f20c5bc61b389ec0a967df8cc208cdc7cd454174f/2", "ee062bc0fe029a4900a4936324363d795048e24076bb510b13cec3c62a588491/1", "9a92adbc0cee38ef658c71ce1b1bf8c65668f166bfb213644c895ccb1ad07a25/2", "f2ae76f9567b2ed5882377e5d3aa10b81a1ceb20ff86464cc0022656dd0532a1/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "979c96fbcd85bafe28d4fd9d6fac39c144a39d27b3a283dfd8bc4b9c915f8d59/1", "f14b4987904bcb5814e4459a057ed4d20f58a633152288a761214dcd28780b56/2", "3d43ab5850d92f711fc44777d45a1fbe078342d9b455d725035fb96bf9757d3b/1", "ca78ba41f11f97fe57573b4307888cccee12168504c54371640cb130a3748f72/2", "55f80d2e67051c3e01004b318d4fad66aa2a60c4b2a6fd22a742a05c79c3f5cc/1", "45613db90ae28e294746d9ad4ff1e86917839b98bdc2011a2fe3604c44368a0a/2", "41cd9e88da2b6fd192fe92ad1bca60b57825f331b85276d38e69ef9c670e6e85/1", "1d0844a6ac4c871ab7c40c6bcb7df75df04abce97c605c9dc266f4a0bf88ddca/2", "bcbf70bc6560de4800c32714c01594b080bee5ecc6e924bb6bf0c78310c42266/1", "d7dd66d82d916e0136e93cdc5e0b5aaf61b462968098398fd69c2b6515952309/2", "0f595fcbec542e3fa57dfbf0bddf7f807a19f7e4d7dd792797101b434e736a53/1", "4503feae62709213f51618b1402a5735b38e05111c874fcb32f00bd826a9d675/2", "7219e739ac6abf6a39e141de2cb2077c9232bf435e87f0480dfa0c026523e347/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "d1356c5aa786f6ba36e74864008b19331699aaa52049c1c8b835c5b8fd3ecbfe/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "6b5c3a7fd9abdcf052d5f984ca0f0e626103aaeb21263c27a8ab73930dc0d341/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "59117d9b9546051a7d51d002af6ce60f767bd04d8397f47658cc25db63c51370/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2"] }, { "id": 1202, "name": "Investigation", "solves": 2210, "attempts": 2398, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are going to travel from Syrjälä to Lehmälä by plane. You would like to find answers to the following questions:\n\n- what is the minimum price of such a route?\n- how many minimum-price routes are there? (modulo 10⁹ + 7)\n- what is the minimum number of flights in a minimum-price route?\n- what is the maximum number of flights in a minimum-price route?", "Input": "The first input line contains two integers n and m: the number of cities and the number of flights. The cities are numbered 1, 2, …, n. City 1 is Syrjälä, and city n is Lehmälä. After this, there are m lines describing the flights. Each line has three integers a, b, and c: there is a flight from city a to city b with price c. All flights are one-way flights. You may assume that there is a route from Syrjälä to Lehmälä.", "Output": "Print four integers according to the problem statement.", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 1 ≤ m ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n\n- 1 ≤ c ≤ 10⁹", "Example": "Input:\n4 5\n1 4 5\n1 2 4\n2 4 5\n1 3 2\n3 4 3\nOutput:\n5 2 1 2" } }, "cases": ["26f78c756f362d8047d52245a48150370777c286f52e7a75481b4420efeb3a70/1", "d2db154404f65e32b1bf94846eeb3f64b3dec4affa3d806272c06ced407e524a/2", "08e44698999ddc419c6424ba48cc86e8c6a823b9a77d325886c41ba5bc4803b6/1", "a64165527e66b3428a27c3f6d66a1a6ccaee0d964046c209eb2363bb3cbf6fed/2", "c53e53677aab2e75beeb48424411202ff547e58f39df172bde89257f9614c30c/1", "fbd402397ec3f9da63f21b9ae21714a7ac7549fe5ef5d2b317c44c6f9feee113/2", "2a16407bab5cc718ca7fd1c7930a1e12db79475cdfe1a274ee7d1158b16acca3/1", "5935969737af57eff315dd41990ff8d794a5a6a97a39e3ba5137982e475ce9aa/2", "469ff86a95c528e7166e80d533803655085aadcc1bb93101a51c478c0edb4443/1", "a21c91c29e118603af7bfea9ca031118f6a85c84012bd4b3ec939832f9393829/2", "481a3f3c9c80d0ea38618b5fd1f6ac776680d1262bc5ffb23d13aa45bdf776fe/1", "6682765994325333294fa5241f4572fdc600535ac86547bd72ac3072e91f4dc6/2", "04ce37ee5698d174790a6bf3acb48e3cb98685baf4140ed5ff1cbea1db671227/1", "e8b1958413acbbd1dffa07a6c2c8a3b8c1b6fdef7bfb6b7c23bc6a2f619981f4/2", "baabcc2def48f40ce0585f6f3be93e882e122b3c5da2f8662db8f31f9171787f/1", "8a357ccb723b522deb39622805e272271f0210d0f6b006d5cc069455b3420c70/2", "8a930fd95e8fbf9a3f840d0f067145c3399c7b7cd8a5716e217c3d5d0cd8c619/1", "0e5ebd2b308d46772d6bfd22419bd07784a61f36c8bc489da0acd5ad0976b95a/2"] }, { "id": 1750, "name": "Planets Queries I", "solves": 1787, "attempts": 2320, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are playing a game consisting of n planets. Each planet has a teleporter to another planet (or the planet itself). Your task is to process q queries of the form: when you begin on planet x and travel through k teleporters, which planet will you reach?", "Input": "The first input line has two integers n and q: the number of planets and queries. The planets are numbered 1, 2, …, n. The second line has n integers t₁, t₂, …, t_(n): for each planet, the destination of the teleporter. It is possible that t_(i) = i. Finally, there are q lines describing the queries. Each line has two integers x and k: you start on planet x and travel through k teleporters.", "Output": "Print the answer to each query.", "Constraints": "- 1 ≤ n, q ≤ 2 ⋅ 10⁵\n- 1 ≤ t_(i) ≤ n\n- 1 ≤ x ≤ n\n- 0 ≤ k ≤ 10⁹", "Example": "Input:\n4 3\n2 1 1 4\n1 2\n3 4\n4 1\nOutput:\n1\n2\n4" } }, "cases": ["823e96d40e369b38f6c3d5d9071b0d73f27f0bf5b42c4662f263d609e5293a4f/1", "7932d3ebdabd63e4db40a604a0227f4dcf9f03e0282bc9acbcc65e5cc239c41e/2", "1a166f8bd6a7f5ce39a0187d7f3c09767667e5d64b12210232ee6563a1cabd50/1", "9538e71364e030fa5cb12310065b555dc371cca0eccc44a9530624b5be45929a/2", "b494b5cbe341f5e11aafe1a0a6044ef5d98dc0c52eeb718f0e015748f42a7468/1", "4444499c75fabfa96da0f69a451b0fb43e6d4c61d699bfd83a895152ff9791aa/2", "6c63caf83e9b950db718b7df8ef4f465525223afdb82c7ee6692f489b46b0633/1", "04e4a947218e80f6ca984b8baf4e78f5832ccd2b1b59f8aaabe304f2e6935931/2", "e151fdf2430a9ad56c7e1fbd3c9ff494ee58394dd14ba2039fe6ac1a01e8d37a/1", "04681266dca8aacf77165ffcc77bc0d43d84db4c53955435db1ec18cdfb55fa8/2", "1831123955cd0d33826f56f10fb9f557d541f20f5cade362404b8f9b8ff3d259/1", "cc0912824c012d30b49f56ebf49e7bbc03328951bff50897dcac12b3f6f28427/2", "1daae8121ffda557865bfb96d5238a34676a4923d1cda70bba39e803ab35090e/1", "47261d6c016fd1e1cdef5913ae0347e7069d5a2717faee5c627a678f2f7305d2/2", "f4ddea46e39540712e8c452ef9939e4b26d9b8366d1f27db7fd8a9ea59556ac4/1", "fe0bcee1e5a7b0bd2420606f26891700e92a6ec271c3bc9b169e26ba30180d8b/2", "90ddd015a93bd06159f521bd422b391f1589fd2d371c6f6dfe7eaac7141c2dd2/1", "fe25fcd9ef6beb4fe6d5f32b2a77d22a237acde588baabbddaebe98fd8332ed8/2", "1f8a739cb32315fdd5d3e20e39cdbd71b5ce120e6f8176891eecb8702473bdb3/1", "1c1a50385c05eb4bb57a475da5d09a8c78d2c1f757058b8625c8b9e304999656/2", "8480a8404a501630e2bd63e49df548ee785707e9e862fbe6ef3fe9c91ed08e54/1", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/2", "00152ac2db409573111ab181fffb939040ce9f796a16197cdbb98e61c6f770e3/1", "38787fb01ca05cea0c57c8420f408aebf01d66b0f1a52743a944481a24635666/2"] }, { "id": 1160, "name": "Planets Queries II", "solves": 877, "attempts": 1063, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are playing a game consisting of n planets. Each planet has a teleporter to another planet (or the planet itself). You have to process q queries of the form: You are now on planet a and want to reach planet b. What is the minimum number of teleportations?", "Input": "The first input line contains two integers n and q: the number of planets and queries. The planets are numbered 1, 2, …, n. The second line contains n integers t₁, t₂, …, t_(n): for each planet, the destination of the teleporter. Finally, there are q lines describing the queries. Each line has two integers a and b: you are now on planet a and want to reach planet b.", "Output": "For each query, print the minimum number of teleportations. If it is not possible to reach the destination, print  − 1.", "Constraints": "- 1 ≤ n, q ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n5 3\n2 3 2 3 2\n1 2\n1 3\n1 4\nOutput:\n1\n2\n-1" } }, "cases": ["89974b068a87fab1e869ed157a755984e34103a021bd366c9c10a734213f6a2a/1", "22750fcd8e3cf719423f44bdec134548536a6d7fb34488757c4bd5bd26d53b47/2", "1312cbcacdd4a1e23aad721628a52245fed15808c9254b38abb4646c53e7e661/1", "6e46b69c2460b9de5e641ae961601aed8ef5e6fbc19b8aa65677a63b5fae6122/2", "edae3172970d217b423b8c999de87c662563e4ab7f0d06ee9ef7620f0760b0ed/1", "8a9b97218c06d430ec422b128120452f66c88784f31b068e9a501b7cb4b4add4/2", "b21389975ccc5151a011a164a56df19682b5268c0aeb14431479314e468a6471/1", "91212934c328c81766e6f4e5c2b103dbd6bef3cdb20b04e8e01dae2579ef58b1/2", "080a3a9db52ff689bdc844d8854e6b2431dc41a1a594573b5f52d4465595607e/1", "9fdf6644094b8d1b4d9ddb8bc0fdf670554105939e0fe6b2117db541f275a826/2", "e27f532cdbf26f6a1980c2c6d291a5a7d43b8f21f0fb06fe2fdeedf1f0514ce7/1", "a1c93b2208beccc4d4a6bd63eaea2df51f542365c04f94bc5a793b586a5398c9/2", "2e52da35f12664ba755de06ed636de91830d102babc555c0925f6e9012be256f/1", "362a3598085c9758a206aa7599d0cc0042ffb738b0cfa72e91a2b75d4eee010e/2", "8804ba6f383f8ba03af4d1e25c8af96f6cb1af1e335779d78fe6990cec4ff78b/1", "96f25d8fbdafa86b0dbcc182f1d9bbcc69bf62158d1f0709b3111ec12067e660/2", "71467a6807009811d8f732153267184258714537dc56328955c411a668433f3a/1", "b21c3c29250b4f3982ba74d4fbb7222c7f6790397a0973225f6106f9cf665047/2", "4c42fc527b038911a751c628140d806ad2616112ac267fe7b32b41cafd7bca20/1", "6dc694c23d01015c119080aa12baf3fbe61d0318c3158c0c77008872a79ec231/2", "e92f3b20f5ed6e9aa651b9ff9c0b99a6c3559e885324deeb0db59f06a8d0f4ed/1", "c71ec77cef567a7284ae41daa0e1159527cc72e79455ec5f1c17404b3b159b02/2", "8ac408cf0881ca8aaaa335082c5f18108807b136a6f9d2366864b79de1934b9e/1", "00d9cd208c4bb685541067ed529222ed418e5cc75d71304d8ef159f3ea3aa50e/2"] }, { "id": 1751, "name": "Planets Cycles", "solves": 1298, "attempts": 1446, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are playing a game consisting of n planets. Each planet has a teleporter to another planet (or the planet itself). You start on a planet and then travel through teleporters until you reach a planet that you have already visited before. Your task is to calculate for each planet the number of teleportations there would be if you started on that planet.", "Input": "The first input line has an integer n: the number of planets. The planets are numbered 1, 2, …, n. The second line has n integers t₁, t₂, …, t_(n): for each planet, the destination of the teleporter. It is possible that t_(i) = i.", "Output": "Print n integers according to the problem statement.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ t_(i) ≤ n", "Example": "Input:\n5\n2 4 3 1 4\nOutput:\n3 3 1 3 4" } }, "cases": ["df297b5fc75833f4540c3e8a1d48bf3d1cbe39720952b6867470e2d313f62002/1", "eb4490d03c1aef0f49cd96de1f9fb4e8d315f3e4064393e5341bf0aed74859dd/2", "b3d27753d290a4ce2e844ac6e8c1a172df6c1426314089a1db2afb7ad2ceb68c/1", "78c4ff3ee523358fa36f12e23e6c435c316cfb86fbcf8cd0cc668766eed04de1/2", "ea2409ac26b10cc952cc36fa6ca63d8a5101b6351bdb80ec0e415b96ff1f27c0/1", "784b1b1fa43e27aa8ab2d5a7568122db03fd2d9798c5418f2c82b98adef77df0/2", "1659d4a62f9b4064a8e22b8444cc515b4bcf0867731e9304d431044f37e80e51/1", "6b0d46af75b06bf660b9cc50b23adb11c9172b3b6f039fe0d39b296c53890cf5/2", "2e09fdd8625d1cf4ae7cf15693f0ed59a7d0342565c9c1403e7a63f5844ceea6/1", "79583d9e1ac2d40ca498a295352824bbbebc14902dff8619e23e04897dd00de8/2", "0be5594fa61710760bd37b2df0a27dfcafac84e8d0e0f9184a205ed44ece3146/1", "fd6757f9693fd8f8f97689c544691ac8e81279cf6c1b9c394777e6a955e63738/2", "19d069a1577bf0ca04ba13c31dabeb8de05f9e8d9fdc6548ed48df252403f3ca/1", "fd24eecdbf7cb4acd6cfc93f21dd578e611fbf88a1266c6a68026afed14c4f60/2", "96e1eb6de76df218d536d0490f648c71edf1b8bb1582467d438abf781318750c/1", "a5d777a6e63e06165e1f4b398b5e9ac685442dd0f3d4e62071738269a542d235/2", "8c9a9683ea3df70b375ea6f3e60a7fc4d5a923113a408ef1f7c7de8e951c8192/1", "b3dc4b518657693ef30e0c3638cb561e5f8b56a288e67e31ef3ebee81d6b32ee/2", "8c8dd2f98bde2d4dc08271f1bf2e75198a8d24c796d3069fd77c034a8c691188/1", "f5172397efc6a8da79eef37019b1661d0e4e5306febb15067655adf83f7fe067/2", "f04ecdfd6b92112f6f990c1c5bea4309745a65d8d51dab3ceadcd31c4ec8a97f/1", "0f7776409f404fce88505203586fdf63a2315e764e2c27fbbe0bd09623eb73b6/2", "cbfa4e732f8808adf082b04cfb616c432c67092a6c406892043ddec0ba9aaf04/1", "e22d52eeaafad7f9eac2b6fcaaac2b54bb61d603c91a53aa1edadaa1e3456381/2", "c02baac7d7c7dccd0a6897a52dee8228ac924b5b03a316c08404befd46dfe459/1", "9c6feb4a08bb8701aeb4a76682755c1f10d344aac66ef73460acb5fb33d4ffe9/2"] }, { "id": 1675, "name": "Road Reparation", "solves": 2779, "attempts": 2887, "details": { "limits": ["1.00 s", "128 MB"], "body": { "Description": "There are n cities and m roads between them. Unfortunately, the condition of the roads is so poor that they cannot be used. Your task is to repair some of the roads so that there will be a decent route between any two cities. For each road, you know its reparation cost, and you should find a solution where the total cost is as small as possible.", "Input": "The first input line has two integers n and m: the number of cities and roads. The cities are numbered 1, 2, …, n. Then, there are m lines describing the roads. Each line has three integers a, b and c: there is a road between cities a and b, and its reparation cost is c. All roads are two-way roads. Every road is between two different cities, and there is at most one road between two cities.", "Output": "Print one integer: the minimum total reparation cost. However, if there are no solutions, print \"IMPOSSIBLE\".", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 1 ≤ m ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n\n- 1 ≤ c ≤ 10⁹", "Example": "Input:\n5 6\n1 2 3\n2 3 5\n2 4 2\n3 4 8\n5 1 7\n5 4 4\nOutput:\n14" } }, "cases": ["d4503cca752e036b668bf9880b05b91ce16700e92be88dd3056a6a7633758c7c/1", "ea243e5457028e97f9bc93b37a72f8e80ea61ae081911bb037765590ee6aa435/2", "57eccf4a7d3a838f1726852c409c2fa26b032aefe5b3595c8b744bffb07b3fac/1", "3840bc236ee03aacbb1ef7d5108ddfa347c59f10b68d4174affbb53140f31273/2", "61f27db988c11add4cbc20fa796570475682d59fa75e3abf29677b9ede4a015d/1", "32c2643e0dc65524c9f1f6f9f00937322fd68d59986bc381d9ff2285d23e353d/2", "e70dc31e3ebd726d94c4755bb75d8399c17bab4818c0c6c366cc4daef2e305cc/1", "f14b4987904bcb5814e4459a057ed4d20f58a633152288a761214dcd28780b56/2", "64747569654cb51d142afbc43c6e2e83a177520c010b275e772be8aa8d5ea7d9/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "9dd22608993511152c9debdf40bec86d2030d8a405f310e29fd9ea32b66e505d/1", "560694aef36f11aa07d5671d2fb3c0dc85c8ee1187355f723bf712f09c38ac22/2", "82582d57387c6e34e7bd38a5807c9c58d71c01f1e08928990453278447353a86/1", "b0bd97bce3912e735b44c044609b363b5585afde716d5a06d1d971eec50b0e8d/2", "3c1fa9c0f6687d7a87b594d9459c9704a42f8cc56dfe42283beedceadeedefb2/1", "2268fd23a48552912b73b0cab598848fd16a764184334654b26a3e2a92f714a1/2", "414bc15d9148d1b6ece8dc48093b537a201c06f52e74dc9f3d1fe143830416c8/1", "d2ace88dd55c4d859f23b63b1a5f4d14efefb36fada50dbfbdaa97ec2de3a64e/2", "0bd363ba9a663b6ac82e477d161c50f9716b7527bf24e437a4cdb7055f0a0896/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "d8ae2601be32d203050f89734adaa53d60f14643eeff14ed5520f3a5bf2b5ef0/1", "e2b4f06f8577a09b16af826767aa34615fd7efd062a819e56c9450856ec51ecf/2", "15cb2c680b8b1854aaefd803072a5965c87121deeb9f3a416290f1103fdd5b3f/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "d31400a9196af8d78037127201e471353fcd1f5aaecc9939ea4740a054559c0f/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "1661d607d0ad8177f87e44ed77d1c2d7d89ed645f3221cf45b00ea2318c36d05/1", "9a92adbc0cee38ef658c71ce1b1bf8c65668f166bfb213644c895ccb1ad07a25/2"] }, { "id": 1676, "name": "Road Construction", "solves": 2859, "attempts": 2960, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n cities and initially no roads between them. However, every day a new road will be constructed, and there will be a total of m roads. A component is a group of cities where there is a route between any two cities using the roads. After each day, your task is to find the number of components and the size of the largest component.", "Input": "The first input line has two integers n and m: the number of cities and roads. The cities are numbered 1, 2, …, n. Then, there are m lines describing the new roads. Each line has two integers a and b: a new road is constructed between cities a and b. You may assume that every road will be constructed between two different cities.", "Output": "Print m lines: the required information after each day.", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 1 ≤ m ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n5 3\n1 2\n1 3\n4 5\nOutput:\n4 2\n3 3\n2 3" } }, "cases": ["a4b7e1500b1ed8f946acfa5cb9a5953be8c45f56647145d187adcca310168302/1", "7c39dbe58138e75015f99f72f16967716c600d97cafac92774eff591c1ba3294/2", "d4c01030d0f0ef356ead548a7c3ca58129247ae9dcc9d9d76b9a15bc5cd845b2/1", "245d966aa4c2bfafedb5b457a31312583682b1cd08c5a1342953a900497341ae/2", "81a9724f48cfa990e247acad2ec0ded81287726e04fab9845771bc4d3237ec45/1", "245d966aa4c2bfafedb5b457a31312583682b1cd08c5a1342953a900497341ae/2", "91ce94ccedda15675f54cea946bd1a479f834109e35c0babe0daedc9bd533c2d/1", "92c1176590c3ce9eaf44790455dba0c082c93ce0f3a362c1acdfc25d0a3bf050/2", "d24cb017b75a3c056e4ef8280cf86b65fbf18aa8f34adc819ab53c464a3299ce/1", "4dec8ad723b9e7c06a3c0b0aef1e8196582aa38eb6fcf70311747cc38085925a/2", "81d9a8e3c6cf34aa6e2e2ee454170c41886e987dc6776967c223361c90ba8e58/1", "54882efb3df2cc7fa07c3ccb3698f9d99b69bd1e2ee5763c52f33cda6d8daad8/2", "92273b6aaeb4058f50514704ad370bbc6a01714be7e559413ce6fe0893b1edc1/1", "54882efb3df2cc7fa07c3ccb3698f9d99b69bd1e2ee5763c52f33cda6d8daad8/2", "14d545f26a1f0299a69094579c8f4c527012e561b878a02b63decfd7a58bb6a3/1", "4d15e0644a371d86f7c0bde598168a55a89cdd854900d0bdd62a677213da4b1e/2"] }, { "id": 1682, "name": "Flight Routes Check", "solves": 2553, "attempts": 2818, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n cities and m flight connections. Your task is to check if you can travel from any city to any other city using the available flights.", "Input": "The first input line has two integers n and m: the number of cities and flights. The cities are numbered 1, 2, …, n. After this, there are m lines describing the flights. Each line has two integers a and b: there is a flight from city a to city b. All flights are one-way flights.", "Output": "Print \"YES\" if all routes are possible, and \"NO\" otherwise. In the latter case also print two cities a and b such that you cannot travel from city a to city b.", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 1 ≤ m ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n4 5\n1 2\n2 3\n3 1\n1 4\n3 4\nOutput:\nNO\n4 2" } }, "cases": ["78c4f50133de05038a2849c05dfa5301b892d5474587937b2585c63938b7bd94/1", "f74a7b079e91e1a496ebcacffa5c5d8ee4928e27f43189639f97ffec39f7553d/2", "18ff5c09baec5d528177ba7138f703d68c17499d49ed9549f94e478707114cd4/1", "537633b11f966a4c5bcdaae349d93e70f28b8be49808d0eeaf724afebf76671d/2", "beef6a08e75081cb18965245f4302e4d55243044c40fb284cc0555a5620c7844/1", "dcb7a9950706c332346b90bdbaf679c50635b781ccf2f04d440056bee56d6966/2", "7d524808caeb754046583a57cbbcca4b59d1d7aaad57450509168ae644d09bd2/1", "a46bfc50bd9c15e894ef7df2290e1f3e36cc2febbbb445d6a0458976a76c10d2/2", "c9bccaa4de69f4a71c7570f1c9ff6c9069e72b7a885309695b57176cd117ab1b/1", "a115e91c2e84c3078fa06914eff28d07590ddfaa47a55fb4f31dd7c5b3566194/2", "8793b8af3f484aef780c2be770d957ffb30b89db0dd7629f3a41ac9f1b38ca1e/1", "b98522add1c2b2937c210e7ea14293964225e026033fd9a3d4ef3bf2a6ace1a6/2", "d43e6a73f5238a24379d1b1a4bc6d4e9185181abaac24ddd5bba5054a99de5f4/1", "65d69e0d99971c36ad250b1eec3e430bf8bd9f268c58e22e6962e549f1589066/2", "8f23446c51d2e04f2d0eef0062532735f2b8668e3af0399f9158f5c6367168ca/1", "856677a07701a5ff6a0652ef26835de41287c4ab5dbddd8423d21035f9df4f0c/2", "8efd98420890798a8294e7fefe2ec2421ab7838a194faa09e5adea5960312da4/1", "93a5b829129171de2090942475f4d9605f1bcc134ef200a48881e77088712161/2", "9b205bad0f6d0c6bb54668903209120766c4a22bde76c5e9b3906a27a0c8be69/1", "a115e91c2e84c3078fa06914eff28d07590ddfaa47a55fb4f31dd7c5b3566194/2", "d0cfeab6968065660418b4eaa01afa42d8c57b69e2218638f99346fb6a9cd551/1", "0a0d9e6de87c52cb09391e26d2576ffb8b6123fc70d87670b7cbc337de805ed8/2", "5abef1f1d5acedc846016115cec523b9a6bfdaeabbb41c3de82020db64971bc0/1", "a115e91c2e84c3078fa06914eff28d07590ddfaa47a55fb4f31dd7c5b3566194/2", "7219e739ac6abf6a39e141de2cb2077c9232bf435e87f0480dfa0c026523e347/1", "0a0d9e6de87c52cb09391e26d2576ffb8b6123fc70d87670b7cbc337de805ed8/2", "c76539910f61aea5a577979ef6f02e50afc8eca6f2918a9defb43002e06d7228/1", "a115e91c2e84c3078fa06914eff28d07590ddfaa47a55fb4f31dd7c5b3566194/2", "684735f378f9bf3c894b30728367829852450903751cdfcc4faec56ab63b3046/1", "32bc110a4817f726ff17049609f3ca082cd9050a2b642a39a123db469c664455/2", "f5c5e583808c61ef64c7c606dbd9f107efadadc78ef231dae68662e333a2d573/1", "a115e91c2e84c3078fa06914eff28d07590ddfaa47a55fb4f31dd7c5b3566194/2", "1d5c5df73b2e5ff4381b40931b3265f64b5845f4b3440837e99e1eab43d5167a/1", "0986884cc5fda80efbdceb85ae5b86dc09176dbeb51a867ed12de4cc228f3a51/2", "df6a97ecd590fc53d42f3b4cd65881a14fb3db38f9ff2dafcdf2d536740f94dc/1", "9692aae425ba0e87900cb41581bd9b712edcc1cdc8800ece616a9fcb11c348cf/2"] }, { "id": 1683, "name": "Planets and Kingdoms", "solves": 2153, "attempts": 2223, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "A game has n planets, connected by m teleporters. Two planets a and b belong to the same kingdom exactly when there is a route both from a to b and from b to a. Your task is to determine for each planet its kingdom.", "Input": "The first input line has two integers n and m: the number of planets and teleporters. The planets are numbered 1, 2, …, n. After this, there are m lines describing the teleporters. Each line has two integers a and b: you can travel from planet a to planet b through a teleporter.", "Output": "First print an integer k: the number of kingdoms. After this, print for each planet a kingdom label between 1 and k. You can print any valid solution.", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 1 ≤ m ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n5 6\n1 2\n2 3\n3 1\n3 4\n4 5\n5 4\nOutput:\n2\n1 1 1 2 2" } }, "cases": ["d74e6b46783f5603d6004cf45f0063ae04a733eb265ee8ee695e0d04392a0574/1", "c98353aaffdc857415cf367bf116809958cf7a097235edf09740d1e445c30709/2", "5aa01aed28f6a6f9aac6c64495d9d9e14f92ab485bd33e8ef95b75e52a09866f/1", "271a6f559fcf4351f876ef1b4e897c9ecb6af0c0790435c5171f302cb9e4211f/2", "1ead7831530118480c880e18f084a73ba8825248cbd7b73c89cf54ba029880ab/1", "836501ab8f22b8061e7ba1b66a852abc6b22dee1cd464ac303d668e07d126b33/2", "b83e83d056638a6e6614f951e81469741aca9c7eb1de526c0b5129ed47a927eb/1", "cea45d570b3af97f934708cdf87f4a76126eae6ccbc83c36ce7633b943439d63/2", "4a6a23cd22b5bdb933e59c3605ffa9ec9fa6d33be0a36d908d315d38a7eb5880/1", "91c788a5bfd4950e2c88c6cfaf7d27cbe1723e227c3873cc34d3c41e70066d6c/2", "2a9768b0bbbabe12920a03e3b4ddef19327c99f0c642ab9d6ae72fd5f9f7f339/1", "ca31f6b026be3bde778672bba086831e997b25e73ac8509456516be23104d596/2", "93ca0078b99dd32513f8582b76861ff4c772af67325fab93ff275be920469aa7/1", "118b1e5a192598a46c796f70608fa3983f34e4168b4f50f621c676db19dee58b/2", "85fe243edf410b7476fe95784ead6104f33f1bf54ceefc5d8613652ddbeb0db9/1", "c6eb27d14349c97261ddb317c85dc58543e7f5a15cf4fc0a59b43822223e2c2f/2", "b4650ee1b9184cb0744555d843dd99178a76f5eba45a32142b5df9c736884045/1", "46919b3ad6963d6eed914945cade5cd8bcca713f36f5aa73239df35fad23621f/2", "3a97e4217bf48849e35a689b59dacc19744f640bd7c55b2d0969dbaccdccb076/1", "eccc57f9d9dd72465bd6b8244a567cd51f932c4e7ac0f8101540c84c99682605/2"] }, { "id": 1684, "name": "Giant Pizza", "solves": 994, "attempts": 1106, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Uolevi’s family is going to order a large pizza and eat it together. A total of n family members will join the order, and there are m possible toppings. The pizza may have any number of toppings. Each family member gives two wishes concerning the toppings of the pizza. The wishes are of the form \"topping x is good/bad\". Your task is to choose the toppings so that at least one wish from everybody becomes true (a good topping is included in the pizza or a bad topping is not included).", "Input": "The first input line has two integers n and m: the number of family members and toppings. The toppings are numbered 1, 2, …, m. After this, there are n lines describing the wishes. Each line has two wishes of the form \"+ x\" (topping x is good) or \"- x\" (topping x is bad).", "Output": "Print a line with m symbols: for each topping \"+\" if it is included and \"-\" if it is not included. You can print any valid solution. If there are no valid solutions, print \"IMPOSSIBLE\".", "Constraints": "- 1 ≤ n, m ≤ 10⁵\n- 1 ≤ x ≤ m", "Example": "Input:\n3 5\n+ 1 + 2\n- 1 + 3\n+ 4 - 2\nOutput:\n- + + + -" } }, "cases": ["936709269b4f72b1cf4bccd7fcd055523d27c7c50c7cce797ef48191e002b85f/1", "6742af6a1cd1dd6cd6edb12c9750fd1ae85d1e6a4d7b6aa20dd9d473e6084ff5/2", "e0ca884d1ca88a2c84508a3ba15cc52da9fc361ceacc6c03f3f420ecffb8c663/1", "ce7f7bf12a5d36e457802b52895c481213ba3ee4abc9daf1785cc43280bb5926/2", "612006751e0134f4b66eb7be734e0e5b3e70a84f9125d866437461f99e2edd7f/1", "78e58217e3ae60a320c62d4c9bc2c8767e8249f53c381dad4981f849f57c7241/2", "fa837bc3ffd35de701d341a21f7f59d000bae148ba56a7d9a3b8e2b350697ff6/1", "67644a5e72b2ef725cde7ecfa967aa3227b084709b18120f180a542b0c27058d/2", "3709bbaa048f4f0244f3e14c24fee0d29132e1e3596ffa9a12607d45a3fea9ce/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "8f36e56b97bc8d93f3259487d20a24c92e0e5f6ed1b58f0b04e722218617a158/1", "3040f0f625467c4131ed8004d01e9861ec9b299f8ab958f7a26b674b52609fba/2", "cc2ac5779c78649ff723d1daca86370862a56cb49771ea82689dd8d591ac74db/1", "bca98cb4ee05d6811dbeb2ffd81452d3ba5e4d70108fd333215fd36dd1bc9c28/2", "29c39dc4f00e3e6a17eb28fd47f240067af55ee315e3a5fa711bf5305d50ba9f/1", "2e143566303074800d47cb4e620f3d1bb8a55368d5805191609a73f0c8e054f1/2", "d3bb2079dcf75278a6563b96b4f1c98126c08282caf7a0500ce4a2ff89dd94c9/1", "ec9f18a5302ca0ded0ac7360c88e0a900c0b79db1248687960b4dccdc79aefce/2", "008d17e6d2743a653de81045100694c837e676734bce32fe8a538c1a718a5966/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "6c58c91a4c61c5d4f4af16544d7318f7dc1c453099c1556fbb3a1ca9520dc356/1", "cf331877664e08ba158db97d3f456f734e849dc7a994568f47cc5e4d43071fd1/2", "34a510fae52bd2217bc3758882df2a5250993260250fd89c748fce36661a54d0/1", "79b43d248377f8dd847a2f8ef5447e577bc50402a72683c4583c9354c0966319/2", "4e8d7aea355c2e1b8d924628ffa3d27cfb431f33b5710ad03a5e63dd548ab800/1", "0290ef2fb267ab9d7f71f2f56d5e5af292b2e666cdd398187feecf78f969b08c/2", "4e8d7aea355c2e1b8d924628ffa3d27cfb431f33b5710ad03a5e63dd548ab800/1", "0290ef2fb267ab9d7f71f2f56d5e5af292b2e666cdd398187feecf78f969b08c/2", "45993e82b90c9c76ef8b57d94678e55bbf580660f20cbb1eab268072c076222a/1", "aa5dcc85bca44e358495b0223dd8d59b92c7f42080c9754fe4f557510d89bdae/2", "2ee4cc1302b7fba8683bc5b9ea681027d3a6d9eecd20a74d907a33a657f1e182/1", "ad9152331a6a4bec56a61f8ff507903a5db694081e8493d74221acde353f2904/2", "ffc53878eae638c5a6a7a6ca6c4d19a25ee4e49effda539d848c1d48315ed721/1", "0fb90d38b5354971415a571420f06911f4951b2225e150fc3c787533994fd970/2", "fb0b6d1508d75092795ed8f439e7f4db25ddbacb72deb0c602280a26c19f546c/1", "11a6b7fb910a8eee23627bbdf71651e495ae919980b39cff85b57d88dbce0ed9/2", "39d815ec35f48fff64be68f8ac49a0cf53bdcc1318dffc51a011851514a41317/1", "91a93cbeb37de5a9f7e6ce4d8b7c9878e9c7c0f0dc6c1d966c1b75993c36b685/2", "f183c0a8e938d775055cd4a28641ea3fe9e14e0d7769fba363c806dbdf0939eb/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2"] }, { "id": 1686, "name": "Coin Collector", "solves": 1438, "attempts": 1572, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "A game has n rooms and m tunnels between them. Each room has a certain number of coins. What is the maximum number of coins you can collect while moving through the tunnels when you can freely choose your starting and ending room?", "Input": "The first input line has two integers n and m: the number of rooms and tunnels. The rooms are numbered 1, 2, …, n. Then, there are n integers k₁, k₂, …, k_(n): the number of coins in each room. Finally, there are m lines describing the tunnels. Each line has two integers a and b: there is a tunnel from room a to room b. Each tunnel is a one-way tunnel.", "Output": "Print one integer: the maximum number of coins you can collect.", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 1 ≤ m ≤ 2 ⋅ 10⁵\n- 1 ≤ k_(i) ≤ 10⁹\n- 1 ≤ a, b ≤ n", "Example": "Input:\n4 4\n4 5 2 7\n1 2\n2 1\n1 3\n2 4\nOutput:\n16" } }, "cases": ["37b9a3b87086c6d6f666df1f1624f8c40e68d70404ec7be0760cb34cafb8a05a/1", "e3667f7d8c030260bf49046f955ec9bebdb9a4cb8a66b812fd498ded5431a821/2", "f19e5098393c955c692402fe6f378cda0898bbf0084d60e98ec922ed0ec4001b/1", "a5331f18877e9e1543361e44b4cb0a1f5f0ed5f8297d850bf1fcc68bd7a3ab5f/2", "ec5b30e2ebb374522da444d26dc304c72790c2074256c6e247d800a105441228/1", "673650f936cb3b0a2f93ce09d81be10748b1b203c19e8176b4eefc1964a0cf3a/2", "c28da6c41b3ee49058a9cdb26014395a4b1b014df272a16a0c0bcee06698dc8c/1", "e3667f7d8c030260bf49046f955ec9bebdb9a4cb8a66b812fd498ded5431a821/2", "eb36daf2ded1de5e3c9faa388cb20936e53aa157b7f968603cda48d4d7ade757/1", "64459cd36006fa4bb2f5314f2a1ad69c8cbbb95f319c5459b32a9cdc870b54aa/2", "a79cba2c1b271c133c6a16ec2d50e869b84d603c78813b642b8e68df585af3aa/1", "823d80a4171d6b02e70a7273b28dbff64709f40c48a31d5ad65e8e5e03c1468a/2", "26480bee455bf972cc218bf3b01463004c8bd89718b83d500f068941212d1429/1", "8a1241514652450d843f063149773405d7522719a557fe76e114c792fac12040/2", "6e951153be2f703b727185ac0e3bf7008aa139cc871507371eb7c771cd0acec7/1", "7f0b88f46c046aef7f21f2337f314d56e789bd32095e93bc3934c38be257b253/2", "0123b5921d37052f67993e31fd5df50a2b751e56136f00e716a51dd9f32ea5c9/1", "4a63f082c66c4792171c808df8b961027099a1552b6e7d202f035b80c9f1772b/2", "dd382bc36181d82700ecc58c5a85ceb20e0956b0f6656acf320226555e3ae846/1", "b6fc5696da1c0aabe58f61d8b5bc3bfbef4f1ca42a87469047527c6cc1969f20/2", "d0b36f686cf47145c84c6f2ff2cb4d39e16fef1f034a817bb732333a64d320ea/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "9f80cef3ee57ce00f7ee10d89fe886fd90cedf760c8cbf102778d2cfc96dc8cd/1", "e6c21e8d260fe71882debdb339d2402a2ca7648529bc2303f48649bce0380017/2", "5d090cd346d46e2a86b5a5074ad12eeb70e0fef098be5b310586f629344f4385/1", "6c03c09e886d6f8c48e3d6e071a46d30fce8585c8abae1644b92808483fdb889/2"] }, { "id": 1691, "name": "Mail Delivery", "solves": 1255, "attempts": 1419, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to deliver mail to the inhabitants of a city. For this reason, you want to find a route whose starting and ending point are the post office, and that goes through every street exactly once.", "Input": "The first input line has two integers n and m: the number of crossings and streets. The crossings are numbered 1, 2, …, n, and the post office is located at crossing 1. After that, there are m lines describing the streets. Each line has two integers a and b: there is a street between crossings a and b. All streets are two-way streets. Every street is between two different crossings, and there is at most one street between two crossings.", "Output": "Print all the crossings on the route in the order you will visit them. You can print any valid solution. If there are no solutions, print \"IMPOSSIBLE\".", "Constraints": "2 ≤ n ≤ 10⁵ 1 ≤ m ≤ 2.10⁵ 1 ≤ a, b ≤ n", "Example": "Input:\n6 8\n1 2\n1 3\n2 3\n2 4\n2 6\n3 5\n3 6\n4 5\nOutput:\n1 2 6 3 2 4 5 3 1" } }, "cases": ["b0c24ad51e630478ae485c4c50aeee4b35e7160a476572bc85f23869658189b6/1", "89f13149ce399c58b264035ad7be7337ceef3bedbcc047a2a966e8525b2377c8/2", "42bcb9bab2e9d3f23f26039e718c85a3bb9d9bf82a50a3bfd8875b192e9dc8ca/1", "29cf6c865ebed9a55067ed169b499157fafb4b1b1c6e75bed27d5cd30d7a4001/2", "a6b17b3cb95fa29353acf0e60392232732f667ccc9d2e71015f28adce491d4ea/1", "7eb00200eb515e614eb1019c082b7f3c96cdf315132ed728648b3d488311c4ca/2", "14a5a17ead9fb1e10029a24c7b2bba0b404c5a21c71dabd2b6bd03554eb42dfc/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "8fd2f9e1080a11ee9f5c2bbc6e0d28c7b46cfaaa5af0f92dd056458bb164aaff/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "62d79415a35063284618bc9edee93e96db8f08a40a528806d26e69e41cfb8834/1", "e360819623552c1983c7cff9c891f59cc676cb5c0c3fd95d9309d4282a5d2119/2", "13578599c7c3597ce0116cf07fb2f0110ac252546ad7a3ccdb054f20c19bb802/1", "0b5f271bc6394ec8529624b28e10526a9b38d4b35b3548d6d44c97bfd8660171/2", "001d86839f0b041415ce1856dce1ac00e86b6b008c2a5fd82d636f1438d3f4b3/1", "c47ac8686988b55de9f1bf843e59722cfa286f8b7f02b3f80719e4caaca8ecfd/2", "f99f24f656a8f0e941f23dd77233239e4c91bcc0d2e94f48865e1c788eabc1b5/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "a1d9deb59d6fa4912d1691d6bcd0aa613466be322fede2a5036a9cef5f1ad658/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "4bee59d7e41a3a98677fefd131d082643853108b903359492b1a9bbb286fa7fa/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "7219e739ac6abf6a39e141de2cb2077c9232bf435e87f0480dfa0c026523e347/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "6234b9b1be482a0b1227cf0846ff83677cf71b6f4aa4692268eebfc79ff05e95/1", "0036e95aa6d8a91aa7dcd05e313d326d23bb30dfdeaf1eda455fd13cd608b1f2/2", "fedab2062f56e5187cc6b3c12e08ddcbeb96b6286f3a4fa613d763e3fec79f3c/1", "0036e95aa6d8a91aa7dcd05e313d326d23bb30dfdeaf1eda455fd13cd608b1f2/2", "a70ce41b087ad4c09523d980fd939397e573903b670d0501e8c96830b98e86ee/1", "2e83d2a97a0d1fd4ce4993945a466a1575be733052b508d27b5cef44cb59d99c/2", "33e766959bb971017b0c07da5bde1334726171a0769d83987108180f966a6740/1", "d5d1c40101c4dc94fbac2bae834516fd78beb2b7a1d987854e7a83bfebf53eaa/2"] }, { "id": 1692, "name": "De Bruijn Sequence", "solves": 757, "attempts": 786, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to construct a minimum-length bit string that contains all possible substrings of length n. For example, when n = 2, the string 00110 is a valid solution, because its substrings of length 2 are 00, 01, 10 and 11.", "Input": "The only input line has an integer n.", "Output": "Print a minimum-length bit string that contains all substrings of length n. You can print any valid solution.", "Constraints": "- 1 ≤ n ≤ 15", "Example": "Input:\n2\nOutput:\n00110" } }, "cases": ["4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/1", "4e56f30b07bb83c74b9fcd24edfb82dab42566e6449a5434cf6a8c08d4cd4879/2", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/1", "f5f12d5c5e1faee3ed8c2584769f253c2758f51622ab8c2eb651ee341f3c71cc/2", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/1", "83bc3a19d536f49b190cbb4836421ec4d8f1012a8445c0a15101113af158b9a5/2", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/1", "56539c5e2cd4ec0c7e6bb06433d2f5355b77b74902695e40fa629f05325dc5fe/2", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/1", "e59f2cd704d11af89333f367143d71f15c10f17a8d7fbd5dae7b970a0479da20/2", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/1", "83ebfa077b052c5a8053f3deb9613da2a8963ecb3f3fb2db16555a4b6e7c7d77/2", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/1", "ccd3d5eb83976dc788757affeb977c71c0e9226c7d1169a36b8cc1326e0aec60/2", "2e6d31a5983a91251bfae5aefa1c0a19d8ba3cf601d0e8a706b4cfa9661a6b8a/1", "c9ac764c38d45d84bf43b79f88a9e93b53b5a2a04baf6237845ed31b296d61e5/2", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/1", "9b0a86f1e27de5ceba6913558238df35e3a74032543827cd2e17ca54b2dc71e8/2", "25d4f2a86deb5e2574bb3210b67bb24fcc4afb19f93a7b65a057daa874a9d18e/1", "1485b1551b31c870da4d1f1ffb53975db140daef5443382c9ca10c9d90139c71/2", "a1fb50e6c86fae1679ef3351296fd6713411a08cf8dd1790a4fd05fae8688164/1", "e312eef3f946f1d0775d9495afcddb789359fa05163be9b041bd65157c2187f7/2", "1a252402972f6057fa53cc172b52b9ffca698e18311facd0f3b06ecaaef79e17/1", "93dba92c9308d9d8ff8924baf50ac800398ec849668e12f54982afb3c71cdba8/2", "9a92adbc0cee38ef658c71ce1b1bf8c65668f166bfb213644c895ccb1ad07a25/1", "c7cf9df84e7201ff181d5fbbf701103256fe19cf19a74f934338bf374e41d1af/2", "238903180cc104ec2c5d8b3f20c5bc61b389ec0a967df8cc208cdc7cd454174f/1", "d6d2e247e1f4f1382e756749c92bac6dbb11ff7bc6804ccb509f3c39cb29a5e4/2"] }, { "id": 1693, "name": "Teleporters Path", "solves": 969, "attempts": 1133, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "A game has n levels and m teleportes between them. You win the game if you move from level 1 to level n using every teleporter exactly once. Can you win the game, and what is a possible way to do it?", "Input": "The first input line has two integers n and m: the number of levels and teleporters. The levels are numbered 1, 2, …, n. Then, there are m lines describing the teleporters. Each line has two integers a and b: there is a teleporter from level a to level b. You can assume that each pair (a,b) in the input is distinct.", "Output": "Print m + 1 integers: the sequence in which you visit the levels during the game. You can print any valid solution. If there are no solutions, print \"IMPOSSIBLE\".", "Constraints": "- 2 ≤ n ≤ 10⁵\n- 1 ≤ m ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n5 6\n1 2\n1 3\n2 4\n2 5\n3 1\n4 2\nOutput:\n1 3 1 2 4 2 5" } }, "cases": ["6aa6df4aa157089905c75c47820fc7bc39c64e0cbfc7079c8a1a9e0c145f49ed/1", "dca98482c9c8f469b30671f956655437dce4f98fb81172e90d4e2460d0309496/2", "5d9cdc6eec6ff076d73f1a069e16e72c7680c2fc12ab88a4dbd083da541aa66a/1", "4da4cbd10fdd69b8aa8badedf4e67605cc08ac9d6c78285aa51250b84ea61b32/2", "8cb66a8700b444c4c5da1d283658ef51d990c3a59e387ab9f8956dd314ab0955/1", "779224936fc37dadbfb0ccb20903cc3a65f2747200b1af89e669eba086760117/2", "3496e12feabeb91b12fce0d1090dd7072bdf50a032055ce81033d03948ce3297/1", "c476be9157daee585af0b81244b0ba7a3b17fe372fbcfbd9ecea90a1239f7235/2", "c0035fd05a218f2206da4c9a76110c7f8095625668ae3eff7bfebf4a11fa6b4f/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "48012cdbe347f5b619904e03d973bee9687c10b9d63820cd4e2329ddd9e02024/1", "e5ad6083e7b5198345cc9f8f6ae849fa476145bfdd112d04dfa4f856b4ab028d/2", "0391268dff6196af34c79e56358ad08b6e7fea360d8faef637526032834f46ac/1", "be689234ba781db331584a5441f2799d9d09663760ad5a84da4936faf250a2bb/2", "5f34033d2081f8039a120b517307456089e626ea9ab6d114847df9a855c5ba67/1", "8539df6e2e2e1f2076ff68c4926dd9d6e6f3ffb329e74e99031d432620043a99/2", "7ba45c1b5a320eed158355a617dbd9f1826c5008d0bc78cf0c211a63bdad68c2/1", "fe984061e7e8393ff4d4e0f087162327ad3d7ce2b885cb366bceae92164aa220/2", "d639a9f39b6577e3032a2c5c26d0d9026ca3fdb1a8a9ff908c7e293d6f43ba10/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "9e547e492755acdcf9a6284395b73b38d75006806dc1cc72719cc0b280b614a3/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "745c7d7838bbddcd9d29d237d242be1efd70795273cd75f72fef9726b1d0bb32/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "c87d86b8ac1686d18114f07e50140f79dc8b906293f89c0ab1ad38b781f362e0/1", "8561476290db260c8b0ead4e5c1530a82e9b03f6f775fa2e5f1653b436d41d19/2", "0fed8d1a1b564c354fbe94eaa54e8321929322cf676a32e82d8f5e5ccb7a6e4b/1", "8561476290db260c8b0ead4e5c1530a82e9b03f6f775fa2e5f1653b436d41d19/2", "c4887ffd6f27c4d96d416c341a7527d67822a7828f6dc4218978f23c998d618d/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "3940e31172301ba20cc1d12074a573fc4b76390d1c63ed1b7ef45ad176d7b9e0/1", "d1d96605b6456595b48a142e9241582dd09850e805a991ad5458e0b99b1e5e3f/2", "c63f10211d5dc3febcc8d562cdd78a3dcfb7e40699ca7b9a0cc0deafc3295be5/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2"] }, { "id": 1690, "name": "Hamiltonian Flights", "solves": 1157, "attempts": 1334, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n cities and m flight connections between them. You want to travel from Syrjälä to Lehmälä so that you visit each city exactly once. How many possible routes are there?", "Input": "The first input line has two integers n and m: the number of cities and flights. The cities are numbered 1, 2, …, n. City 1 is Syrjälä, and city n is Lehmälä. Then, there are m lines describing the flights. Each line has two integers a and b: there is a flight from city a to city b. All flights are one-way flights.", "Output": "Print one integer: the number of routes modulo 10⁹ + 7.", "Constraints": "- 2 ≤ n ≤ 20\n- 1 ≤ m ≤ n²\n- 1 ≤ a, b ≤ n", "Example": "Input:\n4 6\n1 2\n1 3\n2 3\n3 2\n2 4\n3 4\nOutput:\n2" } }, "cases": ["a8cf5b8183dcbdff39c95837f83ff230b532ad575d5963195d903b985c7cdcea/1", "48430c59951df1d835a871172779c933db36c45bf79c702fc7d1b77c5e47460e/2", "b2d1cb232c162bbdf5124d0893c5dc1671f08bc3cf0f0382a7f45f07f7e643f6/1", "67fcbe6c014f951e1fb9c188ad0218fad3cc7d9002588aed4a15f04a541c9173/2", "14734f366b2712f79ab5a64b01074bbe563d5b612b472095d6ee31a14b92b6d8/1", "c449d7494a025c0181c362730d84f9439d36be3d9fd52d394d339f854e364600/2", "174647f005ac7f9f0bd8381885fdd02ce8b87286050fd1162df7879e044d71d5/1", "a31f57290e84407f08aa10d715f9fe29a39e036235daef523e19634ac05e42af/2", "e79b78486853a37d3b03556c79db8d4384a85e9999552da85d9c5f51054cbd66/1", "612a79399e60304a9f701c1ecac7956bf2f1b046e6c6f0d6c29b3fe3a29bad76/2", "79aee462d51eb1830365e0d631b51cee50ef01b2596c35f0408cb3841c6cdb6e/1", "acc33112c936451e4ac83a6092d8f54ecea199749a537cb1df649521133b4089/2", "acd73713868e01aa999b0196cbca2cf8ef72fa0fc176f41b665866a7a9d931f4/1", "dce7844f293d36dd401d823eacac989c3088179c4a90ae05463dc34c25289294/2", "f959954236a9e9abc3bae6f961c7fca4c220efff20a843f4df92dde9ef570f03/1", "2db33de1a7d81339486babb395b9f22bda9006faa31ac568f59e079d96fca82b/2", "b65fdfd55479ef91e29ff17f6d9da4f5d1722e110f9cceab901da759b5428341/1", "ece45d4371684815136189a9909d2a93c4ffa0d29ed943fe4b0d9937164aaf8b/2", "4d41fe03f8c732274ddc60f12ff251e0c79b2a7d5bdf273eb62f67f3b124d94e/1", "bf847c68860829999d36a183f41d7fa7ad92e21a6542f2ae2b8b3e156a6d0473/2", "879640ea24cdeb1147e7ccf22f9ca3ea17b96ed74aaea76622ad9558d797ed6b/1", "02e3d689a05de83903e05923184fa448858dd83aa26cb749f6ec54336d815d91/2", "7219e739ac6abf6a39e141de2cb2077c9232bf435e87f0480dfa0c026523e347/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "343d023a8644b920ba671da39cd54675a68d360808d779f377a890a38d79b126/1", "02e3d689a05de83903e05923184fa448858dd83aa26cb749f6ec54336d815d91/2", "525a17f795a038ebacae438a14c3818f1bdb884608269c0dc3b734c1ed0377ab/1", "487cf1bf4478040288f79254e6a20ae9842f9c7ef99c18c9763cf2053a44bc90/2", "70715fd28ce3a5b878ce052611aad2dd0a5940025a2f9069fce9533367e0ab86/1", "dd728800e91a620ab0cab11ae899abad60306862578406fda63c7bd5663e15ad/2", "59117d9b9546051a7d51d002af6ce60f767bd04d8397f47658cc25db63c51370/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "9745b31bbc2e8f282075e93e4f32a00d28b34796be2023ac6d5a10bd210deda3/1", "063aaaa6bc8c361a58db44820c3f5d57855846d78e62491b0467702fa635eceb/2", "e1064d4e938fcddd9c96e6541e22cf834027185ef14ff2522e3ec79d351282e0/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "e800dfb9114e8f1940c4d7e39eec309b7ac093b3f893f5dfd09b07b1c98bdd75/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "8b9f7c840d3d280a1bed0c9480c082e955d4bb0fee169f2a72b5e6dc7004e171/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2"] }, { "id": 1689, "name": "Knight's Tour", "solves": 676, "attempts": 784, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given a starting position of a knight on an 8 × 8 chessboard, your task is to find a sequence of moves such that it visits every square exactly once. On each move, the knight may either move two steps horizontally and one step vertically, or one step horizontally and two steps vertically.", "Input": "The only line has two integers x and y: the knight’s starting position.", "Output": "Print a grid that shows how the knight moves (according to the example). You can print any valid solution.", "Constraints": "- 1 ≤ x, y ≤ 8", "Example": "Input:\n2 1\nOutput:\n8 1 10 13 6 3 20 17\n11 14 7 2 19 16 23 4\n26 9 12 15 24 5 18 21\n49 58 25 28 51 22 33 30\n40 27 50 59 32 29 52 35\n57 48 41 44 37 34 31 62\n42 39 46 55 60 63 36 53\n47 56 43 38 45 54 61 64" } }, "cases": ["3f11ad6bbc7ecca0b2416b713dee77f1a635c00aaeaa946e14cde1c2bfae56d5/1", "e12cd353df19f5e4f04d262e06894cd51da697ba0ff4aa30270f29889927d561/2", "dfac347cb71ae693ba8a54687f7112aff24ec67f88a3c66f69a7bf968fa2ac16/1", "7392b7e22ed4a090261d8bfbc52d43378b8fac39133e2e997b10c8ced12966b3/2", "a279f0fe018bb1305d69ee251cd2a29919d20c910b86e3730fc1b857dd3c573a/1", "c89c306a9ff8885e2e9f3305ace4842426000742fde4c0a6f071e68d7f18babc/2", "8e426e752417be3d8fad586a3f1b24129da1d1f5b504a0201057acb0e66fdc5c/1", "ad3e480764860dd161501b87d4888700f63345306b15e98c6d131c681bdbb788/2", "f251ddc12234e0da8d3b778bd0f7463fb477f16f47757f5617dc8b4ff4d4f14a/1", "7bed9f893effa1d119033f9bcba5cd0f4e82b36d48a6ae35f13d57a348c79d6f/2", "f65ceaae246de02135c1326ff5188bdd166c9749c021c91e49c0b9a79f9c7262/1", "ec7d116b773e0737b60311bc8592c25403055fec8f723ba411dfb46bb48c4d0c/2", "ece3d232c1ca9ef8a80b6fdb1585b8f5cf653b9dd023b0521c8da64db859ffac/1", "da412a050fe7bf82adeae45952508e29fbf41e0456723736dd5df7bca763d162/2", "1ff1273ff0843500f56e865a8db4eef6b86f93e801c74545141fe0de19fff83e/1", "9c8ac7219a568fcc601596d8549e8dc12d3eed924dfe5ed3ccae171f103eb5b3/2", "b7ea1f3c2d566646713b53bd09d64591fe6d4c8b5341a5f27e4523b1bae289c8/1", "fb66e7328deaf0153a9705e269153ff65399b5648fc909f32561972cf7546eef/2", "337b794ce718a09a620090d53541c3b4640a64133bbee2188444810cd3169f81/1", "d99fe4ff8f3f34d0ed75a4ccfe04a60ad62f88faa125a10d98a75f5fad404fd6/2", "1dc008d228c479a1728c002e3b40df8ccf8dc403fe358057c73c896b9885480e/1", "7fda808d0f34c10a39fc30f02fcb5dc6bb49a6bea53ac61ce4b1f3ae581826f7/2", "c84ee08831e31415e32cdb604fbe79f9aef82e00a33ae7579f7d82dfa8c41eef/1", "9d6b561f57d3d73a95a1b3fbf2011dec6cbafcf0edd69bd53773afea291f99c8/2", "aca8cbbe96ba89bf0fd068d4b4069213909923c48085dca9e63b124bc1544bcb/1", "2ebbcb3f33dfd319d7d8b214d6aca5d1ebdb43c9c4254372dac098bbacd351c8/2", "0b6693b0fa788f42f92edb0721ac4da7e1b22ea0c796913a2c5e83b6271cfaf5/1", "2b6529398084338f05731ca608f646ffb5572133aa2593d90aa125b4aa5c2486/2", "ce434a743148081fcb8cbbaf67ac1f09cbe2dcf9515fadb668d7a6e555825600/1", "3be3f48c8d8fb21f46203a314f6861946d9c46b14c30234ecb262114e22edfa9/2", "c74ca9fbdc8f2a3d035d2dabe6e476e33e61bb7741f94b8c4d947186c36d866f/1", "5485d939d1b220eb9ae815c22764e9de67637fb8e1554013f127461d0ed01a47/2", "930e86a94a98d9495a719f9785350a795c31b4aec671136ae4bb10896ab793bf/1", "13b6c71c2c9aa87615af2f7700d08dceb40e355d106704261431407fd702111d/2", "7ccdd490f6b3380bf5ef76529f8a33c3d0d324062b190d63706eaa7ffd0ce85a/1", "f7fca2ae842f7fca62785c080c536ee0a60bcd7c66dad3af9ea03d15c93ae08b/2", "92beac052e1a608a885c3feb21893dd2d45b1ff351f121dc84e6080bbc8db309/1", "cd50003a67a38375879615e9916c681d0bcc6186b51e4781876917096711d24f/2", "dea7e4555848aab04a6d866158df9903d5d45f49d18f6745f2c52f8670de280a/1", "336aa8e523b2ffd15d80899ccbc6e8cbe43696ef417ed624c33bbc9fd11797cb/2", "aeca024a80c14a8452b129cd6899d76a656f7d0459c8b7ff0f70bbb9be79e697/1", "80cd4c6a9716b229a8b7f3644a1b6903d13acecf5c2cee40dc18d00e0867ad2f/2", "501ddf83f5c6affb4bdc50a6a3f4feab9f41898825e236599893739a52e1196c/1", "81b0583fcd5e46e73d5ff3e6cc9897f5ebdada468dbfc1c10673e374aa05e6c5/2"] }, { "id": 1694, "name": "Download Speed", "solves": 1200, "attempts": 1309, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Consider a network consisting of n computers and m connections. Each connection specifies how fast a computer can send data to another computer. Kotivalo wants to download some data from a server. What is the maximum speed he can do this, using the connections in the network?", "Input": "The first input line has two integers n and m: the number of computers and connections. The computers are numbered 1, 2, …, n. Computer 1 is the server and computer n is Kotivalo’s computer. After this, there are m lines describing the connections. Each line has three integers a, b and c: computer a can send data to computer b at speed c.", "Output": "Print one integer: the maximum speed Kotivalo can download data.", "Constraints": "- 1 ≤ n ≤ 500\n- 1 ≤ m ≤ 1000\n- 1 ≤ a, b ≤ n\n- 1 ≤ c ≤ 10⁹", "Example": "Input:\n4 5\n1 2 3\n2 4 2\n1 3 4\n3 4 5\n4 1 3\nOutput:\n6" } }, "cases": ["acec992e42fe3462f07114ad2d5f7ce9ff27434922e9b52f39006310ca79d019/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "558f035a5dce8931e19371bda522b5a81d28a9a1a1835a6205e566ca9de324c8/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "9201642e4901d251a2c18f26429a67089a018a07cd3aa6025cb5fd12d4f88126/1", "6f2264250160ee91b20af64f30128e3787fcf641f1c504f7ac752597e7d2cc09/2", "654fbbbac2b61ff15187c1d399394ea7e27b05b3dddf32bdba1bb1c6708e3593/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "8286fe339a5312417d20620138dec793deb78cd8960f33ddc4f521982e71f046/1", "53194eca3a6a6d70f091a6036c69e80ff7ac1f14fabc1f7c403e7a127de51492/2", "297a2fce46a4102cbd86bea796751acd566fcae258aa00b62d34f5436e441b27/1", "95cf32708a31caa478a0e9141103ac567d85e5186e697e7e0c81f75589999e31/2", "f1cb0fbf03699e8e91a47846d49e084dae8ec899186d7766461383b5bf562452/1", "d7063790ab81d902dcbf29705c8033b5025397473a9e14d280769e015b35290e/2", "d31400a9196af8d78037127201e471353fcd1f5aaecc9939ea4740a054559c0f/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "963201f693af2a27f8d43a78a6213b938576971e71fd5270ad62b538cae9cd47/1", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/2", "9b1a8c894a16cc3228c663a38b764156f7f47183b2f7b206866f935d693dbae7/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "e27523c04940efd4cddc19cb7ad99a65635c2fb88cf1c86a7492e08089e8c942/1", "dcd0ebccb47dbf2def3efe1b27c344a63c6105b9ce2cd2791aa137f81875d342/2", "a09e3665a05e05a0f4e6d590b271ba889bed02c5aae69522d38d8bf1c62aa371/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2"] }, { "id": 1695, "name": "Police Chase", "solves": 886, "attempts": 967, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Kaaleppi has just robbed a bank and is now heading to the harbor. However, the police wants to stop him by closing some streets of the city. What is the minimum number of streets that should be closed so that there is no route between the bank and the harbor?", "Input": "The first input line has two integers n and m: the number of crossings and streets. The crossings are numbered 1, 2, …, n. The bank is located at crossing 1, and the harbor is located at crossing n. After this, there are m lines that describing the streets. Each line has two integers a and b: there is a street between crossings a and b. All streets are two-way streets, and there is at most one street between two crossings.", "Output": "First print an integer k: the minimum number of streets that should be closed. After this, print k lines describing the streets. You can print any valid solution.", "Constraints": "- 2 ≤ n ≤ 500\n- 1 ≤ m ≤ 1000\n- 1 ≤ a, b ≤ n", "Example": "Input:\n4 5\n1 2\n1 3\n2 3\n3 4\n1 4\nOutput:\n2\n3 4\n1 4" } }, "cases": ["7219e739ac6abf6a39e141de2cb2077c9232bf435e87f0480dfa0c026523e347/1", "871416d3e9445119ef7ce14802098de9d83f99b2ff4633db05383d2419fd06de/2", "c63f10211d5dc3febcc8d562cdd78a3dcfb7e40699ca7b9a0cc0deafc3295be5/1", "5f568c97af4d32e85c9b01de47fd70f0740e61ca310e12c409329fa574ddfa5e/2", "de22ccb69811257062308161f6cc0bde080e2ba7db9d5385c8bb79b9d3cc2fc7/1", "6d7d970519d987b3e8ff9271a0a83746d4f6514a0c01f9aae800faf51a8d9cf3/2", "f18c815c26c857545b22d5d71dd42538fa0bac47cb32965df9aa59e2ba095b6a/1", "871416d3e9445119ef7ce14802098de9d83f99b2ff4633db05383d2419fd06de/2", "682205ad33197c1753c65b76b9d150a810eb52c311cd50674e60864ce348ebe4/1", "45d099ae4a577868ab7c5881e30e08d92def896f51c7f217b72480e4a812d9da/2", "53dd009d717b0b38defaad614867df98b0a1e257a6ba2679ec8a4e5a09a0d205/1", "ff964d01f4280de739f6da96b53b8c7ba0f638f99beff5f6167b690c8d5fd9ff/2", "ab77c61d0293e5ea4aea9caaca8b931a2be002f3877dea8e1200e54d3097dc05/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "fe3aec401f6b22922e477441b2a1f4a75eae3d80ef336b4ca2e1735caad662d9/1", "f27a40013a9d44146eeb848b0b1e1f0e283f029a1eb85c88bc8f7be0ee8d2557/2", "c3855e3c97dbc45e4c90dd5ab84584d079c5371580c6e1ce8f201c05e6e31378/1", "871416d3e9445119ef7ce14802098de9d83f99b2ff4633db05383d2419fd06de/2", "afe1eaf8a94ce5a21e68ac477e10a80e5f7ee453a1c79e6bd34923c899638315/1", "115e2126554ce3235f7d212c6a783784e2a9f1cc7146e322918989923440a2e0/2", "94a2b5d29b6c9514d8aeeaaa56192170e2686645227da2fac9322c0b765ccc02/1", "c88ce63b5e2a744a953814ff29b9a1ab9a88344eadb593c40eafdc51dcad5e88/2", "26c8bb04b6f4a1508167d4d886c65eb9833f74c9640fa86b4ecfcfaf98707c3a/1", "6d7d970519d987b3e8ff9271a0a83746d4f6514a0c01f9aae800faf51a8d9cf3/2"] }, { "id": 1696, "name": "School Dance", "solves": 933, "attempts": 971, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n boys and m girls in a school. Next week a school dance will be organized. A dance pair consists of a boy and a girl, and there are k potential pairs. Your task is to find out the maximum number of dance pairs and show how this number can be achieved.", "Input": "The first input line has three integers n, m and k: the number of boys, girls, and potential pairs. The boys are numbered 1, 2, …, n, and the girls are numbered 1, 2, …, m. After this, there are k lines describing the potential pairs. Each line has two integers a and b: boy a and girl b are willing to dance together.", "Output": "First print one integer r: the maximum number of dance pairs. After this, print r lines describing the pairs. You can print any valid solution.", "Constraints": "- 1 ≤ n, m ≤ 500\n- 1 ≤ k ≤ 1000\n- 1 ≤ a ≤ n\n- 1 ≤ b ≤ m", "Example": "Input:\n3 2 4\n1 1\n1 2\n2 1\n3 1\nOutput:\n2\n1 2\n3 1" } }, "cases": ["677f64927e7acf3f419c2e87fae6a95a5f887eae7a9a7d69fb7839cff18da428/1", "7cd4d2baa0bc812e6baa82e533a1ce9dc7c90726b0109e9b5c8e7ae9991967e5/2", "eb10d5dc8a87e9ae00a4282ddd0dcccd89bae1f9b76278789dc49c88d3a105ab/1", "7cd4d2baa0bc812e6baa82e533a1ce9dc7c90726b0109e9b5c8e7ae9991967e5/2", "4fd6797341a7e833cde8da211c31154a68d859857686ee0cbbbf4a1076beb97a/1", "9951c94185efe55117765dc8609faa94defbd9f281ee1f738e7b350dfca7a834/2", "18d155b822fac0e617f6e892cd51c5fdd8df1e9e2fca61417e7478dd1868a8f5/1", "a9b09b2f759e70ca56037d043a50692e906dfc2aef6fba43a225a0e767843831/2", "6c14dd63a575a1e5017bb3fa2ae232b8c9119e20f89d244b8dd22637f5077d80/1", "7cd4d2baa0bc812e6baa82e533a1ce9dc7c90726b0109e9b5c8e7ae9991967e5/2", "68b6477bc761a4ed64bb6a25b1fa9fe835a8e16e2ac75ebaca9a49bacc16fed6/1", "7cd4d2baa0bc812e6baa82e533a1ce9dc7c90726b0109e9b5c8e7ae9991967e5/2", "6c744eab52590370c23bbd917809dcb865111942b648d38305949e711949a804/1", "92aab1453cd5325e7dfebcf7a9e488b4ef62cc5c8dad2a48a366a124f8b33ba3/2", "905a83c155d11234a13fd7770586d6e6ea20e7a39e435dad7cd7ce94568f62ed/1", "8e382eb4fbd164ed66a625fc933d16c1af22e3fd47beda7fb8616940ee807ae5/2", "320a0f89219e2cb7fc649fdc08a900e9253e6b8619fb34b3cbb71f18578b5df6/1", "871416d3e9445119ef7ce14802098de9d83f99b2ff4633db05383d2419fd06de/2", "46cad5666696ab06f62101cf2352a1cfe148999f2a755cc3f81a78a9e77a333f/1", "1d9d32927c7f13ce501cdfed972b0f99c8303e4bc750e7ac7f5cea9cef23dee5/2", "807d3a530e2994e96080d4c6f76c0106c3a33e697f3aa2881b611d6f7be43b37/1", "c49110f93bcbab8f956e55a4f40c91e92c0b37862bea7dc35ac34e2cbc8e3cbc/2", "69596432eb4432cdfd7a04a37d0adf245e8726c22e3e2ee6a032c159768fa489/1", "55570e994bea260f6e7fab4accb3c4febb0eac0f36077f752cf0993e84047f37/2", "ae0e97ad4470d771c5ea9890d0dca2eb5e97b7e9e8a1069a3a2a06a03f43a59a/1", "620ad0f3a4341718ed4bb37f32ab066b966dc28333a3f56441afa3752ec7de8d/2"] }, { "id": 1711, "name": "Distinct Routes", "solves": 566, "attempts": 799, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "A game consists of n rooms and m teleporters. At the beginning of each day, you start in room 1 and you have to reach room n. You can use each teleporter at most once during the game. How many days can you play if you choose your routes optimally?", "Input": "The first input line has two integers n and m: the number of rooms and teleporters. The rooms are numbered 1, 2, …, n. After this, there are m lines describing the teleporters. Each line has two integers a and b: there is a teleporter from room a to room b. There are no two teleporters whose starting and ending room are the same.", "Output": "First print an integer k: the maximum number of days you can play the game. Then, print k route descriptions according to the example. You can print any valid solution.", "Constraints": "- 2 ≤ n ≤ 500\n- 1 ≤ m ≤ 1000\n- 1 ≤ a, b ≤ n", "Example": "Input:\n6 7\n1 2\n1 3\n2 6\n3 4\n3 5\n4 6\n5 6\nOutput:\n2\n3\n1 2 6\n4\n1 3 4 6" } }, "cases": ["7219e739ac6abf6a39e141de2cb2077c9232bf435e87f0480dfa0c026523e347/1", "f0246c376988f5269702dcecbc0f855ff37020dff3bd8ed8e8e6f7798a5a4d1c/2", "ab77c61d0293e5ea4aea9caaca8b931a2be002f3877dea8e1200e54d3097dc05/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "510755dbbfcbfa3af6aef6cbc8352a2f5d4afb2673c202d7cea8874b38763cb2/1", "53c48b82182bf092ee16e76e31c33cf829d34e4e4b329eaca2e291f149de8fce/2", "5a1075e897133ab6207cb73504eb7981bf4941f91362ec1aa9d76f1d3256b22b/1", "531d5993b90d25d990b0e8a7204cca8741523c6d560e2be01c5fd78fa931845b/2", "f18c815c26c857545b22d5d71dd42538fa0bac47cb32965df9aa59e2ba095b6a/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "46c57a59e3ae578ea6e3e499fd0a7029064bd89c235f724131b0e201b303c995/1", "a4c9fbc9ea4cd7adc8a4526cd7b3a8d555840200aea1db1066e7d1a7263ce41c/2", "aa1233b747bfd96196d1a0de8df7457971edbcaefeaf18851f8bac3f0b504e03/1", "6fb2e2abbb80f16c489b77eefccbbcb7975530c2a90ecfa877566a86240f888e/2", "a5228a5e07b4b0129895cc6a56fe5448b1b6a2a69fbf8146e70aab8b0a24981c/1", "a72ae1b355a00c6d5bbda67576121d8e79fd1dbde554b018f2ffb49498446bc5/2", "c3855e3c97dbc45e4c90dd5ab84584d079c5371580c6e1ce8f201c05e6e31378/1", "73b27e7bdae5ab90c58d0c0dd1841f6acbcb33c846c35ad7fb0aa04babc510c1/2", "dbbd28674b2cd93fddb08b8f6b605955ada78237f720c0740b54c21b7099e65e/1", "a9948f976b8a07f26765e088fbf46006100df77af68070aef5f7551da9be828c/2", "77e691b73bf0dd648a2562759d846bd2040a633ffc95170df9c54ea12ce89823/1", "0f658308f19be2de1765673fb2fa9698425c275b11a20afd557297177ff2373a/2", "5d0ee969683dc47b815d0e2454816f246b9c783cb30b2f0f596e64bbf10aba79/1", "6020819a2afde65abad44b5a443cead73b78ff1ccb5a4f9de4750aa9dc13f687/2", "108b74a6b6439b7fe446e06941c635062e5b7eeb491d2c87a42dbd57ad79cbfc/1", "a6079d52bc843d5af2465653a101237a283a233b399d575ee5dc13586cf654e8/2", "d622b21fd0a6f921bf07317d5685afafb9bbd7053e128c17f0307f5e93ba22b8/1", "791275c92feba1f2744cde36a90650de1f9922cf50f81ab3d1359cd63e32c83e/2", "23d4c0695542a68178a59d66cc08d9c2587ed4a43ee40c9819be7596a415ff4e/1", "c662529c86d96847be5f79906e6efff28068c8aba1295c078fe753688738232c/2"] }], "Range Queries": [{ "id": 1646, "name": "Static Range Sum Queries", "solves": 7629, "attempts": 7988, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given an array of n integers, your task is to process q queries of the form: what is the sum of values in range [a,b]?", "Input": "The first input line has two integers n and q: the number of values and queries. The second line has n integers x₁, x₂, …, x_(n): the array values. Finally, there are q lines describing the queries. Each line has two integers a and b: what is the sum of values in range [a,b]?", "Output": "Print the result of each query.", "Constraints": "- 1 ≤ n, q ≤ 2 ⋅ 10⁵\n- 1 ≤ x_(i) ≤ 10⁹\n- 1 ≤ a ≤ b ≤ n", "Example": "Input:\n8 4\n3 2 4 5 1 1 5 3\n2 4\n5 6\n1 8\n3 3\nOutput:\n11\n2\n24\n4" } }, "cases": ["749776fbd0f32e043a256bdfb5c635df6e8660a1d71c1dd7be568b330bd50d57/1", "4debbfb949a8932622efc8420c7050fec76edde28690e40676b2b715c57f5763/2", "e4de87478b560f804918d2e6c8803afb0cea7804693a8e4036f5523e42a3bd9d/1", "c7dc6ff74ec63cff54f3e9f51499a166043e3afab2277613fa30fd4fd9ffb0c2/2"] }, { "id": 1647, "name": "Static Range Minimum Queries", "solves": 5821, "attempts": 6236, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given an array of n integers, your task is to process q queries of the form: what is the minimum value in range [a,b]?", "Input": "The first input line has two integers n and q: the number of values and queries. The second line has n integers x₁, x₂, …, x_(n): the array values. Finally, there are q lines describing the queries. Each line has two integers a and b: what is the minimum value in range [a,b]?", "Output": "Print the result of each query.", "Constraints": "- 1 ≤ n, q ≤ 2 ⋅ 10⁵\n- 1 ≤ x_(i) ≤ 10⁹\n- 1 ≤ a ≤ b ≤ n", "Example": "Input:\n8 4\n3 2 4 5 1 1 5 3\n2 4\n5 6\n1 8\n3 3\nOutput:\n2\n1\n1\n4" } }, "cases": ["749776fbd0f32e043a256bdfb5c635df6e8660a1d71c1dd7be568b330bd50d57/1", "3b5864a7893042d2a5a7093b23ca619d546d22bebf6943b7bcf691ad8a188b0a/2", "e4de87478b560f804918d2e6c8803afb0cea7804693a8e4036f5523e42a3bd9d/1", "2f366c4cc886b56b3d258ed90aff6fcaca551cb7a4362700c083bc8077f075fb/2", "b562b299d373e167d0894e05a365f02b164d2dde0d0c8ae164d21467b425f21b/1", "d2d062585979c8c80b9352dbe829d5168b4ba3e58a266b6345d603818f2d9b2e/2"] }, { "id": 1648, "name": "Dynamic Range Sum Queries", "solves": 5835, "attempts": 6106, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given an array of n integers, your task is to process q queries of the following types:\n\n1. update the value at position k to u\n2. what is the sum of values in range [a,b]?", "Input": "The first input line has two integers n and q: the number of values and queries. The second line has n integers x₁, x₂, …, x_(n): the array values. Finally, there are q lines describing the queries. Each line has three integers: either \"1 k u\" or \"2 a b\".", "Output": "Print the result of each query of type 2.", "Constraints": "- 1 ≤ n, q ≤ 2 ⋅ 10⁵\n- 1 ≤ x_(i), u ≤ 10⁹\n- 1 ≤ k ≤ n\n- 1 ≤ a ≤ b ≤ n", "Example": "Input:\n8 4\n3 2 4 5 1 1 5 3\n2 1 4\n2 5 6\n1 3 1\n2 1 4\nOutput:\n14\n2\n11" } }, "cases": ["5a48d1dcc34f49653773e652f7d1fae69ab184fa956e8fb0091d74e10e71999f/1", "c45ec1db26b369eb7792a336e52717c41217fabbf613943e09a75a9f8a6ca2dd/2", "441acd1fc1fedcbc2a1030fdc524889939460a65460da0ef5bec4bdab67ee560/1", "e9de2f4cc0b58a9cd43e219251bc79a3840ea240dbf26ac3eed63f9694249749/2"] }, { "id": 1649, "name": "Dynamic Range Minimum Queries", "solves": 5238, "attempts": 5379, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given an array of n integers, your task is to process q queries of the following types:\n\n1. update the value at position k to u\n2. what is the minimum value in range [a,b]?", "Input": "The first input line has two integers n and q: the number of values and queries. The second line has n integers x₁, x₂, …, x_(n): the array values. Finally, there are q lines describing the queries. Each line has three integers: either \"1 k u\" or \"2 a b\".", "Output": "Print the result of each query of type 2.", "Constraints": "- 1 ≤ n, q ≤ 2 ⋅ 10⁵\n- 1 ≤ x_(i), u ≤ 10⁹\n- 1 ≤ k ≤ n\n- 1 ≤ a ≤ b ≤ n", "Example": "Input:\n8 4\n3 2 4 5 1 1 5 3\n2 1 4\n2 5 6\n1 2 3\n2 1 4\nOutput:\n2\n1\n3" } }, "cases": ["c0758520a69e8885cdea2e91d5e1c88e564398e1e59e685af40c32baca2bc0d4/1", "a5531bbcc4af99b86e68d1010eabe37a0f25a63390c2eba3d3e10d9fed6f3c06/2", "fb79ae737cf7cb476a1e38b21f80adcd9907656aaae26181b1f63d1c4ae8f9e7/1", "7d0633acec729023c1fb3fcfc77d2134a765125e117c359a7f658e53de629e79/2"] }, { "id": 1650, "name": "Range Xor Queries", "solves": 5364, "attempts": 5448, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given an array of n integers, your task is to process q queries of the form: what is the xor sum of values in range [a,b]?", "Input": "The first input line has two integers n and q: the number of values and queries. The second line has n integers x₁, x₂, …, x_(n): the array values. Finally, there are q lines describing the queries. Each line has two integers a and b: what is the xor sum of values in range [a,b]?", "Output": "Print the result of each query.", "Constraints": "- 1 ≤ n, q ≤ 2 ⋅ 10⁵\n- 1 ≤ x_(i) ≤ 10⁹\n- 1 ≤ a ≤ b ≤ n", "Example": "Input:\n8 4\n3 2 4 5 1 1 5 3\n2 4\n5 6\n1 8\n3 3\nOutput:\n3\n0\n6\n4" } }, "cases": ["749776fbd0f32e043a256bdfb5c635df6e8660a1d71c1dd7be568b330bd50d57/1", "d1c2b5e9456c4fe5cb0c58fa54f51a5601d25ce87ada655508e2dac8b6de9b67/2", "e4de87478b560f804918d2e6c8803afb0cea7804693a8e4036f5523e42a3bd9d/1", "9d079d468366ceb069e4caa16f6361a167b3a65e3c1c01b81205657b95087303/2"] }, { "id": 1651, "name": "Range Update Queries", "solves": 4206, "attempts": 4513, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given an array of n integers, your task is to process q queries of the following types:\n\n1. increase each value in range [a,b] by u\n2. what is the value at position k?", "Input": "The first input line has two integers n and q: the number of values and queries. The second line has n integers x₁, x₂, …, x_(n): the array values. Finally, there are q lines describing the queries. Each line has three integers: either \"1 a b u\" or \"2 k\".", "Output": "Print the result of each query of type 2.", "Constraints": "- 1 ≤ n, q ≤ 2 ⋅ 10⁵\n- 1 ≤ x_(i), u ≤ 10⁹\n- 1 ≤ k ≤ n\n- 1 ≤ a ≤ b ≤ n", "Example": "Input:\n8 3\n3 2 4 5 1 1 5 3\n2 4\n1 2 5 1\n2 4\nOutput:\n5\n6" } }, "cases": ["60fd81d9b9b3b9f1dece3234e1c7097adac2bd7a2432c4edc882db9a070a48f9/1", "2b58cba29fffab122f86d1935b294762f7a5b767d92ca0461fec4184dc8ede41/2", "b5a883dd5645c076d20d14a196d27b7405233d9d7f1239694684333cf7841ad0/1", "0b765f6077e6714df2f5abe421132876f848d9b8f063173e19e77154bd9ff896/2"] }, { "id": 1652, "name": "Forest Queries", "solves": 3888, "attempts": 4032, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given an n × n grid representing the map of a forest. Each square is either empty or contains a tree. The upper-left square has coordinates (1,1), and the lower-right square has coordinates (n,n). Your task is to process q queries of the form: how many trees are inside a given rectangle in the forest?", "Input": "The first input line has two integers n and q: the size of the forest and the number of queries. Then, there are n lines describing the forest. Each line has n characters:\n.\nis an empty square and\n*\nis a tree. Finally, there are q lines describing the queries. Each line has four integers y₁, x₁, y₂, x₂ corresponding to the corners of a rectangle.", "Output": "Print the number of trees inside each rectangle.", "Constraints": "- 1 ≤ n ≤ 1000\n- 1 ≤ q ≤ 2 ⋅ 10⁵\n- 1 ≤ y₁ ≤ y₂ ≤ n\n- 1 ≤ x₁ ≤ x₂ ≤ n", "Example": "Input:\n4 3\n.*..\n*.**\n**..\n****\n2 2 3 4\n3 1 3 1\n1 1 2 2\nOutput:\n3\n1\n2" } }, "cases": ["3449bef76e125301b961de9df9811d771bae750aa83756c21a431db7ab4ed381/1", "fe7672bc7f32370741f1f66695943ae173851abcc128c4a045796efb856f3113/2", "66352a790bf8373d0ed42a343cb52ef1990f918d6bef537b7f34795be7978b1f/1", "f70a4b8c5cfb7e9b02766cea826efe6f7a555cb99575514e5942380f1752bcd1/2"] }, { "id": 1143, "name": "Hotel Queries", "solves": 3030, "attempts": 3227, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n hotels on a street. For each hotel you know the number of free rooms. Your task is to assign hotel rooms for groups of tourists. All members of a group want to stay in the same hotel. The groups will come to you one after another, and you know for each group the number of rooms it requires. You always assign a group to the first hotel having enough rooms. After this, the number of free rooms in the hotel decreases.", "Input": "The first input line contains two integers n and m: the number of hotels and the number of groups. The hotels are numbered 1, 2, …, n. The next line contains n integers h₁, h₂, …, h_(n): the number of free rooms in each hotel. The last line contains m integers r₁, r₂, …, r_(m): the number of rooms each group requires.", "Output": "Print the assigned hotel for each group. If a group cannot be assigned a hotel, print 0 instead.", "Constraints": "- 1 ≤ n, m ≤ 2 ⋅ 10⁵\n- 1 ≤ h_(i) ≤ 10⁹\n- 1 ≤ r_(i) ≤ 10⁹", "Example": "Input:\n8 5\n3 2 4 1 5 5 2 6\n4 4 7 1 1\nOutput:\n3 5 0 1 1" } }, "cases": ["5ccc3a14e0431a01218281faa27eedad8297e9b192c98a3356b1168a5739f4b1/1", "357a1aa8a3008e3f9b37f0be0a62af4c3eed5e0e182b6e67a842741fb40b99f0/2", "e72e9b565fd7d87741517e1106a08d55ab5ade22ac75fb96df70dcf3c58e0f11/1", "784b1b1fa43e27aa8ab2d5a7568122db03fd2d9798c5418f2c82b98adef77df0/2", "3554ce13efeea1715146280dfbde3efff70d3caf58d345af3dd23b6d3685c953/1", "a6055685b19f5a3a8494394075f00f42fd7b3c3f99dc0d6d3208cd09bf891301/2", "ef8fec256e1e718ef52d3e10e2e279303a9efe8cded642719cc4c21ce7766f9d/1", "7435d82fffe88439385be7fa547716a186534abe5c139f9db437ebd1afe79dd0/2", "980420c7ba7251171127ed9f3d1d69fa00de3e844ab1c6af5629d2750e0d64a3/1", "fa16d3ae838291c8e29ddec4d0d2f30fdb6e237c45a03ccf7ebff64440447527/2", "38fc6fd69447788515362714e93e26ab647cffaff15d14be88aeb4ab162d864e/1", "b3d8b599d36fa5f2f311f4916c44453067e068089ec05c5284608e5eb039675c/2", "37164c29e902fc2b7b74a5f020379f7a7d251eaa7d4e2032709c82d35e83609a/1", "a5d777a6e63e06165e1f4b398b5e9ac685442dd0f3d4e62071738269a542d235/2", "855eb32f0d9242c654f27d881a2e7a410d9610f0e745619010831a276b47996c/1", "4da00d60025b23dd3a110d17f3d35755c1c1ebe7ce7acac00faf598061d5109c/2", "bd62920b87c5c9dacac71d8c7c149b5549151d4ad83727064e0ab37c90ae06b3/1", "9adf185c99b64d4cfaaebc60ef7779dec7c37356387a8eeab9417c93f49c5411/2", "6162017e24ed30dcd8d3b668addb7b58afd11bc65808512c1d079d04cd7e0384/1", "1dabb69a0aa32a464447588b4e0fdc1150ed171e759e1aa10dcbea9c46110fb4/2", "6cadcddf2f9f0b251a5ed87f97c6964075ed0a32cccf417c2e12322ae5ad40fe/1", "41076331dd794a2a155e9a375f6d9227cb82906867adce1b5089aa553c4ccaa9/2"] }, { "id": 1749, "name": "List Removals", "solves": 2541, "attempts": 2694, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a list consisting of n integers. Your task is to remove elements from the list at given positions, and report the removed elements.", "Input": "The first input line has an integer n: the initial size of the list. During the process, the elements are numbered 1, 2, …, k where k is the current size of the list. The second line has n integers x₁, x₂, …, x_(n): the contents of the list. The last line has n integers p₁, p₂, …, p_(n): the positions of the elements to be removed.", "Output": "Print the elements in the order they are removed.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ x_(i) ≤ 10⁹\n- 1 ≤ p_(i) ≤ n − i + 1", "Example": "Input:\n5\n2 6 1 4 2\n3 1 3 1 1\nOutput:\n1 2 2 6 4\nExplanation: The contents of the list are [2,6,1,4,2], [2,6,4,2], [6,4,2], [6,4], [4] and []." } }, "cases": ["ce6a9c7c2ea5d4b2a66d6858fed5110940255d1bafc19403a2a9bb05153954d8/1", "acf16fa4abafca3f838456e9c321e4146e732e02ec454dbf779b8d3bdde69f9f/2", "e913edfcb9b952d9b496c5197e05386eaf0141cb9c8179e2d173100af23c4116/1", "56ef1f789d5419c8249b69f7d5df8a33d12201ae6bf7f0d4d3f422059c7b4774/2", "59aeec5eef3d6d3de232f1bc7dfe48e2b89971753fb8c417cd89b7b8a57fb472/1", "1bdafb9dce64e3e53553090719bf8ef9b0bf4a07f6f1369cf030e1a14cecac46/2", "940ff2d73934e972bbadf8561cbba5f4ec386c8984ee6d50f8e80e8632385fc6/1", "55f0b263a96683ad1ab640e6325c3d020e97cfcd21cab535a4f061466a677a6f/2", "3c40580e611b65ccb0e996fe21d1c903f7f0417a697ca75a063ca3491dc0d136/1", "793eecb1db698247885c07ff36a01d050e22e9fa598fd56e15945333c01e68b5/2", "3af9929e0106dbabfc6bfeb20a773502a32bd1915d49d6a2572bfdcc29b90a1d/1", "7c27855895ed6b3102f5e53fa8197514cd3901a9a2523a007c7791f91fa5e163/2", "6140d79fa6ee664fc251d08f504bd8205c85963d539f4fc4cdc6b98fdc3774b3/1", "92165959b2aafde2df4cdc0daae41264a32d4bab38a4ad905e0f0ca524a77505/2", "7a9c52aee1de9b1cef9a3a6a0b8306e45c54329d4508e4e02d7b6349b56a17fa/1", "cd760c98739fa15221ec623bf8e333088f88381ca7fbf77e5304dfacc87593fe/2", "e7c183e4985c96af1d6e7531ac656152dec3a6971976f7f4ef35d2d0080f6a86/1", "26b967e0b517fd5a35c498f6c098e4149cd3e713094c56a7400d104e23bcca48/2"] }, { "id": 1144, "name": "Salary Queries", "solves": 1921, "attempts": 2276, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "A company has n employees with certain salaries. Your task is to keep track of the salaries and process queries.", "Input": "The first input line contains two integers n and q: the number of employees and queries. The employees are numbered 1, 2, …, n. The next line has n integers p₁, p₂, …, p_(n): each employee’s salary. After this, there are q lines describing the queries. Each line has one of the following forms:\n\n-\n!\nk x: change the salary of employee k to x\n-\n?\na b: count the number of employees whose salary is between a…b", "Output": "Print the answer to each\n?\nquery.", "Constraints": "- 1 ≤ n, q ≤ 2 ⋅ 10⁵\n- 1 ≤ p_(i) ≤ 10⁹\n- 1 ≤ k ≤ n\n- 1 ≤ x ≤ 10⁹\n- 1 ≤ a ≤ b ≤ 10⁹", "Example": "Input:\n5 3\n3 7 2 2 5\n? 2 3\n! 3 6\n? 2 3\nOutput:\n3\n2" } }, "cases": ["04844706dc2f784b41e3f841a6a2b7f6c3c293b90f97ccb5d4be7bafe6562909/1", "dff2ad9c96488d3e0c06c12fc8f1fe46584a5ab8ea5e6f6e014f4fc95c635244/2", "fffceaf0229f2486ba3206d8f0787c0f518cf06405a4f6b65db97ccf9e46524d/1", "54ed499f03438260e22c53f956aaba1ebbcfccd351c398ce3877137a68d94f9f/2", "06c2bd77ee7dcee5ff9ad9d34ebeba849396c86cc726588a71ae265a8ea51b78/1", "abeeb31194984be6d452bc21f6dc8685a530d2a5b42af055b0295bf19d0751a9/2", "b907577673bf51516e4b14a7c41f58b75a9c18c4b441f9a8a604cc39e3cf563d/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "dbf78c24d33ade7a66a85ab5718281196ca79e1cabf6998380b247e9aad6ab93/1", "0000000000000000000000000000000000000000000000000000000000000000/0", "cab0a275f2a1622aadfbc165272f27343f89040a689fb12eea51e92e4e230255/1", "ed297d7ebb23516847ebef7d2fda06d89ee0e14b0d1fb3044921f12b328cdbf2/2", "d26bd8bac144558b9c920fc40e195e1b7e13b88e9aefb45ddc8e05a5397ec9eb/1", "a83f0fa66eed70761ba92be952655c8526e924fb5eea9da2b9daaec782707945/2", "5fa40ca4cf85085295ad82f6fc372bafaea3080bd877bc51a128df8cd9fd87d2/1", "ed4ed053932338bee2eed4dbf027b45767768c33a66b190a61489e7a6bdac14f/2", "2f4ab5b756919c01458124c57fd507520b773a708e025571d277bb833f9ad9c7/1", "3940101c0f8f9d5bcdf1627de780794e55a2dd12a8af3f77c940e89eaea767e0/2", "44dac63e41e057a760986d991288c6c4fe944a2426e3c0f2f204f032cc4f204c/1", "0000000000000000000000000000000000000000000000000000000000000000/0", "aa7684773afad1ef9e9132cbee187f25c28e0512daed608dce7747ed694b901d/1", "0000000000000000000000000000000000000000000000000000000000000000/0", "8eeea65b4becab74da95bf08e81f0bce85d5700ae66c7fc4d66cde49a3db89c9/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "bdedfb5c1eec02c5aa9f61c932a80c9dd1fc7c0d3adc2870eb6e15aa05b66005/1", "1934e1fb60f4b79cc18cb985789ba10349b9a9fb53719dd45f58e916c99a6874/2"] }, { "id": 2166, "name": "Prefix Sum Queries", "solves": 1122, "attempts": 1221, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given an array of n integers, your task is to process q queries of the following types:\n\n1. update the value at position k to u\n2. what is the maximum prefix sum in range [a,b]?", "Input": "The first input line has two integers n and q: the number of values and queries. The second line has n integers x₁, x₂, …, x_(n): the array values. Finally, there are q lines describing the queries. Each line has three integers: either \"1 k u\" or \"2 a b\".", "Output": "Print the result of each query of type 2.", "Constraints": "- 1 ≤ n, q ≤ 2 ⋅ 10⁵\n-  − 10⁹ ≤ x_(i), u ≤ 10⁹\n- 1 ≤ k ≤ n\n- 1 ≤ a ≤ b ≤ n", "Example": "Input:\n8 4\n1 2 -1 3 1 -5 1 4\n2 2 6\n1 4 -2\n2 2 6\n2 3 4\nOutput:\n5\n2\n0" } }, "cases": ["4a1f302099668c279c285ffeede12a4f6cbc2c00a458ddeb817fe458ec962591/1", "4d9c10be252b043631fdec2a2308bbc4ac0824aa36409e5bc39300ccb6c338ca/2", "92a1620f561a370962f7a360b41db5cd1760037b5b345dbe7679a6a2140a4e56/1", "74214dd6844003c3f879c09bf3c1bbbf82ec353d0f9bca333e239fe89b113ea5/2", "518480011ae3b3b003431d67224feba901f758e07dba6bc3adc1f3faa65b970e/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2"] }, { "id": 2206, "name": "Pizzeria Queries", "solves": 913, "attempts": 944, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n buildings on a street, numbered 1, 2, …, n. Each building has a pizzeria and an apartment. The pizza price in building k is p_(k). If you order a pizza from building a to building b, its price (with delivery) is p_(a) + |a−b|. Your task is to process two types of queries:\n\n1. The pizza price p_(k) in building k becomes x.\n2. You are in building k and want to order a pizza. What is the minimum price?", "Input": "The first input line has two integers n and q: the number of buildings and queries. The second line has n integers p₁, p₂, …, p_(n): the initial pizza price in each building. Finally, there are q lines that describe the queries. Each line is either \"1 k x\" or \"2 k\".", "Output": "Print the answer for each query of type 2.", "Constraints": "- 1 ≤ n, q ≤ 2 ⋅ 10⁵\n- 1 ≤ p_(i), x ≤ 10⁹\n- 1 ≤ k ≤ n", "Example": "Input:\n6 3\n8 6 4 5 7 5\n2 2\n1 5 1\n2 2\nOutput:\n5\n4" } }, "cases": ["a1e581793068330e91dc7634b744ff93883852006bdc23171bfcf85b40d01fdc/1", "94e1808f404cdf706e5ff806947f5639e6c96bd15b1e2485973793731d36f3a9/2", "41f49fa6a70a04ce35d709f115fbf2a7f3f5061bcb7d0f725cb086f11bcf1435/1", "bd70897af940a0b5c3987315355b7750b80ec4c2d46f61cee6c4006e21928acb/2", "b51c21e742a5064f69f93dc3168f26502cba8d75b6944977f3b3bff2fe7ccdc1/1", "d2d062585979c8c80b9352dbe829d5168b4ba3e58a266b6345d603818f2d9b2e/2"] }, { "id": 1190, "name": "Subarray Sum Queries", "solves": 1675, "attempts": 1835, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There is an array consisting of n integers. Some values of the array will be updated, and after each update, your task is to report the maximum subarray sum in the array.", "Input": "The first input line contains integers n and m: the size of the array and the number of updates. The array is indexed 1, 2, …, n. The next line has n integers: x₁, x₂, …, x_(n): the initial contents of the array. Then there are m lines describing the changes. Each line has two integers k and x: the value at position k becomes x.", "Output": "After each update, print the maximum subarray sum. Empty subarrays (with sum 0) are allowed.", "Constraints": "- 1 ≤ n, m ≤ 2 ⋅ 10⁵\n-  − 10⁹ ≤ x_(i) ≤ 10⁹\n- 1 ≤ k ≤ n\n-  − 10⁹ ≤ x ≤ 10⁹", "Example": "Input:\n5 3\n1 2 -3 5 -1\n2 6\n3 1\n2 -2\nOutput:\n9\n13\n6" } }, "cases": ["7d775b6a820aa2a96ac63674b32cf29c0e615e7690b9e551d42b0d4d6d735404/1", "bc188d29c28c5dc855d10fc4d8f688ce7c27d28e54b5115c45a016f9668c4dfe/2", "0998433ef8e606b64154998a4c0317dee68f622ae214a06b0003166ff14391f6/1", "c814688ffc257a7ecff595b7ffc90d31a2572d11acdfb86855170148c58f6975/2", "d0dcdee4177f1d8bf82192d091a870e7b0fa9db76653d426e80e4d9d7727b69a/1", "ace573ab17a96a85a2f0bd0aa2ff2ce55065848eab6f840062a95be6d26c4f3b/2", "a044ca63ef1c8072b87951f930339e6a793d9b64cfe88172b249186d62734260/1", "124377dcb2026abb3bf506840f7d183d318cc40d00a42bac338bc0b43cbda369/2", "044caa38183ff10bcbcb92352cdc5fdba507ada4315b47ce7f0022d602980b4b/1", "f7e4397c429ee99e2ef43106d22eca771cac5b79b5d29acc512412724185d7ff/2", "11acfad7e7cd40e7aa883e2b9eb0447926f125d0382dfb1a01e7c6192fd04f08/1", "f6ad5c8b694250b0da8e71cfec7280e2ed9e8ca2d7f11b89d16e71186b8dbb3e/2", "a8595b58f9711d3ed546e34c12a9e237a69258abeba53de5fbf6e2d1da6bb63b/1", "2a4eeacc242af0780181cb382fefaa741b9def2e1d84b7d64bdc372502234bf6/2", "782faa9e9c9c4eb475867d042b4adcb856ba235b340209397a4a0c0a2ed8bef1/1", "5e64ab786ead5ce5d554fb0aad6368cba9917504a01cffb7121c4d77bbd3d050/2", "14deed5e825483091e7423a6ef8cace9e99f5ae5605f102339809e2f12a0a116/1", "b1cac9e8bdea227fb1755161c781d0b67c94aa9c0266f16fa0924531769f7978/2", "4c30da0a3d3cd240adcadb64542db485a26ba3bce0d779b59828bd2c108e3cf4/1", "b622f824ba308c4de3de12ec8b5562d369624c54a95f86dd8d723b93cb9c4bd0/2", "cc693add7fff97206f2950ef3286a75be1c3ddcfa0020bb96dfac6070e660cf0/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "6b0d6c27dfd4d497345cc8231a27d68c62552b83f258070b92210d9ffdc2fc40/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "a3a6e177c95428af3fcb39c70224f5b23d9346cb48ce2cd9001276c82ceb16d9/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2"] }, { "id": 1734, "name": "Distinct Values Queries", "solves": 1645, "attempts": 1917, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given an array of n integers and q queries of the form: how many distinct values are there in a range [a,b]?", "Input": "The first input line has two integers n and q: the array size and number of queries. The next line has n integers x₁, x₂, …, x_(n): the array values. Finally, there are q lines describing the queries. Each line has two integers a and b.", "Output": "For each query, print the number of distinct values in the range.", "Constraints": "- 1 ≤ n, q ≤ 2 ⋅ 10⁵\n- 1 ≤ x_(i) ≤ 10⁹\n- 1 ≤ a ≤ b ≤ n", "Example": "Input:\n5 3\n3 2 3 1 2\n1 3\n2 4\n1 5\nOutput:\n2\n3\n3" } }, "cases": ["e8eeeb0db3ee5bd05258b59dae7494342be13ba1944f460fbd0357f13146032e/1", "88b3b092f0d7998329995bda2ac8eecffab66721b07bd0d9430e85d6956785bd/2", "f7bea646ac182df8c03d22a82d0f81fba947c6e2d29484e216d123b6d9feeeb4/1", "45c7f835ac4171b7fb02a1e6bad05697d2353bfb4c4bb848ab321b20b01c61d5/2", "44fc033453f2675f83627382c47757f7030df88cd7cbdf6bce99c0c157f9ba86/1", "7d3ff5b658aac42485a4c430d0ab1546a6ca87124bd2baef6d77744928b99196/2", "ad8c77f16623e7c9232f5219169c980c485826d2fbcb83b159f207ea253c8cdd/1", "901ad2821b0784c8eb62c458f7c8678b77eb1fc7601f234b48cd903e41d44cae/2", "9454d2a9936fc8b59dab75d24b833729100e9eb5732fedb5dee715389bfbb724/1", "4b1da06317d0a8d41155c95d83d4b6583d1b8544b71ea54a747eef2da84b041a/2", "d2725107853bec6edc8899f80da59ea3d977a5de7cc95a34e8718e2d683c312d/1", "a6035b5c56fabd11ab7532dc641fc398125152b702593854a4c8551c32d146bb/2", "03c804d91a731a7f1c0abd45a5cf339ed0120d60fe1b18cfd7791380abc1aac6/1", "9e5bf1f4f56d09614d3fbdd25ed6b7613c42c15904a5803f70f6bc090c504051/2", "eed146a23e8a16075cebbe28e92e390919cc6728c681f05890010fa7bb02eb80/1", "6d116ad8088d64e09bb7ccf028b877611627816b9f2f9d77b3a5595d55e02f37/2", "db284b5b1d98aa53ea91df129d978ac2992b490cc90a6d2e01bd89b1e78a4814/1", "8d31cd93a3aeb683699a60c49e5def7cc1616aa8e0839879b6e0c0134f2a26c7/2", "2cf01201430061b650b6a6817bb1d75d2cefa2ebdee7fdc2873c020f4870fe7f/1", "8935c4aff4e555232283a9b0e9941a3cb5df71dcb53a736b24eb9ebc83dfac05/2", "42d140d4e58472c164649cbdf3cf3d01a0e49a82d3c332a3c170d8ba3dda8f79/1", "f5fc7fae10d0c0cbbfd6776652476b285a1bbf56514e2c7eb4ae71a284fed3a4/2"] }, { "id": 2416, "name": "Increasing Array Queries", "solves": 437, "attempts": 516, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given an array that consists of n integers. The array elements are indexed 1, 2, …, n. You can modify the array using the following operation: choose an array element and increase its value by one. Your task is to process q queries of the form: when we consider a subarray from position a to position b, what is the minimum number of operations after which the subarray is increasing? An array is increasing if each element is greater than or equal with the previous element.", "Input": "The first input line has two integers n and q: the size of the array and the number of queries. The next line has n integers x₁, x₂, …, x_(n): the contents of the array. Finally, there are q lines that describe the queries. Each line has two integers a and b: the starting and ending position of a subarray.", "Output": "For each query, print the minimum number of operations.", "Constraints": "- 1 ≤ n, q ≤ 2 ⋅ 10⁵\n- 1 ≤ x_(i) ≤ 10⁹\n- 1 ≤ a ≤ b ≤ n", "Example": "Input:\n5 3\n2 10 4 2 5\n3 5\n2 2\n1 4\nOutput:\n2\n0\n14" } }, "cases": ["f458848c7f3c15b02f1d2c725ac8396600322e6b1b09358dc1f1ce302e262d51/1", "183679f858a0ea673f95af5490a0f884a3ffe3092ee4de26388d2d352efa05dd/2", "9b980df0eb2f6e76b31fc9fdb415ca82a8d6d17e9c283b5086f8abf60ace4bf4/1", "16fda5573120d0f8e561d168d351d21cd5ca1287eb1202b367dc1b5c5404d631/2", "fc19e9d6513cf71649b8d80742650931fca2970129787afb739f6e727c6f857c/1", "70626e177723ac6531fbab8914f9c4ca2b3876ddd0665be6823ed2f41a512044/2", "2cf2c88b3f2c59f16ebeab30991bbaf56479c5e0ccf18ae1737a7d5245478bcc/1", "115aacad666d79bcea30a9334c9f57c3b4a044949ccd6bb0fe59a4dc18ee6da2/2", "527ecc38d0edbc712af0a370d553e854f03796a031c61180689855068676af86/1", "f96b90f069436141ffc3aa6b6903ac131a6dac009c1df12a1ab3bf18b4e708b0/2", "7b3b9596827896d03eed736ff3f336a07d1fb6166031eab9d8fd471407234f58/1", "bbcaee61bd28ec55111698bc5c923d2bb2ee79a3e4ce87f8557edde83911189b/2"] }, { "id": 1739, "name": "Forest Queries II", "solves": 1199, "attempts": 1275, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given an n × n grid representing the map of a forest. Each square is either empty or has a tree. Your task is to process q queries of the following types:\n\n1. Change the state (empty/tree) of a square.\n2. How many trees are inside a rectangle in the forest?", "Input": "The first input line has two integers n and q: the size of the forest and the number of queries. Then, there are n lines describing the forest. Each line has n characters:\n.\nis an empty square and\n*\nis a tree. Finally, there are q lines describing the queries. The format of each line is either \"1 y x\" or \"2 y₁ x₁ y₂ x₂\".", "Output": "Print the answer to each query of the second type.", "Constraints": "- 1 ≤ n ≤ 1000\n- 1 ≤ q ≤ 2 ⋅ 10⁵\n- 1 ≤ y, x ≤ n\n- 1 ≤ y₁ ≤ y₂ ≤ n\n- 1 ≤ x₁ ≤ x₂ ≤ n", "Example": "Input:\n4 3\n.*..\n*.**\n**..\n****\n2 2 2 3 4\n1 3 3\n2 2 2 3 4\nOutput:\n3\n4" } }, "cases": ["0cb4c785d596ae376f0b260d130a1ec118c4f395fa56d0fce2579e4c2279bd78/1", "494f57dec01c1331ccf9de147028a76ca28186bbe6530525e4fa41668ecde6bc/2", "1a5117383618bb712f0c771925437c1598d4bdc143ea2cdb425aaa3641d7d314/1", "7d73e6ffb60e6767a98f163a3159741ab4fda2800a2a240c482fd559f81cd378/2", "93c1898a42ab5285172c5f23625c0344bd648461345628301a70cbbc0b72f18f/1", "dafd9c66fdfb1bd5e1d885159b5251164599f14ed43077eb748150d2347f20f4/2"] }, { "id": 1735, "name": "Range Updates and Sums", "solves": 1227, "attempts": 1504, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to maintain an array of n values and efficiently process the following types of queries:\n\n1. Increase each value in range [a,b] by x.\n2. Set each value in range [a,b] to x.\n3. Calculate the sum of values in range [a,b].", "Input": "The first input line has two integers n and q: the array size and the number of queries. The next line has n values t₁, t₂, …, t_(n): the initial contents of the array. Finally, there are q lines describing the queries. The format of each line is one of the following: \"1 a b x\", \"2 a b x\", or \"3 a b\".", "Output": "Print the answer to each sum query.", "Constraints": "- 1 ≤ n, q ≤ 2 ⋅ 10⁵\n- 1 ≤ t_(i), x ≤ 10⁶\n- 1 ≤ a ≤ b ≤ n", "Example": "Input:\n6 5\n2 3 1 1 5 3\n3 3 5\n1 2 4 2\n3 3 5\n2 2 4 5\n3 3 5\nOutput:\n7\n11\n15" } }, "cases": ["1b1e5ae556d0517e93101a2476729308f834f19bf150dc9573b5058d36b715a9/1", "68360080d5d35f4ab2d7912d7446ae79db45a1ae00b5c3f32a2e7880c98356b0/2", "e2547b72028c160804b43e3f4d53c0f10fc35307c5488428579a52115b0e69a7/1", "3f17e90b4e82826b176b6c9ea64f59535a78179c2807d6efb9a59192d350d203/2", "c5e4af01d525dd2259f5284b1edc80238f92347ced2aa430399dbd20f92b7e44/1", "67bed52ceefb5091ff8ce4ca0dd92f324c192a708e6343bd19d962c9e502352a/2"] }, { "id": 1736, "name": "Polynomial Queries", "solves": 988, "attempts": 1160, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to maintain an array of n values and efficiently process the following types of queries:\n\n1. Increase the first value in range [a,b] by 1, the second value by 2, the third value by 3, and so on.\n2. Calculate the sum of values in range [a,b].", "Input": "The first input line has two integers n and q: the size of the array and the number of queries. The next line has n values t₁, t₂, …, t_(n): the initial contents of the array. Finally, there are q lines describing the queries. The format of each line is either \"1 a b\" or \"2 a b\".", "Output": "Print the answer to each sum query.", "Constraints": "- 1 ≤ n, q ≤ 2 ⋅ 10⁵\n- 1 ≤ t_(i) ≤ 10⁶\n- 1 ≤ a ≤ b ≤ n", "Example": "Input:\n5 3\n4 2 3 1 7\n2 1 5\n1 1 5\n2 1 5\nOutput:\n17\n32" } }, "cases": ["8bea74fd021fc7afc80bf2558aff6a87a270f1adb4b011d72e2b51650b282a73/1", "8ee8e4a983806418ff2188b4f69653e246b6900d80fdca4380abc1bafae24317/2", "8cbd04b8a2009f8bbde9651f97323f316136bf5e17a112f48f705ce37f2debed/1", "2018d6e4dfe86eb8405a0aa438ed3f2a113cb29f144e52be0991114d35c4add0/2", "e4b816ad81d385efe6edde1697990f4b5cf364d2f4c278682cb090f5943bc0f5/1", "0b1edaeafb505fd99f7f0bbeb1ad0dd20a7afcf551909feea189dacabcc034d7/2"] }, { "id": 1737, "name": "Range Queries and Copies", "solves": 663, "attempts": 696, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to maintain a list of arrays which initially has a single array. You have to process the following types of queries:\n\n1. Set the value a in array k to x.\n2. Calculate the sum of values in range [a,b] in array k.\n3. Create a copy of array k and add it to the end of the list.", "Input": "The first input line has two integers n and q: the array size and the number of queries. The next line has n integers t₁, t₂, …, t_(n): the initial contents of the array. Finally, there are q lines describing the queries. The format of each line is one of the following: \"1 k a x\", \"2 k a b\" or \"3 k\".", "Output": "Print the answer to each sum query.", "Constraints": "- 1 ≤ n, q ≤ 2 ⋅ 10⁵\n- 1 ≤ t_(i), x ≤ 10⁹\n- 1 ≤ a ≤ b ≤ n", "Example": "Input:\n5 6\n2 3 1 2 5\n3 1\n2 1 1 5\n2 2 1 5\n1 2 2 5\n2 1 1 5\n2 2 1 5\nOutput:\n13\n13\n13\n15" } }, "cases": ["9d22617bfe4f2667d18259184bc89353d86cbd596d5c1b8d86f40e3f0960b1f0/1", "03a0ff85557b763d58671444cd9ca2f8ee684c08d3158469f1ed865a0f8de6ab/2", "f6b29fe0eb54888691d9be819f5eee774ce836c7a71053822fd79733eef15587/1", "f831bc5389426b476fa5558d7e4b2edb5bb18e87e76f63db03d94062ca45a7b5/2", "cd42a6bd1c37351158cc2c662e095336f4ebd45422e89c75de7f84b89728d4d3/1", "9f45f4c41336c52539f35014575e086dcc54db6a121db713b0436e0a07bb0901/2", "e2595a8317b30a6f7927d98c9839689a02ad224004cd2985f1c56b34b3e6df04/1", "5741af5d6b130341856c36504cc8ccd4a6efe87edb868804c8cf4f3ebc3b62e2/2", "60c73fa1b6715c24ec4136cff3ba7c8fcc390243e491ee587b2ac10fac48e207/1", "a60c27ec463242920c0ec5464ee2ce3a1661adeac5b79fce0eea8a998ee1d409/2"] }], "Tree Algorithms": [{ "id": 1674, "name": "Subordinates", "solves": 6218, "attempts": 6671, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given the structure of a company, your task is to calculate for each employee the number of their subordinates.", "Input": "The first input line has an integer n: the number of employees. The employees are numbered 1, 2, …, n, and employee 1 is the general director of the company. After this, there are n − 1 integers: for each employee 2, 3, …, n their direct boss in the company.", "Output": "Print n integers: for each employee 1, 2, …, n the number of their subordinates.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵", "Example": "Input:\n5\n1 1 2 3\nOutput:\n4 1 1 0 0" } }, "cases": ["ebf76fa7040214b571ca66acaa390683f458ef00d61217afffdcf98ca0f1b2d0/1", "6e2ce2576ef107900328dd3f6988421250be3b2a9cded6cb685ef915cd144661/2", "90d75aea45ad2bb63d55fac9b4a80b659555b7b772800cc675719ec37968320c/1", "1d85e182b97fc50859031252d9311899b30f6baf82e41aba385a5ad6c6c7a7e3/2", "51f849d567866509a3517d0fc2bc3b1d11588d2f528e4a2fba108eaff48db575/1", "d72fd3b7c438da448e32f819b8ebedd125e25f18fb7335e35fdeabba28cec539/2", "b65f0c222535dedb99e8b199937ebfcfc58738e71935d73d962ae432d8f645e1/1", "cb7b4f0d324f5479dcd76b16cc16b251f58f87b287e85e6f2d8f1e47d368db49/2", "0d2a187d11a955f78b7b1c275fa3c397fcfc46b552306320b09a7a84e6aa119e/1", "5eb1529c40594a83bdd4f7fa11a882e846b32d3fefa93f0b7b248383f9b2b7ee/2", "82c3bf5654783b18d3282cba7ea296c18167022a6dbd4b109b327d17cebb215c/1", "aed6b9632deee4b09c1b85980efd1a00be9b03c392bae1fb5b97d42dd6fc8ba4/2", "451d660bc5f37a981539cf07c4c6a182693a7d165b4589ecb1165a72555ff90a/1", "6a711e97cc251ef6560969e1e66bc409c9f31569939faf6f0306a8e55b8926a5/2", "489088cdedcc46ca45475fc6c74345064b48efd2ac8cf8fb470dbe352debb1f4/1", "a458fd10c4463ef705e2091172578f2d96cb920bd38797979fcfb78fb670ff26/2", "581b793d79228e7ae47aec6545c9f0446e5e48add7740117b9e9649d4be3f44f/1", "b4f63b0739bf5fbe76ca54109fe645450e414f969e1520b3e70e62adb9e572c7/2", "c079735bb11242b2f9b07d17b39f7149d9c383588b184aa30b7a716464ba49ad/1", "4b8fc1afc669642a5ddbbef36b81b2e876185bf6c0d070ae671616df685bbcb1/2"] }, { "id": 1130, "name": "Tree Matching", "solves": 3350, "attempts": 4045, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a tree consisting of n nodes. A matching is a set of edges where each node is an endpoint of at most one edge. What is the maximum number of edges in a matching?", "Input": "The first input line contains an integer n: the number of nodes. The nodes are numbered 1, 2, …, n. Then there are n − 1 lines describing the edges. Each line contains two integers a and b: there is an edge between nodes a and b.", "Output": "Print one integer: the maximum number of pairs.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n5\n1 2\n1 3\n3 4\n3 5\nOutput:\n2\nExplanation: One possible matching is (1,2) and (3,4)." } }, "cases": ["e7e9cf91eab5a5cdf19fa4727c4b62a6aa8759b75c62266f0826271b382d1f32/1", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/2", "73ab6a4829f75888c3144af2a8340187aa83ec136ead6d55a714b4535597ad27/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "bcf3cd3df0f4e9f0b7bbadcc6058375398c21c585ca91708fcd0c3d92fe0a7a5/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "bf38b1afd58649c49a0536f07b3bb230ccb9e14f7429f90712257992419f9ffc/1", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/2", "4405cfc5f3edd2d48188f45e28d333a792526210ec566aaf787c58ae460031df/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "de56c60b577ac8e62ade2b107a8e4b188ab670464b877507e49c145175249559/1", "b80500a01f984c764f1a3b486622d0ef7cc5b13fa9bd57ec9015113eaf875597/2", "6b3283ef80094358a264ef3d42020a191f1a7b8f8f58ae4a2c973c97f5527f01/1", "27f8d822ea64f5bdb9564c533195e35d21689b84bf074d83bb2d7a866b5276d4/2", "6724837eb18949c999dd7b29a8277cdc884aeceb871dd121ebae57848b39e60d/1", "4904fd5e0c9950a84ada002d68cfad9f02aaefaf58717f7c821dab2ab9e5d255/2", "846279a0ebf87f7f759e1f356ed5b83038ab09bc34897b82a8213d3a5123d59a/1", "7b8a3d23cc3cc746619b0eaed604ab8ffef35572b4e8b20c22a3d4cd81585b99/2", "aa4557381645e4ac157ded66f89a046e92885c1fb1574bf9969210689d805681/1", "5b47600778ba97136267dff50f33d7718e6d08b757e34deb5e4a62a3e54caffd/2", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "fdcb27265764b2a73c62380d364aa177b18028a2d6fffe621bac5a23affde265/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "aede340eaced53cce7b3e2ba1ab40d051393621e18914376d4912253de338f68/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2"] }, { "id": 1131, "name": "Tree Diameter", "solves": 5100, "attempts": 5435, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a tree consisting of n nodes. The diameter of a tree is the maximum distance between two nodes. Your task is to determine the diameter of the tree.", "Input": "The first input line contains an integer n: the number of nodes. The nodes are numbered 1, 2, …, n. Then there are n − 1 lines describing the edges. Each line contains two integers a and b: there is an edge between nodes a and b.", "Output": "Print one integer: the diameter of the tree.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n5\n1 2\n1 3\n3 4\n3 5\nOutput:\n3\nExplanation: The diameter corresponds to the path 2 → 1 → 3 → 5." } }, "cases": ["559a592e1a04587c4cac59eed23ebb830ca1aec863f669ad11b71bce050dbbfb/1", "2e6d31a5983a91251bfae5aefa1c0a19d8ba3cf601d0e8a706b4cfa9661a6b8a/2", "72daf7cfc7bd08ad9a68884e93e937e2130beb7c8385e2ee0feff77aed1e72d2/1", "2e6d31a5983a91251bfae5aefa1c0a19d8ba3cf601d0e8a706b4cfa9661a6b8a/2", "0418499f44557a24d0269f21b8f63538c2847777c8c04cd780bdd26cf9b7d0b2/1", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/2", "d0e11b8c98edb2dac1825475467fa1cb842bf32c27f8269f3895ae3e057714ac/1", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/2", "e3c59dd8c2373b05100175d452175b30deb7fc195d7f5225f43a5b5c5bbe9ea3/1", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/2", "cb5588e3605e23a78a83e394363aee61bce2a73fc4320bd5947c5317866bc858/1", "00d9cd208c4bb685541067ed529222ed418e5cc75d71304d8ef159f3ea3aa50e/2", "3227240cbbb23e2862900c3ff70a54b1eb77603be194fc99fcc6b88170deee43/1", "95567d7c5b4d6a10bd866ace49436a3d44490d3137df7ef3a6099758c924150a/2", "a65630ee9e3d2a0166c0329e9f94400817c9c9db1bb8e87fe09984f1a5cba3f1/1", "f7faed57e275c5a58db486a06344671f7044eda717dec2d914815f50ecb8d095/2", "175fd0623f0f6805983331ccf4deee8ab90beb952d6c71dc253e3ba60b071223/1", "39b8dc3fc8b44765c8e6f1adee04c5b465e555ab791cc42d0d9e810d5b64297c/2", "415d7e65055e48b4d0602ee8c91582ea076d509c76cf9b38772f8a70f9e5990a/1", "7ea9844ae84eccbf55e8330640865e36c43521e45a1baec24233327aab7e6595/2", "fdcb27265764b2a73c62380d364aa177b18028a2d6fffe621bac5a23affde265/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "edd662c303e2faa5d3eec59e87bd8bb9caeb3984d3a7d70a24956bc316fd01f8/1", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/2", "8d5d2fa36a4878d0d73f34397662ed9136ea12978c2312050d55f406124fad7c/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "19c4ecbaa99870859b9fc08d79d22e335fae7ae315d8cadbf998f3da9caaddb6/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "aede340eaced53cce7b3e2ba1ab40d051393621e18914376d4912253de338f68/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "7ffa4185eafc1cf2411f385b8044b21604b407b0c7ff5e2c0c566db367b273dc/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2"] }, { "id": 1132, "name": "Tree Distances I", "solves": 3541, "attempts": 3892, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a tree consisting of n nodes. Your task is to determine for each node the maximum distance to another node.", "Input": "The first input line contains an integer n: the number of nodes. The nodes are numbered 1, 2, …, n. Then there are n − 1 lines describing the edges. Each line contains two integers a and b: there is an edge between nodes a and b.", "Output": "Print n integers: for each node 1, 2, …, n, the maximum distance to another node.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n5\n1 2\n1 3\n3 4\n3 5\nOutput:\n2 3 2 3 3" } }, "cases": ["2cdd17b7e047daf1909a589f38916ad9b794e03cd7baa649874f46dc9aba3cd1/1", "b9bd2db4b50d1595f16527a23d53a4f740f6908e2ce6c70e1712469318a2d519/2", "7aad8d634c53998a136e7a5748b7ac76292fec39df5ed3d142de3eaa4887b66e/1", "cf0131f2ba6ac19303b055972874037cbe9ec43128263fa9d5bea2c7b1a4e83d/2", "9c16c7a03b0292fdba3f8db415481e9b74f8463c086879c49d9a63a271c4c53c/1", "9e61346498b78a986f1c1330a212e7b19d695f4b49d66a5a374626cd8d9a0497/2", "aee0a56073af4f0478536a3f6c1665aad974a33861ed60f275451070d0ce269c/1", "081c0d58c07293a6efeadd698c884dbdf020fb638ddb50d90a456b8cce358791/2", "80bf55b3a1b9478cbcc9dd3dadbc770909a87d7e2acc89bfe084f85d92eec31f/1", "e1eff3121213da526bdd2f227434807c95e648d50101729adbca9765385539f1/2", "f9041d945ac38096f50a216296ab6b7ee53c641c489c8a837ea2d1f2c00c0368/1", "407fb50ec5640c24b89cb51bf5198717cc614a1362601216d54ab0a2847cbfd7/2", "9cfb4caf0f71b4d46c382d4100bc5e0da0b06a5ec352d589a209e1e7aa295653/1", "117c39fec37df013132e973331f3edb4e47ade2755397d04151272f7158a9219/2", "4998d306264b2e29a2fdb0bb8edff7d508c4e4b169ca9c09d4526ed8b2cbe5e1/1", "15c5acb5526f86e7df3d7ffa6b9d88f1b91b68bef91debe4fac9724ea9332c18/2", "c2cb081a0073924b7c66236e71a1a4d7e09d989afb5773bd2c15769ef85da58a/1", "e39806eb90ae4b6ab38cc57f414139e9a3b5e161383860e8050a7f83ccfbb01d/2", "4dae811aaaacf38962a99af988adc134ddfa0e1ad25f292f5723ea5f9d436d5e/1", "b82de718213593f061307ac000b77ef69525d3d59f2bcf423430cbe3304b578c/2", "fdcb27265764b2a73c62380d364aa177b18028a2d6fffe621bac5a23affde265/1", "09f5c30f9323d57c232caa4f20dcd1f46649e8f8fee3ec5e327640b5bf86f796/2", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/1", "41076331dd794a2a155e9a375f6d9227cb82906867adce1b5089aa553c4ccaa9/2", "aede340eaced53cce7b3e2ba1ab40d051393621e18914376d4912253de338f68/1", "fd24eecdbf7cb4acd6cfc93f21dd578e611fbf88a1266c6a68026afed14c4f60/2"] }, { "id": 1133, "name": "Tree Distances II", "solves": 2970, "attempts": 3101, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a tree consisting of n nodes. Your task is to determine for each node the sum of the distances from the node to all other nodes.", "Input": "The first input line contains an integer n: the number of nodes. The nodes are numbered 1, 2, …, n. Then there are n − 1 lines describing the edges. Each line contains two integers a and b: there is an edge between nodes a and b.", "Output": "Print n integers: for each node 1, 2, …, n, the sum of the distances.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n5\n1 2\n1 3\n3 4\n3 5\nOutput:\n6 9 5 8 8" } }, "cases": ["47e53e4732068275967abea5e002b0ac159afae6eddd586ca80e71675de9202d/1", "544d5224cddd63c213e3092ccd0ff4f539ea928529a01618f751608c55b3814f/2", "8b619f74ab8eef61c57a1898cd39e392b8f2076fec0f00b08215a8e82410f193/1", "e44758e035989c20d79fe3e61fb2a7d8a2e58d374c220d3331f040fe2a2026ae/2", "8dbec9a1dcf0a346f9dd2c14ec26f7ab687a1a3220039a96ab1e0e5fa583780c/1", "072c2951d1494c589acc7bf39c443a796bee14f3177ac7d76e0240aac8ecd980/2", "4579e04638b2641d0068250d1fef3bd8cb876bba16cd34ccea9c665fcf6c048c/1", "8310ca903da4a7e94e8f50b5191e1a20afeb649be02a79a76417678e29ee1e44/2", "c152708019d97e22264425992216980c3eded5507f7f7457dfb6cf2062449130/1", "2fdad5b2f3211a599eb36e5d8cf817be4f38f392e2788ec323e79cec3fb02d46/2", "767a059f039926640f93bda5968fb1626af54f222df9a2554dcfc803b24ad778/1", "113366df5d16faf8aa77130f4b883c18e271b63bb449f532f47aab973d14c184/2", "8e48b47d95636fe966421ce0ce865ac1ad05bedcdbe8e6fc580298f71ee8dc9d/1", "8355e79eee0736075c218a7284a47dbaf775aa524c8b1c5786a2203abfa12eb9/2", "16fc494839aa944878601250d236bc9e55f061cc061f24016a0477b6ab66a79c/1", "f10faeb0e8d98cc78f088fa0a9b23ab7ab7fccb36564294d913550ad55b1d19b/2", "45afffa9fcf3076f18d2cd6791ae3905cfe6ffbe5d0a135914fd9061472e3935/1", "cdd0e2e1efb45c903a41c31e073c264d7698cd11cbf637b2a9f6213f968bc156/2", "417b7402c005cae63b171e2e19d4c55ebf67e24458a751a91fd4f10c5b925e09/1", "29de01b151d58ab0d7fa6f9a89372fa535a6b65aee1f86bcbf545e79748abef1/2", "fdcb27265764b2a73c62380d364aa177b18028a2d6fffe621bac5a23affde265/1", "09f5c30f9323d57c232caa4f20dcd1f46649e8f8fee3ec5e327640b5bf86f796/2", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/1", "41076331dd794a2a155e9a375f6d9227cb82906867adce1b5089aa553c4ccaa9/2"] }, { "id": 1687, "name": "Company Queries I", "solves": 3182, "attempts": 3381, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "A company has n employees, who form a tree hierarchy where each employee has a boss, except for the general director. Your task is to process q queries of the form: who is employee x’s boss k levels higher up in the hierarchy?", "Input": "The first input line has two integers n and q: the number of employees and queries. The employees are numbered 1, 2, …, n, and employee 1 is the general director. The next line has n − 1 integers e₂, e₃, …, e_(n): for each employee 2, 3, …, n their boss. Finally, there are q lines describing the queries. Each line has two integers x and k: who is employee x’s boss k levels higher up?", "Output": "Print the answer for each query. If such a boss does not exist, print  − 1.", "Constraints": "- 1 ≤ n, q ≤ 2 ⋅ 10⁵\n- 1 ≤ e_(i) ≤ i − 1\n- 1 ≤ x ≤ n\n- 1 ≤ k ≤ n", "Example": "Input:\n5 3\n1 1 3 3\n4 1\n4 2\n4 3\nOutput:\n3\n1\n-1" } }, "cases": ["f49eb080df54ce14cbcc76c8841d86e8affb34af8c5ee5989255d45989dd1cd7/1", "1d5d39ccc1165195ff89ad606aaf63989ce00fbacc2f8beaa2453d98c6b3a4a9/2", "ebead5128217772abfe4dd697cc79ec5b26a2d312b382891292c07a5499b80c0/1", "03386bd53329fb74ff9a32424bad769fd3e61b5c6d29e8f2733fc98388fe0787/2", "9a56d81b807690bd5132230492deab25d2ac08b07cbb283ae45d79b72ade0561/1", "bad11d3f96cf7cc18d669d55cb8a965b0d8a21dd3cb523dec50630a4ee704f30/2", "a738e82d6ecd778be0c1c1bc4633c130da22bb7d795ecd3d7b1bfcb1514676d9/1", "811acd7e4f890345901ff1959c116c1be1952eeaf6938c386b30e7752f365648/2", "3954b131bcbd1b4290edad220f111a67d298014ab95381ef3763ee0fcfcc25d6/1", "43238d3d297fea07eb0d9de75f9c0a0cd0bb08d91968b1fe67debd8654561d83/2", "0693dba022a3756560d73fa269efc6a89b551142556b96e600aabca1af28720b/1", "ec8e01a17ef7be78c7c4a097494ab2be594738385d014f23d3b0ec5841fb5080/2", "21418c345ddb9527a14461329c0169867dc1e7ff12b581c9c26f01a64283c4c6/1", "2194940800a8d10b3392d5f269c40e74010d3914b6e445dab961e5f757fcc457/2", "294d22f623aab9cd587a4d013f3d6924d7eeaf8e7b31b59bb6ab9913dd8b23bd/1", "bf1611abaae647a1a655295d55b27e57c17417355f6ca7015cd7b56a35b73fc6/2", "4ad6329bf3e2adb44f57cbc79be9fdfe3919c5474aed521d9281a6967144b05b/1", "09253b76b996825eda3c5e14106e903ceaae7bff2e692224e88a75c01153bf25/2", "0f11284ed4029a51099cc1329c0f4592650811dc282a8e3f32d7790d3a4698e1/1", "b2be67eb9013ddd1d0301fbbbac9e9560fbed41a2bd631d48ff0cef4bea21e50/2", "b2f1718f65de3e3a24addf6e9904be81be61c18c4edb60046e74c69747dba1b6/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "0a0450aac08f2b08c9c188909dffbd625fd139aed8dae994e82ad4c604e142e8/1", "c93b59a27ff15409e65a1b8a12c1a7f2dac223dd06477f8013d2e9f8207c4f35/2"] }, { "id": 1688, "name": "Company Queries II", "solves": 3090, "attempts": 3232, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "A company has n employees, who form a tree hierarchy where each employee has a boss, except for the general director. Your task is to process q queries of the form: who is the lowest common boss of employees a and b in the hierarchy?", "Input": "The first input line has two integers n and q: the number of employees and queries. The employees are numbered 1, 2, …, n, and employee 1 is the general director. The next line has n − 1 integers e₂, e₃, …, e_(n): for each employee 2, 3, …, n their boss. Finally, there are q lines describing the queries. Each line has two integers a and b: who is the lowest common boss of employees a and b?", "Output": "Print the answer for each query.", "Constraints": "- 1 ≤ n, q ≤ 2 ⋅ 10⁵\n- 1 ≤ e_(i) ≤ i − 1\n- 1 ≤ a, b ≤ n", "Example": "Input:\n5 3\n1 1 3 3\n4 5\n2 5\n1 4\nOutput:\n3\n1\n1" } }, "cases": ["b98bc2e1da5bdb2aa61d5eb498818bff7bf5b40096d1207cf13746f488ed0ee3/1", "416f59c552a4b3e3d6cb1323cd259a8d0a3c175744c4a05c73c3b472c0fcb758/2", "4bfa314c5d1218139e0ab7fe8f7147d0df4eba005e6c35b6a12a2570688267ef/1", "0de46c4ccb44e5983e8b2e84086acffaf3f30fd6272a2b9ae744845e4b200c8a/2", "9f31d337e903cf8a68147bba4d4c55a6b9c4a1fc74883939c1ce7b21f5ffca01/1", "9538e71364e030fa5cb12310065b555dc371cca0eccc44a9530624b5be45929a/2", "7cbe68895681546b53497425827cb437795fc7a22cdeb46d23b2e400dcbac81a/1", "94afb88e21147eb0a2b6be5b9138e6be4e03cbdb787fec435cc564b99f68f021/2", "99ec995acd4e88fac506ba2ceeb85908a3bf5c930b75ab7b0893c9815abd8eec/1", "18202c553dd5069a2892ea6b72a9c5e363f24881a477d01620168c56129f9fa1/2", "4b21c06902749e0c8cd5a76fe17e1cfd5c16ba54d0ce93fdbd657f53734c18cd/1", "27bb5aae359d2bcc85375aac2dcf0564149ac328833f2c3a36f2788ab5226528/2", "f99e74c92bd0df6a21150d9a4cd64332b5653df9ef052142fa94b707fe3c79fb/1", "47261d6c016fd1e1cdef5913ae0347e7069d5a2717faee5c627a678f2f7305d2/2", "4758996d5cca7921127693f3f59ba1368223cf43e3423a8bea05dfc28f961a10/1", "ec186a07368de8bf7c7fa746df8b7726b932b15be7656c81f2fd0ac2ca51e426/2", "abc42270fd4bcd61002339f903698b4189d72e17fd1186338054fcc147cc0420/1", "e88eefe33a4ad77415b079046a0759cb2efc6368fc3b9d8ba6be6a7b3ac3c65f/2", "5dcf3fc30283a60896f08df962a639c8010913cd18a8033e1c5f837cce75eec1/1", "19cc5aa6c29bf6c9e3395be0b46654b474cf018905d7befcb9a128bc255759c2/2", "7e8a6945d4a6336e8d8bae4a3b813bdc935711be1acf2ea67743cd9499f7a2a0/1", "1712a3020995746e0341d9e7d616c19b32f4383bd5589f72a6b4bff0578dd187/2"] }, { "id": 1135, "name": "Distance Queries", "solves": 3023, "attempts": 3228, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a tree consisting of n nodes. Your task is to process q queries of the form: what is the distance between nodes a and b?", "Input": "The first input line contains two integers n and q: the number of nodes and queries. The nodes are numbered 1, 2, …, n. Then there are n − 1 lines describing the edges. Each line contains two integers a and b: there is an edge between nodes a and b. Finally, there are q lines describing the queries. Each line contains two integer a and b: what is the distance between nodes a and b?", "Output": "Print q integers: the answer to each query.", "Constraints": "- 1 ≤ n, q ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n5 3\n1 2\n1 3\n3 4\n3 5\n1 3\n2 5\n1 4\nOutput:\n1\n3\n2" } }, "cases": ["bef5961d0b9a5b37b7ad5f75c8d9853f3b67cd0c741f74dae056719a0a3bead3/1", "79eb89aa04b857e3bca1beafc75e125e7cfe32b5e703a30ea9065dcafc45322e/2", "93f1d4618a5470e0a42e4b347cccf2dc7a50e939f43671cc92fcfdbedfc057de/1", "3bb8b9f138b7f39024b8a32cdba5d30d4e5bbab4cc1e62436ce38ed5024386ec/2", "9b4d5d16e15b3d4c1d05d198a6ee81204f32cbb370f9a7628ed10359bdba2ce5/1", "ff7373b8cf4f08afd7a9b9e8f15aaf18a97bba10a3657c7b127fc434b0081260/2", "14e0ce38d3e46dd281128ef69526dc3c575017e33ff53e0641b97b204fdc3ab3/1", "417966af80a10a68fe4b198d91fa4c66d5d8a74f53e583279f74945e76a9693f/2", "18bfd15bba97eb4b6a0e2d73b5ac84c28d3ebe47ec2a71e2a43abb510bc4e82e/1", "0aa7f47c4b9019b74a9a12f689bec10e0295d729b87ba1bbf775a47e80f5f50c/2", "479daf3ccfd8f3e985186c8e5f117729e0cf7843197768efcddbff0da223cd19/1", "a74b591b615a235613232b47e4114934670637bd2c9de0c036b46ed2465045e9/2", "ece945a378b36328dde1117c3fd835d61547ae9c693fd73f6671329b945ee5df/1", "d0a52eed4e08b7ea86cd8e70f156a2ceea43131b3dc176846d600344aea3098a/2", "7fe07fec6856514692a9ac3d6fb0aab3f48ff6507069b143fa2e419c946d5444/1", "7a3752ff3f5ed95cfcd31e770dd1db621ad16e7aec91169358b2ddbd39a0b012/2", "f36ca930e7dea95118668514d6d0101c4223ddd32f2c9e38742a24c00ab1096f/1", "37f130f36302315cf2263f0c2a8c4d659868d4ef9d1713230334e0a5388fb23d/2", "9d9288431cbbf51f5d097fc39ecbbba9d520c1bea5d77f32308c4f77110d0293/1", "a3231d7f841aad86f2b18084a5c56110e052cd2897606399505054e51b9bcd48/2", "f5c5e583808c61ef64c7c606dbd9f107efadadc78ef231dae68662e333a2d573/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2"] }, { "id": 1136, "name": "Counting Paths", "solves": 1756, "attempts": 1876, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a tree consisting of n nodes, and m paths in the tree. Your task is to calculate for each node the number of paths containing that node.", "Input": "The first input line contains integers n and m: the number of nodes and paths. The nodes are numbered 1, 2, …, n. Then there are n − 1 lines describing the edges. Each line contains two integers a and b: there is an edge between nodes a and b. Finally, there are m lines describing the paths. Each line contains two integers a and b: there is a path between nodes a and b.", "Output": "Print n integers: for each node 1, 2, …, n, the number of paths containing that node.", "Constraints": "- 1 ≤ n, m ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n5 3\n1 2\n1 3\n3 4\n3 5\n1 3\n2 5\n1 4\nOutput:\n3 1 3 1 1" } }, "cases": ["65c3d246195c65e90a0032ce193b27b6497f63ff9e6ff836e665e8ede09ebc2d/1", "f04788c19ce15f38fa62a16cb5d55f8f64cd1592b297316f66128667a011d5d2/2", "a880995a494d9dbb5451b95703e524e7cd46030c25bc6a7ec49f6b72366cbb07/1", "e09c19e953a25d7929e8edb96c6cb8fd32d675dc1363f9e4daccff050f10d117/2", "f80b3e76efe799ca8ede7bf309ec19fc565009b3659d8722e9aca452e7070a16/1", "87ef954689a6626178490fa98bfdeaa65f25eff548c362c9470cae872886c4bb/2", "3c38822c62ab48bc4909537331214668b62b348347cf04d5ed061538996982da/1", "4e5867c11eaef3af04a5bef244d76d9b4c1607c6cc0822991786d5c186180a1c/2", "467527f8dca751557a4e45f85247519c70cd8a7499c6be7838025bf33b2771b3/1", "b408fca57b26185fea12ece119ed95825e7fff4f83795bc39833af1e3c917294/2", "8d5b059e2dcc79e4fe247debd973ad632172a9e80e2fdd0ca2e6bbbcb734122e/1", "d44dfc273314ce8bf7cba3f6d6906953087232996fad17e5e6dcd81fb2434e78/2", "e5ebd42b22621ff449000719a4e9bada689a444671dc443609037df419901043/1", "cf2e3afc1bc1cfa645058b6e0c22fe147947a9f70bf5219a5f750030c5c7ae01/2", "860cfd85524d343e9c696225efc04e4aa800a4f8d23566a87425c004cb1eeb6c/1", "a115713f3e8c17b69a3a772abcb060c9d28b24ebb87d0dd4adaf824b8d8e98da/2", "66fbe4906bd8a6a534432d41add1c1d81ac706b10f268e6a2dec76c13e0fcb19/1", "febc03ae44238d9aac8f183cbcbf72f63de2873b000b846758b553238de325c6/2", "8d177e0d38b1149db3271a348bc832f17df4d485db08f6c76c2af569101bad73/1", "1e1e8d3ca4fc212d1a62a3dce23d4deb89928f5d57b393b44e203d12fa123213/2", "8c051dc7c17d720f5f650ec73a9e7909fb1be0b409ed512aab5aae17e2b17fb0/1", "032ec95bc2e74fd8c60bac159fc58fbfb5daf02b30ed85a9da2492e3c64d03d0/2"] }, { "id": 1137, "name": "Subtree Queries", "solves": 2170, "attempts": 2327, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a rooted tree consisting of n nodes. The nodes are numbered 1, 2, …, n, and node 1 is the root. Each node has a value. Your task is to process following types of queries:\n\n1. change the value of node s to x\n2. calculate the sum of values in the subtree of node s", "Input": "The first input line contains two integers n and q: the number of nodes and queries. The nodes are numbered 1, 2, …, n. The next line has n integers v₁, v₂, …, v_(n): the value of each node. Then there are n − 1 lines describing the edges. Each line contans two integers a and b: there is an edge between nodes a and b. Finally, there are q lines describing the queries. Each query is either of the form \"1 s x\" or \"2 s\".", "Output": "Print the answer to each query of type 2.", "Constraints": "- 1 ≤ n, q ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b, s ≤ n\n- 1 ≤ v_(i), x ≤ 10⁹", "Example": "Input:\n5 3\n4 2 5 2 1\n1 2\n1 3\n3 4\n3 5\n2 3\n1 5 3\n2 3\nOutput:\n8\n10" } }, "cases": ["e0b333c47e58df502be3cf5882eeb7de6528e062c1bdb963ad7dec736448ffa5/1", "4fdaa20751556b9844b6558f117a050d65a4c63d148a7710b3f94c2ee8da1f47/2", "722751d38a25a5b81258864d855700772eb5a1f03b84190ec3ad137e1b4e42d4/1", "468131ac5f8bfb90151b930d251716289becb50c6413e5e88cdbc32f0cc7ae9d/2", "53de8e4390947341c547269cc4354f03b3b618cd32d37661f2f7c5c4d61cc4eb/1", "f2c8b2e6d7873dc4a76cc25b93595de9b722881434db848ea0342d20347288f3/2", "d471ac58446c9711ad75edde21a104b13d4265c04c593fd79ca5b90ddb89983b/1", "2162a0f2d672655d0fb0776bed07fb453a07b659aa3b9c2b24244b6dea8e2ed8/2", "f435df27a34b74b5f058436a611990003c9438a08e5b6587dd3cd912eb028dfe/1", "fa807cff535ce83cf4b2f87cc7a02cfe5142067e72c9be493ff2fcb8de2e904b/2", "0d8fd0b0bd45fad6605be2c6b608ff6c3821a2bafe4c7417c709868193a29af5/1", "a3db95137966c914afcd946d33293faa87f5a886d6acae98b63ba62b65bd6149/2", "eaf8dfc42cac2ebce01ca4eb06338cc93d9d6464164c29e7efe20a7bb2a0d641/1", "ca9108bad0a4704e2660a5f00780560a156f1cc7dc3b5363848b68bf045061ea/2", "14123363c9294feb897589865178196d9b30007864fbfa1770088f715ec4ad08/1", "b7a514dd19f66712b34c0155f5fef315dbb2eaedfd8e467bb7e9a43a81eb71f8/2", "ac33f2c6c42edbb63514928b6d07bde8bcf4d86e9bfd0d20a441bb2198cf0831/1", "6df1d49bc8770479751486fa04d77489465871ad257821302d38cfd0db3f2c6f/2", "6f49da6519dc1fc32619f1e0e9e160f2ac9594419a8623cb1d8234036f05f12e/1", "ac669a3ad255c314987705932adf57d274e4a29db6bec1c92a5807b6c0f8c173/2", "eaf8dfc42cac2ebce01ca4eb06338cc93d9d6464164c29e7efe20a7bb2a0d641/1", "ca9108bad0a4704e2660a5f00780560a156f1cc7dc3b5363848b68bf045061ea/2"] }, { "id": 1138, "name": "Path Queries", "solves": 1725, "attempts": 1818, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a rooted tree consisting of n nodes. The nodes are numbered 1, 2, …, n, and node 1 is the root. Each node has a value. Your task is to process following types of queries:\n\n1. change the value of node s to x\n2. calculate the sum of values on the path from the root to node s", "Input": "The first input line contains two integers n and q: the number of nodes and queries. The nodes are numbered 1, 2, …, n. The next line has n integers v₁, v₂, …, v_(n): the value of each node. Then there are n − 1 lines describing the edges. Each line contains two integers a and b: there is an edge between nodes a and b. Finally, there are q lines describing the queries. Each query is either of the form \"1 s x\" or \"2 s\".", "Output": "Print the answer to each query of type 2.", "Constraints": "- 1 ≤ n, q ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b, s ≤ n\n- 1 ≤ v_(i), x ≤ 10⁹", "Example": "Input:\n5 3\n4 2 5 2 1\n1 2\n1 3\n3 4\n3 5\n2 4\n1 3 2\n2 4\nOutput:\n11\n8" } }, "cases": ["345e19922b97bf46fb0c3761d0bc839b46efe46deb718598c93194d3867b2593/1", "ab9f3488082d820b4da797391d38fbb2c6aee1fde228dd23ccdc765064eae27f/2", "fa2086d8fc3a44d8d30278c6233a7a9a5d05a78fa6c2f7899db0376a2fb6782b/1", "a9affa1622de3e5a265fcdcae99a25ab8e6aec4491205855609cfb04e2eeb853/2", "8370d6ab9eece92391bb859511d2dcf9f20b73b2562aeb9382946c0e42454621/1", "be491763b88e429641c82fdd6a89be09e0cd330fe60690b73393f25e51557d6a/2", "beb0b441f7082137c19eea101c68527bf2b9e23118cff46b5c52929190dd4f97/1", "577b16293e9d28943eeb8154bac1cb6a28f4a90ea9d9d80f69b224198225b89d/2", "9a30f39fcb826cb44223739ebe8f88e9d2b3a32ad7b70b7948f5794d0f34e42e/1", "8b6dc48a6ea6b3616bb77bebbb582b3795cdb3d187dff04823548d69768df8a2/2", "fc79b09ed5e6d480e4e15a3da2d64b8d51a4c1d6a2a4d712f654160c4a951bd2/1", "176b82d38841a745e7bea8760288cb0c4db855479e77281a1bfc95b0bbf512d5/2", "bf5c89ff89654ba8f6842d975335cce0d6889876e108b90c86334d0a0ee6a7df/1", "4ed636c44303f65804babcaa16029778228a326a2db8fd534c596759011b0833/2", "b7d5bd6d0d49d98c4095a0ee13ac774c011a801ed45617d2b9dd00227f017268/1", "f4b70c70e109de1153a5b2234ed63806d1ccd882d1fa641aaed5c1c05595d280/2", "1199502b3d138d6add78f05fb77fb77df35c8ab37a65cfcfe10244dbcf8383fe/1", "8a75133c8647c664a6f1f86d316940a739cc59f91c1180effe89d0e610bd8845/2", "da76a73c7dff29c2b3086300f4dd1453425e6ca9e65b633fdb65db21616bed43/1", "28bcc210809e1ac3e6aa17aff926168ac7a58685ea38b098eac6a6f5f77c2c69/2"] }, { "id": 2134, "name": "Path Queries II", "solves": 625, "attempts": 738, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a tree consisting of n nodes. The nodes are numbered 1, 2, …, n. Each node has a value. Your task is to process following types of queries:\n\n1. change the value of node s to x\n2. find the maximum value on the path between nodes a and b.", "Input": "The first input line contains two integers n and q: the number of nodes and queries. The nodes are numbered 1, 2, …, n. The next line has n integers v₁, v₂, …, v_(n): the value of each node. Then there are n − 1 lines describing the edges. Each line contains two integers a and b: there is an edge between nodes a and b. Finally, there are q lines describing the queries. Each query is either of the form \"1 s x\" or \"2 a b\".", "Output": "Print the answer to each query of type 2.", "Constraints": "- 1 ≤ n, q ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b, s ≤ n\n- 1 ≤ v_(i), x ≤ 10⁹", "Example": "Input:\n5 3\n2 4 1 3 3\n1 2\n1 3\n2 4\n2 5\n2 3 5\n1 2 2\n2 3 5\nOutput:\n4 3" } }, "cases": ["58167279cc62fe303b92bda07861532115366f8b3ea0afb064923699c7b4c7da/1", "2d87ed50647914b91f48d27ecf77888d98e59ac1875ce2259520bd8e5e5275ed/2", "288bafd8df1b86e966fa17ad172d9f9c8802c037b6c4db10c00519a2066176c7/1", "0322d1cf5afb959975dafabad86720010c3cf23155c76090961498f7c6b7af38/2", "f03dc941ff638ffbec69468d9f359272cd42faf2c73cee65ab74ceaa9699cfbe/1", "26d65d89a9420d8574949659a8f8407e25585d06a1dd1a3626c46cd8a2c1883d/2", "8c8f21b737a9023bfed30535fcb464607e79ef8718898a2c5ed13475f1776dc9/1", "8452b177d00e350a2175924a542711a7a859407075f9f6f9580727402a4d8cd2/2", "bd81897fd6066d0d5854169ae54695e40593db98a9cb1475b92edc1141249169/1", "cdbadd2289359dc5ffb7e57617a317ea14598de0af44df99f4fd75c99ee775b8/2", "36e12e338913f971c9eb8d262621b7ee9c880b784bb734228416c4cec485f7dd/1", "c82af179a403156313aa00d83362bbecf25f17303e7c384c3b55d706e52d6413/2", "f9fe1b5848e912679089cdac780397bb91bcb50c905fada5050220677a87f516/1", "349fc27d8c49b9babc4832d067ce4b63bb8877d8fbdfd5e481eb52a748554078/2", "0245d38a4d61a70e84a300eecd2be75e1a017e33313b9f37462569a504e65ea0/1", "7edcc2af000feb0387be0e4bbac8bfb2875c13d80fbf6a5c55df3175e3bff178/2"] }, { "id": 1139, "name": "Distinct Colors", "solves": 1610, "attempts": 1882, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a rooted tree consisting of n nodes. The nodes are numbered 1, 2, …, n, and node 1 is the root. Each node has a color. Your task is to determine for each node the number of distinct colors in the subtree of the node.", "Input": "The first input line contains an integer n: the number of nodes. The nodes are numbered 1, 2, …, n. The next line consists of n integers c₁, c₂, …, c_(n): the color of each node. Then there are n − 1 lines describing the edges. Each line contains two integers a and b: there is an edge between nodes a and b.", "Output": "Print n integers: for each node 1, 2, …, n, the number of distinct colors.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n\n- 1 ≤ c_(i) ≤ 10⁹", "Example": "Input:\n5\n2 3 2 2 1\n1 2\n1 3\n3 4\n3 5\nOutput:\n3 1 2 1 1" } }, "cases": ["49dc81a384cf4f41ca00a82f1ac265f1f9eccbf81904f73be3503159fa775eda/1", "7d6b37e54ffb96938eb8d34647216fdf8220f9dc0fae9e4228e8898b33d6657f/2", "aa851f344cd96f7db209e7e76a6f485ee462ba6f6100e6501b5ae3949f7ad494/1", "328948be61874eb0187451c211a277d03adb1ce29bbe314f0a2c90dbbb5177cf/2", "15fe2d84f1c2c102f41662038779ab701e6e0b2b6f67fde5298f6a4b6212fe0c/1", "29e8a30847ec19748deac8089f8855baaed5e59744c1ff1d8b80afd22803b1f7/2", "675afaa90dc7131234dbf8aee18bc2ed9beeefcc5a86abd76eb2720a1a9bc86c/1", "e5e5effbb978b72e819ef118a02fecbcd7e636f31efe905610695e7ef9146503/2", "19e41149502763ad1b5067c7014d442e715b42adb95a6015c07b42a8f2f19da9/1", "48b4e3e812bd2483e433fc1a68f3a0c7f3da500d898ff3373a965b069c4fc3be/2", "ce2c4bdb96827db817eb02ac929a4977f551fa10e80001af600da06c2da6b9cc/1", "b46553cc3d76ba796fd9500e53c3ee11b5891ec06a5ec9a80c51e03a30161885/2", "978703dd2cd14c3887236ebacd69e62f0f5f0b9defdf277d1294afd181c1c25d/1", "6c7a28004da41d34ff42da79a19ef0e6fd10f1db501e66ae250c435eb07d599e/2", "bb89aa8da4aa0a864424c68b55e2a818fe275187e5df115252ebdf0cd6e44968/1", "86cbb6107a17757e8ab7300406b04bb3705eb6bedac13a55b48981cae1c3b157/2", "ac6dbca6b97bcec82a69c72e8840754360b768c2ab309b77c91a11e0c8801a5c/1", "a880aafd1eb816826ed86a92ffd4b199f12ed8a01e51969f5376853db8326001/2", "6348bbc17b256dc08dfe542500be91b356fcb14edd00a97b5cabaa6159ef4984/1", "cce067cbfd147b90e646b684da8857c2e1424ab2c51845fa0bbfbb7293cfd3b5/2", "7125485773d9f020548a82db0a8061db0ef39c047b7d7f7163e90c24d801db18/1", "9573f3f238b22c1a054ce31b113acbd787652bf304e95beb98e3015f32898112/2", "4efac159e1a201e36a3b5e5174a025ce7aec9250ac55873e78ab26f50f1192f8/1", "53a9316430bbfb329224f89cc7726d85a811f71b5c8d2d1508bf471cb74e0142/2", "243ac9c4f526e13cf337831bb36ab65e24721213c4d68dc78d74d37752875d13/1", "e22d52eeaafad7f9eac2b6fcaaac2b54bb61d603c91a53aa1edadaa1e3456381/2", "48e9fc8909104e628b740795470c1412195c431b0d6ee90176bb888aec37c428/1", "e22d52eeaafad7f9eac2b6fcaaac2b54bb61d603c91a53aa1edadaa1e3456381/2"] }, { "id": 2079, "name": "Finding a Centroid", "solves": 1028, "attempts": 1065, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given a tree of n nodes, your task is to find a centroid, i.e., a node such that when it is appointed the root of the tree, each subtree has at most ⌊n/2⌋ nodes.", "Input": "The first input line contains an integer n: the number of nodes. The nodes are numbered 1, 2, …, n. Then there are n − 1 lines describing the edges. Each line contains two integers a and b: there is an edge between nodes a and b.", "Output": "Print one integer: a centroid node. If there are several possibilities, you can choose any of them.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n5\n1 2\n2 3\n3 4\n3 5\nOutput:\n3" } }, "cases": ["559a592e1a04587c4cac59eed23ebb830ca1aec863f669ad11b71bce050dbbfb/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "72daf7cfc7bd08ad9a68884e93e937e2130beb7c8385e2ee0feff77aed1e72d2/1", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/2", "0418499f44557a24d0269f21b8f63538c2847777c8c04cd780bdd26cf9b7d0b2/1", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/2", "d0e11b8c98edb2dac1825475467fa1cb842bf32c27f8269f3895ae3e057714ac/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "e3c59dd8c2373b05100175d452175b30deb7fc195d7f5225f43a5b5c5bbe9ea3/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "cb5588e3605e23a78a83e394363aee61bce2a73fc4320bd5947c5317866bc858/1", "ff78d1d548c125e7c69efff8fffb494a405a24671e716b23ed6ea2dff09ef02d/2", "3227240cbbb23e2862900c3ff70a54b1eb77603be194fc99fcc6b88170deee43/1", "8d8709dcd014917e56efc28ab42bb7e043d0a7bbb13d0b64019f9be3a33cee8f/2", "a65630ee9e3d2a0166c0329e9f94400817c9c9db1bb8e87fe09984f1a5cba3f1/1", "417ddf670d11fe3fc2cb9e9c89dcfbf67986ce8ed4851d9745042108d9e627c9/2", "175fd0623f0f6805983331ccf4deee8ab90beb952d6c71dc253e3ba60b071223/1", "e52ba26b56c053f7e9a6566d3b70c5852346cb73fddba261d51273598d207df8/2", "415d7e65055e48b4d0602ee8c91582ea076d509c76cf9b38772f8a70f9e5990a/1", "d4a064a26a94a68d772bab8d2b9b004080e1a72de657ff84f8992e01e1997d42/2", "fdcb27265764b2a73c62380d364aa177b18028a2d6fffe621bac5a23affde265/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "0e02a49ccaf131054a536ad3f6170d13e8558fdbd881c35404cb29a26e8f08b0/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "51448c4008d6b7ee90d3508aae788d11f88bec40605b5176d9776598ea3d95fb/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2"] }, { "id": 2080, "name": "Fixed-Length Paths I", "solves": 522, "attempts": 588, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given a tree of n nodes, your task is to count the number of distinct paths that consist of exactly k edges.", "Input": "The first input line contains two integers n and k: the number of nodes and the path length. The nodes are numbered 1, 2, …, n. Then there are n − 1 lines describing the edges. Each line contains two integers a and b: there is an edge between nodes a and b.", "Output": "Print one integer: the number of paths.", "Constraints": "- 1 ≤ k ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n5 2\n1 2\n2 3\n3 4\n3 5\nOutput:\n4" } }, "cases": ["74a1814d1ec0135c7a347d7e52a666ee905c98c95190f43317fac0a2cf098899/1", "2e6d31a5983a91251bfae5aefa1c0a19d8ba3cf601d0e8a706b4cfa9661a6b8a/2", "a73d75f0aeb2980cf573f9e149afbb0c5ed9102aba750fe0de9f0931ef2d2b6b/1", "00d9cd208c4bb685541067ed529222ed418e5cc75d71304d8ef159f3ea3aa50e/2", "50b30ab8931642f50cf853e89b19ea3fecbcd1914d210bfe043b7e3b9013f36c/1", "00d9cd208c4bb685541067ed529222ed418e5cc75d71304d8ef159f3ea3aa50e/2", "23728036493fd0d0885037245c6532b968b2cc4edd159d10fc606574054ecfa8/1", "00d9cd208c4bb685541067ed529222ed418e5cc75d71304d8ef159f3ea3aa50e/2", "0aaab3ef72844183023a92e56c428a7af0511afb1031159bd1db631802d4585f/1", "df520d5f53c4d71ed6a0c30d0454bfea67399747816ef44e0b5c3cd361b81bc2/2", "59dc6efab2ac9f45eda279dcf3d2e1fb804e32c8f69686198139b272a63c1dd6/1", "bab6da000e888ecff65caf12d63995d2a8c1ba59bf22b40674730b83ce99250b/2", "d057479960b6241c7af1fbbfc9e2b8d50f1979e064cfb6a221db8ead77238099/1", "67b9f71c5462377a43ad89a6e27f375423fbcc13e90509bfb1847276fb5f6c6a/2", "53390100480a43e666b6de490fd58e3c0722ed952cd3ab9f28b5827e72d334e9/1", "2213928a59a04f9a7b41a46183db1111fbf34cfb7586c8af0b30c4c23b9e6c12/2", "2084370a2c0f53935716b5eeee95f0c0b1788f918fbb05edf7a770253a7c2dee/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "914e85d8037124f14bc61936258938e347cffd85693321ed39cfcf6460a25edd/1", "7a0e1d0a0bc9850256b8d1b714274ccd447e8bbb79e5bc71fa9dee37ca7ac30d/2", "bd489f92649bcefb549a3a946085a20e6b9fac745d0aa4adb7b62b7da039f0d2/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "a64a9f613cddb0f19a7ee3372232f02bf70425b57fa4c2454049d4fffe040428/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "502afc7b7cf47b7fc26c36479048897d0b47c9cb639207ab3f0a15425e4a3cac/1", "1f12f42adbfa0494041222656a0eacd9f64321dcbd71533469b3987a9b6a80e5/2", "043c1c6c772d16155ec2515d838965da50977116918734bdd8fd9d9026c0379f/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2"] }, { "id": 2081, "name": "Fixed-Length Paths II", "solves": 404, "attempts": 438, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given a tree of n nodes, your task is to count the number of distinct paths that have at least k₁ and at most k₂ edges.", "Input": "The first input line contains three integers n, k₁ and k₂: the number of nodes and the path lengths. The nodes are numbered 1, 2, …, n. Then there are n − 1 lines describing the edges. Each line contains two integers a and b: there is an edge between nodes a and b.", "Output": "Print one integer: the number of paths.", "Constraints": "- 1 ≤ k₁ ≤ k₂ ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n5 2 3\n1 2\n2 3\n3 4\n3 5\nOutput:\n6" } }, "cases": ["3918e521a90da9d42540d376a3be0843f8285667c1a438a0e87f085831a2b63a/1", "f4ccd05b3271c386ee55d9876c7450012a3b361e5065c09dc22075e38b3cc35c/2", "3e50133915011ad62753e09c7049901d9660e4c5e02b26d8271fbc3da047d0b5/1", "4479bf7fd72a0dd3974eaa1815221ebb5088d27886aa422f1514a2323d8450af/2", "a21eb4726eee27f871e432ed8a21a24c164fe739d0a7836afe77bcfe7b3467ce/1", "c14e0f2e5dc0f7c3f09e1a0f55dc164464959e42e0fcca8090449588bc26baac/2", "e1016ff65833a4c8f443b449ce798fe0882bb2283d954b146b39db6b0c05f96f/1", "9e76e42fecd525c2a72dfbe43ed9a0d3113acb68fced06baef2be98970a991c3/2", "15b44d5e6c7675b1837a63497a7e6b8c13116f1cd64e502fc88c9611417d8b43/1", "ffb1f507f6db7b9b0f4b8b7cb2567649c94089da3515e1763019d6eaeb230dde/2", "0af417e40b203079e324e72dde506b14137258a49ef8b57fdd43ee28a74077ed/1", "cf7ddf69afa8593a4b4f4dd8e26017c0d067ef2ff8cd89f3529d724226d9a432/2", "0cdb966b9729fda739186d548924298428f8bc53f64824611a48f0c4b56faf6d/1", "69f1f00694665bc876c1faf86ee35c41aef918b1f2176b864431f45236dd6ad4/2", "9c9d7daff678920ad24edd0b1ac8badd63834111a50c0b41bfd2c6b52c649cf5/1", "7b916578eb9dbba461a24df13275fc2c82ad257ccbecbf60e6d19cde2522c76a/2", "30c42b580c2838f4256420ba06abe69589cf94dc511edc62ffa41cfc27f78dc9/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "7b5fdf2f5fb3bcb3ffbcd9fefd4560c258a7a7e87bd92476402cf295b96c8afd/1", "52ad3000828595cbb105d918e0ccfe2e0903198f52762d0841e69f8aba06b414/2", "dc02f434a17ca3676e85719eda8bde6c1d5c2130b61f0e5a1104704b7dce782b/1", "9d9821eb31849b2718b6305921c544b79aa0612a193a150a5d718190b5397cdb/2", "281bc05cef8bea21ec6c4fc22d67fd1837f8ef2188958d232ef6788480267260/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "e1b51efd4b40948443e8c4688e20a5931a7ae61a8baebb1cd516bfa04c9798a9/1", "ef55be1f845002931219ae88320c4744651b322de6447340a573287179119427/2", "f355abb33954fb9706a780c5ff7ea5a375a4ec4622ca2bb56afbc9419bd16b4e/1", "ef55be1f845002931219ae88320c4744651b322de6447340a573287179119427/2", "18020e872248fe78b2ab919faf7628d70be8c68c77f382bba38bd411b411e539/1", "ef55be1f845002931219ae88320c4744651b322de6447340a573287179119427/2"] }], "Mathematics": [{ "id": 2164, "name": "Josephus Queries", "solves": 612, "attempts": 802, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Consider a game where there are n children (numbered 1, 2, …, n) in a circle. During the game, every second child is removed from the circle, until there are no children left. Your task is to process q queries of the form: \"when there are n children, who is the kth child that will be removed?\"", "Input": "The first input line has an integer q: the number of queries. After this, there are q lines that describe the queries. Each line has two integers n and k: the number of children and the position of the child.", "Output": "Print q integers: the answer for each query.", "Constraints": "- 1 ≤ q ≤ 10⁵\n- 1 ≤ k ≤ n ≤ 10⁹", "Example": "Input:\n4\n7 1\n7 3\n2 2\n1337 1313\nOutput:\n2\n6\n1\n1107" } }, "cases": ["27cb98f36ceded699343b1601758317b8f285f5f7b68cf0df36ca07ec946951f/1", "889f63f5d21886819fabfe182938a976188e06d2238d1eab314d873a9c5a4d98/2", "1646d35551e48a50f04868253ba5291cd4a6f51104fb4b3abc13f2f63b51df64/1", "6a572b071e61fadd6937f4d2410457278497d3f12024fa42dcfd381aec62cea5/2"] }, { "id": 1095, "name": "Exponentiation", "solves": 5852, "attempts": 6424, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to efficiently calculate values a^(b) modulo 10⁹ + 7.", "Input": "The first input line contains an integer n: the number of calculations. After this, there are n lines, each containing two integers a and b.", "Output": "Print each value a^(b) modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 0 ≤ a, b ≤ 10⁹", "Example": "Input:\n3\n3 4\n2 8\n123 123\nOutput:\n81\n256\n921450052" } }, "cases": ["9cef1c91ac45d38cfe6c05d2e03aca723b08a71b17b72e94ada6a0000599d7ea/1", "4a424de644c69f9b2e8f32085d9a34fc2caaa3edc3d069b68983cb05e5ecd248/2", "8861e8c601acf32e7eb896ee1a5686872ee7a5f48c2b07f198784ee489948cad/1", "a84a7655e6e4bac8f748a89a74842943e11c87d7b2cc62b6b350d17b8f533b0b/2", "3cc2562f4b3f547fb51439be1469a61b66c6f0285d687ce19623440bc4c5eedd/1", "3f5585b7cae8f837ad17b715bde46a51caf712d0b1bbb720954a32f13ea32f63/2"] }, { "id": 1712, "name": "Exponentiation II", "solves": 4145, "attempts": 5194, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to efficiently calculate values a^(b^(c)) modulo 10⁹ + 7.", "Input": "The first input line has an integer n: the number of calculations. Afther this, there are n lines, each containing three integers a, b and c.", "Output": "Print each value a^(b^(c)) modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 0 ≤ a, b, c ≤ 10⁹", "Example": "Input:\n3\n3 7 1\n15 2 2\n3 4 5\nOutput:\n2187\n50625\n763327764" } }, "cases": ["d4506993634abf8d218f1116253958ece8b6e5fc729c4d6b9ed18a78cf72ea93/1", "7b59d5fbcca0e63bfe080d29fabf97470bc54ab5491bdb1cbb870233118d4080/2", "bff201bebac639b97aaf44166d7a36cd8d8c5a569dfe1b7505b7f529f1e1570d/1", "0acadfc07cd3466c79ed5a9ce846563573ab3254834112e68a4d48b53f030e26/2", "3e9c99e2eee5b7408be43adbba93597ff27f35fff4d807043d511f85813edcdf/1", "a29b2f9d7979bf8e4659d3b72896533b1d8b92e81add169fa78a3886f61c57b5/2", "ac05db9ebf756d84afa308bdfa7d3de34a6409fc4e81f12ff092cfcf739304ba/1", "4982b1f2a478557ba17c035c86fad9fc1da38ac16fba6f14e0b1fd12348c2993/2", "c256697e660893b052cd12bdb6e991b031b22af7262b8231811d84c6c5c8db62/1", "279b7cbf8dac4a805effebf38c6829e260abc80de2b271556079c0dd25287af9/2", "5201dce830f80eb4097512549730d221beff20814eceb161ac1a7de63775148c/1", "d1d3450d8f82dd0542beb89245bb3e4c590a7d7478f7efe28556ca5dcb8dbbb6/2", "c24a77b183c19f261bbd388d3d326d17ccb0da33531130f5e4859e7e7f6034cd/1", "c78d73385aa2773a45dd97a0d9fa754ead9af28fb4705a0c4b1e071931891917/2", "b202566ce92ef151556c401c7b631089224fa6ea494f017bbfed826a7cdd0c0e/1", "9b0ee88c8570dbe988bf0364f26e3af8aa1acd3fb18c5282cc16657f202fe821/2", "740abaab3749cb7e373dd34f4c4cb37e1e14e5ba3687338b9fc102133b80753c/1", "a89733d967cf2ca4cfcd885f6cbf3077abaf4110b4ad0b4014a3a91b1009a860/2", "76c04767abf9714a35d91395dc5c7625fff2a8593b6891e9739c1e857c3f3844/1", "aa2e72bf769631b237426ec81fe175605c751679880a56def0bfe06cae3dcc9d/2", "5fc8f9f70da180799345a84c1e78810b40472b8e0046bbb00485750506927dd0/1", "de133acbf28cd1212dda6f4f269f83c12801836fd633e5dbd0b39ba6c00e92d4/2", "ce03fb44a96bd454d99097172461fbf88e6640f183869d29366b96903f5eccf5/1", "2e3327ff92778c653f92df1a93ce57cd26e1da54b98d2458a82da36fb10b066a/2"] }, { "id": 1713, "name": "Counting Divisors", "solves": 4663, "attempts": 5368, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given n integers, your task is to report for each integer the number of its divisors. For example, if x = 18, the correct answer is 6 because its divisors are 1, 2, 3, 6, 9, 18.", "Input": "The first input line has an integer n: the number of integers. After this, there are n lines, each containing an integer x.", "Output": "For each integer, print the number of its divisors.", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 1 ≤ x ≤ 10⁶", "Example": "Input:\n3\n16\n17\n18\nOutput:\n5\n2\n6" } }, "cases": ["3afa8d3c4cfa1c17a08323a964fcffb6ac363145da2a137bc9a7687f06e12b49/1", "b5af53fc06cc0c7679989257950acb0c7ddc5bf2e7a99a0ae95c57a5ff8c0f12/2", "6f26088c95adf5d69c66a4293c16694c7f7edddc013e3821b1ffe285f4947021/1", "0d10ef3ed8de46b0669134a64731d339b1d8423ab6745d164033905999965375/2", "0d246c29ea8523afea2fc8c04241f36a164f51c58caf95ea2f764392c1441c05/1", "0217a581d49d1c1bf0228bc29298efec27fb556581ac06b5a2d168e00c2a0ca1/2", "d2f9ffe02a0e08bf592b0100f01e9a7b88e557fa941661a219eb8f4ec24ee2b6/1", "f952c998205333e511908d906ee0c2b9499c4aadc21a59a027afe397e0ab548f/2", "e70213def0700b5c040b0b9c0ca10a8f3d430a8fdd272c4f023583e22edc89d8/1", "bb5dfbdefe8b6cdc1a4c9667377fc92265b07860f4e90f842128fe589532c395/2", "8974f3be58f2cefcbe6da7e75cde1985faebbf3fc46bca4ac0d382f5cfaaca23/1", "51bffc2dd214b80614256e8ca0a68b1b2241a56f1516b5dccc77fe1fa51b53b5/2", "591ffc97c32f800575542913e03a4d2210a82adfa3fc6260fbdb33ae9c5850e1/1", "8daa34d0bb464f4d521b2c8085edb063787f06e02f92d26d3aee6d5eb6da3ff9/2", "7827ceeead52513874e960582f7fa27006173f59de286fd430499bd3608fc63e/1", "0d370a1dd81558a29e287896a19abc78a82fc7ea2fe3cc3d90baa2fe5afb4aa6/2", "ff9636ba1b31f9dd196ac54ff4137c0ffab5485b08b1179376c7cc83b237b02c/1", "649e50de054d9762db6ee5487b6099fff1edb0de323251ebe8a1611d8b5f5a5f/2", "eb1d95f57b377dd917b4377b33d93a4145551a4ecf9f0229e31218642c1654c0/1", "ca4878bdfc3576dd87609ea4bdf8ee065ab5e4724d35d1a9a41bc9dc2151825e/2", "726c02cb346b0ed360bbca32dddc1a2e5bd1281d442f56bccc09ab261de5b50d/1", "f9c0e3ad5bc0e3bd3d3ddf45a963924bd218e5227a8a040bf13c3e909c3b890d/2", "2372bc570e500d799cce590a90d5a6ed42180d2e199fbc7d29fc81119950fe7c/1", "70ee63460995250ee9a3bc812b1c4a4c22a3082ed12352b9cf1563aa8d586840/2", "5695659276262a7aa3b50266c75f0cdb0090b5f8a0619e82119c7f6174860386/1", "de902517a1bc100b1ef1afc1b1b6bc1456f41bbf7bfd4057d41e1c588ad13bf9/2", "e3b488785b15e3c46b583adc9188930b375e63e774111bb8eb7390bb72593212/1", "9a89cbe5626be83e7482f2d51340d1f7144bfa66e5b232d89115fa659dc3fa51/2", "099708848290984d26b8f07197f6e195d45f94de8c02eefba7fa548413d072a0/1", "f9c0e3ad5bc0e3bd3d3ddf45a963924bd218e5227a8a040bf13c3e909c3b890d/2", "db695bf9a79b4d7516d3db3c5f2bbaa33dc1c774d8d1a3dd92c5d1d79e3362fc/1", "5a213df25d116d8a52d7fb244f909d052ce975518117ba6ca540b1d856d2dd67/2"] }, { "id": 1081, "name": "Common Divisors", "solves": 2929, "attempts": 3844, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given an array of n positive integers. Your task is to find two integers such that their greatest common divisor is as large as possible.", "Input": "The first input line has an integer n: the size of the array. The second line has n integers x₁, x₂, …, x_(n): the contents of the array.", "Output": "Print the maximum greatest common divisor.", "Constraints": "- 2 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ x_(i) ≤ 10⁶", "Example": "Input:\n5\n3 14 15 7 9\nOutput:\n7" } }, "cases": ["9ed79c7b3bdac44ab8bbc83b0e4b3f2dd27c18c910b5b4bbdc0b59fd7406c677/1", "7ea9844ae84eccbf55e8330640865e36c43521e45a1baec24233327aab7e6595/2", "91dfb2f57bb61121ca9ef67541be6ce06fc5d22a0267a43a6053e2d159268b39/1", "13c1dc569ae4a0d7f90d8f83d22fc9c8fa526e133f8fea0f9526c8533c4d8da3/2", "2a86fdb55fd209db6d17fc2b04c3f33c3c92eb250bff0279e3b2bed5ed179f97/1", "29ef5f0b7fc0c2facd22af7e616542825331312745dfc31f37423ab0b5e005ee/2", "068bfce665607f901a3a0e5d2dea6e89854df93288984915cf4b118a87cb7cf2/1", "2d5e724b0145b28c3859197ed6d7bd69341255b48c96e2aec12fe3304b03797f/2", "f445cca6f475f68361073ce5352d45fc4ac5b3aaa665ba5198e300d9621cda2c/1", "74ca9c82081ee39c47f732e443b2f193773d4b9885b84cc68bc3aabb748a2af1/2", "337a602e268eb223883b6d022b76a6154a9f6c876f259029bc6ee524c0e5de89/1", "3237c20e690efe3655f7d1388ec02330b639fd1bb9183a8817545ba7df8b75dd/2", "c772c47b77d2e8e5994810973f1db8ae1a84456e6ff34ab61cb3883ff532eb53/1", "5e8586a22e407a8aa64d9051d91cc2062cfff741ade20782d32ce35c584940e4/2", "6eba47575a46d3b8d349b0f576003019b81af1e233813ae249c497a00f13bc50/1", "8a940220eeabff38fb745e9546c6b89e4ebb51cabf985a370a393721128cbc00/2", "2b5247f064fcb12aa7944df3597f020bacc8a6e72836c9daf8a2d6da0c1635c9/1", "47911f068f618a829bd802e90528194c5a03e9e8190ea93548fde55afd041e30/2", "fa2ad99d34cbc62c0ac20e88dbe5eb531ae58635afa7c274cd46d120855de372/1", "a27065dbd4b0e36a8bb31dfe44875ebbda974c6289bef3efea38fda4a01c8ea4/2", "f2b2b6e9a0bb6ee7d34f9a7eec5e6c7535c907d649f6d02cdeedd73c6fd2812b/1", "085c348f64a3b543e973a33749e90ba20847b99016a87e5228847597d61ce582/2", "da8861734ed10cc5fef1eb48653e4fa4e43598ed02db237e566a491931945788/1", "52b554d0b0dca89419dd5a1e339aa34e6aeb477edcd34614fab0d34af9597a3e/2", "95bb9eb597ce0ba1f9bb9c0628254678c5993dee814262764817a32f83afff55/1", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/2", "7ca60f53ee694c4179fbcefa49bed912d51ee2f8a8408c236c794219186af87c/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "872b70887a06e5ac4ce67cb868e7add233f8b3847267ebcc46b6f6965cb214ce/1", "df86e9de9e0a6665242349c908bb8c65fc1c6a7ef1613202f7df41095e678506/2"] }, { "id": 1082, "name": "Sum of Divisors", "solves": 1852, "attempts": 3037, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Let σ(n) denote the sum of divisors of an integer n. For example, σ(12) = 1 + 2 + 3 + 4 + 6 + 12 = 28. Your task is to calculate the sum $\\sum_{i=1}^n \\sigma(i)$ modulo 10⁹ + 7.", "Input": "The only input line has an integer n.", "Output": "Print $\\sum_{i=1}^n \\sigma(i)$ modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n ≤ 10¹²", "Example": "Input:\n5\nOutput:\n21" } }, "cases": ["95cf32708a31caa478a0e9141103ac567d85e5186e697e7e0c81f75589999e31/1", "47ec71180cb7d5d64a5c54b37acf4e33d3acef422b83a861d57b3bbf9f409a11/2", "ce516e29a2ccfe4bab40e4e6adab7661cd695680482c00b1faa738fc0df62698/1", "e69bf0ad74c0480ae1fc189646143f6650a070f666fbd415a4d4724a39169c61/2", "5378796307535df3ec8d8b15a2e2dc5641419c3d3060cfe32238c0fa973f7aa3/1", "80a8dad7e09fb6db82c36af9459415aa65b441e60cff539456268a2a1f9b0beb/2", "6fc16b03d8c15b9885876848a301a01816cccaf7b48e74f2b51db99c007a3bd5/1", "7940e4985d2a0200d8191f40114514850b7256289973662013a0e24e3bf58e20/2", "3840bc236ee03aacbb1ef7d5108ddfa347c59f10b68d4174affbb53140f31273/1", "65480e7eda9c4b337e13aeaa4dfb6770fb6a37b863438126e4587068402b8bfc/2", "db9743480c55b62150214aec0a2747431e74ed91393811e16c2af03ef602df9e/1", "218ea5021f76233322e670d2b5d86cdbc6ce094aedcb2df2e9c44c10c721a84d/2", "97371249c334036ca55cf5d0f6387e5dbe33638ad9fc4ef573f8ab3e1efe4ee6/1", "7ef723c9f9ee5432a3df18274a5fbc01268806c9a6545bd4db764abf4fe1cb22/2", "33b5e9011c68c26f70b9aee8be43ddd077327ce349289f1fb3168f461ee10e5a/1", "886da556a73984940bccecc0f876b44a2cd18cc5fd87b9bb5a4b8918934af70c/2", "39ab1862aa9cabd9d486410e0a2e2e8b3297b6fad59d0606c06bffa841dea0d4/1", "5930ea3af0f7e79f8a39f1a5b741635fa25d834770f33e6fbfe877be2f99a71d/2", "c99871ff16a52b385887ddb7655fad9becd3911ce92cd3ee6f69ea6e4e824c9f/1", "f54d0edf190b43aba37236437977ae1ac2def59d3e2a1f7b9f853a98fe19ab4f/2", "603b0c9b4b3c208ba6147c47a1c3d147a5c50aa1e6bd70aca84a1b061e147ee4/1", "13b738e761fb0a13895fed926e518d3bdc8a63b40b061b50d09bef6a1e308010/2", "8180879f56d7e9001ff775a365abaaaaf521af286b06db1fd3e02e6f3cac5a57/1", "9a2a7b55564d73ce96906b4f1565ff2ac266041a5473e5d4b029ed1ed6078147/2", "727781f43befeffcddd1127d87fcadc4b7ad21eb20f5e425e00fc10071995416/1", "5cfc43696ca58e3b87c3bcbb30df93cde5993bb909c9d5d4b88e119fbe5fe485/2", "d9e9eabd6a10087635d38e6a22477cbdf4c7e1e8c53c7931db04f73fc7fa094a/1", "b9884a7ce528df012414ee9ab87b3afedef968fee8b2b1c096791719af0bb303/2", "a49ca02db10b999a899a993c513f71539cb53563b549efa3e9d68d9bcf107ce4/1", "d8a8044ffc016296a15e177d29b2f4554216c0eee7ff9fd70fc6dfc89fa5424b/2", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/1", "6e2ae11dad0616f66bbb2b6e6556f580bb987fd911d7132aa6bee2bfc7cc7b52/2", "fe69d9df4bbf20c1842618b6f22adde0a8f3f641f284ecd1f1b1b1a6d144ea4e/1", "2ee0892c27f327ff0aaed410a1892bd66a92edc8e27f12b2e22401da3b9ab583/2", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2"] }, { "id": 2182, "name": "Divisor Analysis", "solves": 814, "attempts": 1104, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given an integer, your task is to find the number, sum and product of its divisors. As an example, let us consider the number 12:\n\n- the number of divisors is 6 (they are 1, 2, 3, 4, 6, 12)\n- the sum of divisors is 1 + 2 + 3 + 4 + 6 + 12 = 28\n- the product of divisors is 1 ⋅ 2 ⋅ 3 ⋅ 4 ⋅ 6 ⋅ 12 = 1728\n\nSince the input number may be large, it is given as a prime factorization.", "Input": "The first line has an integer n: the number of parts in the prime factorization. After this, there are n lines that describe the factorization. Each line has two numbers x and k where x is a prime and k is its power.", "Output": "Print three integers modulo 10⁹ + 7: the number, sum and product of the divisors.", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 2 ≤ x ≤ 10⁶\n- each x is a distinct prime\n- 1 ≤ k ≤ 10⁹", "Example": "Input:\n2\n2 2\n3 1\nOutput:\n6 28 1728" } }, "cases": ["116082d48235a9924902bd04f5b97f1006b8f5cc476802b125d8ef2822067f2c/1", "19f9983f591b5a684d8de5a03aa73d660a335631918ec71485d672993fd4cb46/2", "1187baa98656ff985cb8d3071255675e1f526490e4e501cfba2c6dad07def734/1", "78570f9dc98003213ecc65e7ab2c7d0e23096c42b550ace35b620cc60f25031c/2", "e96f1eb7b84c371f7b2c67d17e40f8f73a4a69253766ebed2e6edcf02b84c98a/1", "842ccd4b283be3a7137337e925488fc3ac70d47cbad5ac517b9cfa8d80b7b31d/2", "7345c3a1815726fb9dd2d2e1eb858e6bdbafeba08aec94c79936d9056d05f092/1", "58de80394268fcf640cdfda835cf7cae9192e07674743413e6d211a82b67b23d/2", "027bef7a7e5c15e4f28dbbf1fb876ee2dce2be4f87844c72e5dd46bde4589a88/1", "f5f884221fc8bd636b9833fa15592c5658cb66a0149455f399d8184c1c11e5cd/2", "23c080d16e700bff25398237e34ce7bc926bb467b686a10532da40b814aa13ca/1", "a4b230ca58605e0745ac5ab451862d66483a98d705040cd52b9a83d583e66ed2/2"] }, { "id": 2185, "name": "Prime Multiples", "solves": 846, "attempts": 1030, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given k distinct prime numbers a₁, a₂, …, a_(k) and an integer n. Your task is to calculate how many of the first n positive integers are divisible by at least one of the given prime numbers.", "Input": "The first input line has two integers n and k. The second line has k prime numbers a₁, a₂, …, a_(k).", "Output": "Print one integer: the number integers within the interval 1, 2, …, n that are divisible by at least one of the prime numbers.", "Constraints": "- 1 ≤ n ≤ 10¹⁸\n- 1 ≤ k ≤ 20\n- 2 ≤ a_(i) ≤ n", "Example": "Input:\n20 2\n2 5\nOutput:\n12\nExplanation: the 12 numbers are 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20." } }, "cases": ["038e95e765c437dfed62e7baed18d1ff264f61d3cefd66217b8b407582f72979/1", "1859c1af35594cc84ee3eaaa7815e46ef7cf33b1f45b0a4dc321ea246f36a763/2", "251ae17c46005c0527c131b1efa71436038c5a9c55c7af0cc62c2a53ea6880c1/1", "5065d2b12e21d5f7c72348041e5784094d8fd61fda59c05f610c185a4293df64/2", "4c2ed805915705cfddde000802724791e6ed5e00f9ff47d152a493b8983bc3ff/1", "e8210e1861b2dd4d655aa5ac5225b459d1cd894110641dbc5571f6639d254268/2", "2465b65a183194a609826448fa6fd4c7b3728b5b3b5b4fa1f0c6e9da4a5fff0a/1", "6868cefa465cf5ad5dbc03c15e9df2703a095b5d43a20f91b4827e5f5c9b628b/2"] }, { "id": 2417, "name": "Counting Coprime Pairs", "solves": 577, "attempts": 698, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given a list of n positive integers, your task is to count the number of pairs of integers that are coprime (i.e., their greatest common divisor is one).", "Input": "The first input line has an integer n: the number of elements. The next line has n integers x₁, x₂, …, x_(n): the contents of the list.", "Output": "Print one integer: the answer for the task.", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 1 ≤ x_(i) ≤ 10⁶", "Example": "Input:\n8\n5 4 20 1 16 17 5 15\nOutput:\n19" } }, "cases": ["c80ec20b29a3346437a562526349db46ed77be1a7ac4757faadc6a1f6ebc5e25/1", "4a7b3d15610cdd3836a091db9df08f73f2abee10cd9c8af4b7cb6f82eadda616/2", "5f5ffa26c241f1556a28ff350ca0da8d052999b45a35e2b4430ace05c22828b6/1", "609b79c3e404c7fcb912ecf9c06d40104337e105e524799fd9028e95fb875644/2", "9ba99599a333645799a21c9e4bf53867bd9ccb7bc3ee1d1d6aa525cb3ba4724a/1", "3198be627c5544e850f0cd96ae0cb29d30201223ae0d63fb1619e29d49930cd0/2", "527d254a0c89705462b44ee7e5c91d983ee2d0c1ec3fa9f09bc489e4229a6085/1", "5f1f46bef9e73308075a97e46611aacad9ab772bad30c919589d86ebbf3b58d9/2", "1822d4892216e19b1ce1307b7491b4123d75fc469dd5b09c84ddb61e574ac202/1", "5f3662608f4e15efb316fc43c7c2dd9e352192552ee9c86f20a787f8a9991f50/2", "ae32e44e9316f578063dd7943fc4822b62d76a57170566f133ac8b1e245fd18c/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "e52ffcf9a42b54adedeaf1ddf6ed55a59aca7359ebb83d09eeda68d1e2bfc5bf/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "7b072fd193c24d895ed1ce51c8618650d4a151d90ea874d6a0504b7b60407de7/1", "a27ad418e386cc162ddf2049e6b13741d219be40114681eb597d1a1850b714cc/2"] }, { "id": 1079, "name": "Binomial Coefficients", "solves": 2220, "attempts": 2520, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to calculate n binomial coefficients modulo 10⁹ + 7. A binomial coefficient ${a \\choose b}$ can be calculated using the formula $\\frac{a!}{b!(a-b)!}$. We assume that a and b are integers and 0 ≤ b ≤ a.", "Input": "The first input line contains an integer n: the number of calculations. After this, there are n lines, each of which contains two integers a and b.", "Output": "Print each binomial coefficient modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 0 ≤ b ≤ a ≤ 10⁶", "Example": "Input:\n3\n5 3\n8 1\n9 5\nOutput:\n10\n8\n126" } }, "cases": ["2d50acefc213948127974a410863e259213afbc28249685bbb715a0387931329/1", "6991740864a75f17e52873d64e4b7a64289f1a33a3793868ce034e99ac13d451/2", "7933192fc6c5e5840fad46ef8380284af68403faeca41ce06b16c79f6ad96824/1", "ed8bbd30686f5845a22e22bc079d5180b1e16c452278a8fbdd20ec90733a431a/2", "6a9e282231c630081f7ec2da97da3fa6e81eab0e42e7714082abe9e2a3c7485c/1", "3a6892e80c315ccbedeea71c318f49f18f063fc6c4a82cc5f733d225c265d3b8/2", "378365280b4fc1953e42cca6687e05b7c6437647e56a332cdb78b9aaf9c12117/1", "9d710df23f9db5928956b5baa6779ef194d15266aeb773300bcaed173287a608/2", "39edf94096c142fd86607c066f46a11c3ca6be31b60067338300bb7dd8584a42/1", "7231ac1c35df622a7bc57dd9ade4c0dfbad001212a4d8c46520244168b34b3c9/2", "4182b7306c4d93444099395b17c2307e133a8d2387e850317545313a42e5f958/1", "b4a95666606ec3f9c7e79d0312546270eb211365b528726b503ece3b45bff7d0/2", "3c40c85ffeb1394a88fbc4af58aa30c884bdb657cf739548537754d3c00da55f/1", "eadc42d8d1f4e5f5286057ec77b030636fda2bbfd97eeaee329127c11a6f3c01/2", "79908e7bc3ab15dd3c40d1994e8b19176c3528c8fa0d3c5058093baaa43c3d70/1", "9fad776b9cf02f22636810e837225679b1b6b8132167f88afd8e2d756ea9119d/2", "00c6254911df3165ae1adef2b2118a79b692a1c7d80f2be4f7d6e1a65e6b9e2e/1", "dab8fad718f2a72c6c4c70d6e9c122afb68a0cf25cc046fe4e914bb59650b97b/2", "28ed293c35f9f5277dba389086271cb7f2b0a346a1a42b01460c6e035ad1a8c5/1", "1e503b179aba97efee788fbfc2c5ded6748395f3900afe2fbe00d4e06a6cdcd5/2", "d17b405c22d3ea8fea3ac06a001c501c1d7e5a328083f5d4a5bcce4fd97e30da/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2"] }, { "id": 1715, "name": "Creating Strings II", "solves": 1819, "attempts": 1977, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given a string, your task is to calculate the number of different strings that can be created using its characters.", "Input": "The only input line has a string of length n. Each character is between a–z.", "Output": "Print the number of different strings modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n ≤ 10⁶", "Example": "Input:\naabac\nOutput:\n20" } }, "cases": ["b16684fa553d70d1b191ca5eb1f1a76295a8c7610237068c4869f0c7b31a9698/1", "1b39c5ccb0b040d515a40d9690e3b6ed3b93bc936cc8437dbdf9a2d9618efce3/2", "db38ce4ca06e2d80038cc3e5927cd72a473c43eb677010010c11c0d26f20d5b2/1", "828ae774a470d2c490dd4ba68753fc49b3dc6056ebded7422409fc5b45855968/2", "ae4f1d4b51337d5556018e75ad6b7de395a632534097c8677983f09931ed09b2/1", "dfa90ede6ebee8606a755ffc258db95d58e0b8b71ce1795bd84c610163c22216/2", "6a6a93f37d6fb13b9ebbb07c369bc56da9571df39c8041ab7936bf426813cfba/1", "14c15cd8c8e3664f0f5b983af60e044451481f6d0c38343dff0d8fba46628721/2", "a78a291a11f5abe0aacc5f933bfe7d60fbbec29af27de3ca629a1490f386dfd8/1", "9b645dc646ce090f658b664bcfc405253d752f59d01c1715ea4af345c7a1c4a6/2", "dc5cf70a9a4e9d6e0799d8bd6ba7e19b8e36171ee4f92ad4c770e69e59b56e1b/1", "83ae610e17e60a8a029213894a46b016677782c07ef3f84bce832942e091ffbe/2", "33a8cda4dfe2cf034d603c2abbed5ef9ee61b11d0cc38b5010c560123b4cab3b/1", "e9fd2e72aa61f504194b1f03f85bacc4605268124504f13e49a92200fc81c382/2", "ebaea2eaecf09108e7593c6ad5afddb33491abfad2d5ea8eec3adac13c6b30dc/1", "b68ec7380884221aa46595618157cab1aa58dae1cb1d0d091bba8a97a4b6b978/2", "eabac8d94b8f244ac0929605c9110ef7d0eb9dd94bba5ab807193e0bdfd55efd/1", "d925c6f219c1f1f55288798999b9aaae3a4679ac43c10fafd481b9789cdbec08/2", "ceab1869144eb53cacbd157c140d45816c7b4430a58d77c706b2308b85f4e6e4/1", "c4ee1807a2f895f5f1f1c9c98ab1acc7de5f27df6eb5dae928d757ff0a2dfa04/2", "ae0666f161fed1a5dde998bbd0e140550d2da0db27db1d0e31e370f2bd366a57/1", "140154083d726867f5e43282aeaf021f9300ec6287d4d2c874493ee655a766e7/2", "edeaaff3f1774ad2888673770c6d64097e391bc362d7d6fb34982ddf0efd18cb/1", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/2"] }, { "id": 1716, "name": "Distributing Apples", "solves": 1737, "attempts": 1872, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n children and m apples that will be distributed to them. Your task is to count the number of ways this can be done. For example, if n = 3 and m = 2, there are 6 ways: [0,0,2], [0,1,1], [0,2,0], [1,0,1], [1,1,0] and [2,0,0].", "Input": "The only input line has two integers n and m.", "Output": "Print the number of ways modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n, m ≤ 10⁶", "Example": "Input:\n3 2\nOutput:\n6" } }, "cases": ["b753c149debe0d6758321bdf10db5617e09f20e8a0705c67d401fe7804627257/1", "ab22706e8944ba509c5735f37393ae5b09d39ff8cc83f9195649f70dbeac02fc/2", "d4fd662457da543fd58ee38abf7c77865f0f5fc5ad6fda88d2bee01dd0b5eeb5/1", "ae645025ed14495d4108aa1786a25903071a5c75565365aa3b7d9d7ae4934cd7/2", "f29146baad81b1e760c698597cd2e4fbc91bca1cc1d7bfeb9b5cb899ab70565b/1", "82ce79b75e9d14121a6eef432965e5aa8c412862f83a84c6a53d2e58f5211a2d/2", "84f3dd226535f9899ae5a40dc987bdda27f44774f3255f9ca9f89a84ebf5575f/1", "735c252c4119e2e907eeabd2b52642d11594ae438fc019da5bb249b5683415e9/2", "74af94d7f27ce2f44799e5d6dd499454a87255e3f06f9fab88690a9181b4921c/1", "e28d89f7ddc1a1691d41feb32753084fa4e786a8adfb85039b02c79f6e0c3cd1/2", "7b574f92e9a2b93f92acf75a0918de9d794efd84a18b61ef8b00481fcdb2b108/1", "1a43d7ffec263aeb984b1b6f0d07b816a6b9570ff80be278a58e5653172a4c4a/2", "7efbf2dadcb4b6c65766e1ab1c5c237b366e84b01a455a621e8b6ccf33897c46/1", "8c65dd4e91c88eed1728dd748f354dea7e372a51958bb4bf6992f79602a6621a/2", "058e6288efc5c9db3251246b1d99aa64fccd6f24fcd7089cc290459b1a3281b1/1", "30269b7a2e2e4f050aa55a81467a4785a065ba862d6a2e0c69302cd2c8782373/2", "c7c07c331f19a1f5f50b18ccfdde6146784283a2ad439113d6f108b83adeca3f/1", "98c86430dc1d0ff6bc9a18d42e7b2731310ad490d23c8f670c902b4d5a057d1d/2", "399942a015a010959b8fb8f9d23458c27c62883d8ca6f98d3872123b48a19556/1", "8914d0a6956de31504a785de2cacb82fd045bbccafed70f3206af9fbc4c655af/2", "f251ddc12234e0da8d3b778bd0f7463fb477f16f47757f5617dc8b4ff4d4f14a/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "f65ceaae246de02135c1326ff5188bdd166c9749c021c91e49c0b9a79f9c7262/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2"] }, { "id": 1717, "name": "Christmas Party", "solves": 1540, "attempts": 1649, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n children at a Christmas party, and each of them has brought a gift. The idea is that everybody will get a gift brought by someone else. In how many ways can the gifts be distributed?", "Input": "The only input line has an integer n: the number of children.", "Output": "Print the number of ways modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n ≤ 10⁶", "Example": "Input:\n4\nOutput:\n9" } }, "cases": ["a2c6c14110a317833ac8f2fbae7080ee844af7469b2aa702876548dcf4c58077/1", "dec4254d5a11086913cddaaa1482e6fb61af9ee5e7cdd4237dd8909460f18100/2", "076320a2a08267b4c026d06573bba408ea68841e73cdc20e62cce59de165ece3/1", "77af8afb6da3c0cae5f20702df2d05051880e0e1a6e2b2c3aaca54e875734630/2", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/1", "5ab07e71db18dc04363cf2c8e392dad5a699fe5bcf01daf4e70ad34e7dbbb43a/2", "eea8254c7500ba3de996aa8ad6af399183f04e17d4a8102fde539dbc93a90012/1", "24717e9e0e60a18b7bccb5ec2a9c4619e943485dc45dc7ca7b71de7babbc493a/2", "0433e993a3dbc505d6e5cad972a1df0ab189cfe7ceece5e94fd47ca9a074370f/1", "35559f7df1e600153459629494709eac63e4453ff4105eb4963c1458136af03d/2", "7b6a23b101082f9afc33a0984465a47aeaa5e022123f5a4e3355e96ba20d7738/1", "d27c6032db5c7a5c0375ac7896670638100de05167e2274ad0bcdbe4669f28e6/2", "a972dd1c7f8298424a161ec621a8736008002bc29c67407c19348baece17e108/1", "1168cfc364da309942048431516266c44535827b67c94a9dba5ff740a750e53e/2", "fc6e45ce6c814dc9a0ce2948bb1e5c98134b3dcd492759eac9d5a83d3ea2600a/1", "2b2a3986ba4b6356187b0880586eed81590e72ceda6cb8815b0732c12d3b51d8/2", "c902c358a3e1c65fd7c8b752194d28f856d38d3b680dfcfd2bf7ce39299c6da7/1", "6daf63bdf38006c6ab2beefe8bd65b9667c83cb45e18e12008ed9147fe38e0c8/2", "458adeac46ee1ebfd7781d6bd8d41a93be2eb8cdc85316a817cf40ba700d67c7/1", "31cabb8b8d096e36abcccf1a84cad293ad226612733d0447f1a3ac3edfa2b3d8/2", "085c348f64a3b543e973a33749e90ba20847b99016a87e5228847597d61ce582/1", "d311ebb73dd4fe9ea8a9422ef65fdff99f8c27c460c4fe79901dbf540668a2bb/2", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/1", "e4085bc24a8695958cc55f7db08002489de5c8f72764c1467d9f8e63c8fe03dc/2", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2"] }, { "id": 2064, "name": "Bracket Sequences I", "solves": 718, "attempts": 798, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to calculate the number of valid bracket sequences of length n. For example, when n = 6, there are 5 sequences:\n\n-\n()()()\n-\n()(())\n-\n(())()\n-\n((()))\n-\n(()())", "Input": "The only input line has an integer n.", "Output": "Print the number of sequences modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n ≤ 10⁶", "Example": "Input:\n6\nOutput:\n5" } }, "cases": ["4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/1", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/2", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/1", "9a92adbc0cee38ef658c71ce1b1bf8c65668f166bfb213644c895ccb1ad07a25/2", "2e6d31a5983a91251bfae5aefa1c0a19d8ba3cf601d0e8a706b4cfa9661a6b8a/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/1", "084c799cd551dd1d8d5c5f9a5d593b2e931f5e36122ee5c793c1d08a19839cc0/2", "eea8254c7500ba3de996aa8ad6af399183f04e17d4a8102fde539dbc93a90012/1", "f8687effced1c566fd9bc2bbb111f69e9eef01b6168d8faa82a23ec47e99681c/2", "e150a1ec81e8e93e1eae2c3a77e66ec6dbd6a3b460f89c1d08aecf422ee401a0/1", "909e20dee79a34482c8bd0e8958537a931ca6d5094acb218d3c211ed020bb5ba/2", "950333fb6214114434d581d9036ebe91cefe0cbef1eec0784e925caf4c6f591d/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "2c69ffaa2ccdba358f9000d08b1c0a0c4b09054a78ecbbeb8d39959732a39e39/1", "3bb4f1621844f8bf415088f3960822b7c188492dce0fefe2941a6fd09719c686/2", "14d01c6abd3f99f28e729fc9d1b8a0e5a76d4db6e708c591ff534f605e8d2d92/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "085c348f64a3b543e973a33749e90ba20847b99016a87e5228847597d61ce582/1", "611d420ffb9aeb38122f443630b4cb3c935f0202b9dffaa1d559655f149f8d32/2", "6fdea977525c56cbcefa0480d78bff003c2fcc5f58702b65262b19c2712335f5/1", "867af30b0751533698096206be5222f21496f239924ef28e6e46bf5274fb0781/2"] }, { "id": 2187, "name": "Bracket Sequences II", "solves": 330, "attempts": 394, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to calculate the number of valid bracket sequences of length n when a prefix of the sequence is given.", "Input": "The first input line has an integer n. The second line has a string of k characters: the prefix of the sequence.", "Output": "Print the number of sequences modulo 10⁹ + 7.", "Constraints": "- 1 ≤ k ≤ n ≤ 10⁶", "Example": "Input:\n6\n(()\nOutput:\n2\nExplanation: There are two possible sequences:\n(())()\nand\n(()())\n." } }, "cases": ["295e73ec95e03c8d7c6956c4594f321c5c535846cd42ebac876a840ab2cb3c3d/1", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/2", "5596af7c8b31a6f5e0c845f870895929c31dc9de95442287c630a440e953b1f9/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "6dd5688d8642f7d1b2bc8fc156307354ec5f320b6c7311be0499ef8f4f61d8cc/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "750a1e025fc0b2cbcc1cfcd3bb9f327ff97ea7e0d2f42786a77da5007d200304/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "bd3dd712c959280b99b2867717687e472ac7c06fab09dceddf126f5bc0c5e5b5/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "9913f1bca58b2757518c0b67a1512e330a9a2f160685c82301446cd1bf392ec6/1", "df12a5357285ff1e32f04ec50132a552694d07da9975e6e5f9077536c41e28bb/2", "06b00d8c26855ae03e330b8ba9fbeffb44bf3a158fb55e9322fb10f6697150fa/1", "611d420ffb9aeb38122f443630b4cb3c935f0202b9dffaa1d559655f149f8d32/2", "81fb1fc8e35dcc896dfb6826cd566c022d903a92293d72543b2e3ca30ed31d55/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "f03ca440870a2bc2e39679120e7a0c935c4bd03d9dda8a761f17ff28a68c00e3/1", "73eca5501936536c5eab96541c05fd915c4bb35acd61feebf9eb389f376b0624/2", "f816c88b5117b09500f3f16e5139ce4dd23da3ad7ef8cfe468c8cfc8faf0bc20/1", "0921513ab61a7b5ee33d525ef507b73c9fe8c568e0070f96bb2696ea63735429/2", "38930107c1a48147e8301a0d04098970c79db6eb2c74007481ff782b9d70525f/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2"] }, { "id": 2209, "name": "Counting Necklaces", "solves": 367, "attempts": 394, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to count the number of different necklaces that consist of n pearls and each pearl has m possible colors. Two necklaces are considered to be different if it is not possible to rotate one of them so that they look the same.", "Input": "The only input line has two numbers n and m: the number of pearls and colors.", "Output": "Print one integer: the number of different necklaces modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n, m ≤ 10⁶", "Example": "Input:\n4 3\nOutput:\n24" } }, "cases": ["3f11ad6bbc7ecca0b2416b713dee77f1a635c00aaeaa946e14cde1c2bfae56d5/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "f251ddc12234e0da8d3b778bd0f7463fb477f16f47757f5617dc8b4ff4d4f14a/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "dfac347cb71ae693ba8a54687f7112aff24ec67f88a3c66f69a7bf968fa2ac16/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "f65ceaae246de02135c1326ff5188bdd166c9749c021c91e49c0b9a79f9c7262/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "fb02f7b44819d2ebea185c95acaed0618bcaafb81d5bd07705220b9118ec766a/1", "39e712d0147757ad140abd28e90f3a8f7af58914085ddc624e76c6dc2a2190c1/2", "55a6faef571cd791229fac760a37ddf53ee1feed9df8b95299e968bf15dd2632/1", "fc2d3fb366ac7dc37bd84a66f2b72b3b80aacd1f5769b45a499a8432e8488df3/2", "37b26abc9c8e1af827e42db5e5d828ef302872d17fadc312536b91068f3e2670/1", "9b3601fe246476618bae40a06c2167531980c8fc876c39d580885a777823252b/2", "276ba7eafcaf7aa28930ffc43e58b8960aeebca8e4b515754083ea8e93c7f725/1", "6cf39297982b9265528a4242f6b6b547ea32d2a59a0eb0f07537cf57143d0ba1/2", "a82ed5c1b1299f994fb309d6243abb824bf93de32cfe3303659b5cf25d78d49d/1", "2ad2c1a45121071c644e410e0e912d967a5469fef5344a77ea9de6efd51ec198/2", "2ebb17007504bd8b241efd2041847b4b7420a7c059ddd20584a6a260d490ce2d/1", "ab1081a4499917d11a20f019e45413f272e7b729a1f9e0ea1889c29962e5c22f/2"] }, { "id": 2210, "name": "Counting Grids", "solves": 285, "attempts": 303, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to count the number of different n × n grids whose each square is black or white. Two grids are considered to be different if it is not possible to rotate one of them so that they look the same.", "Input": "The only input line has an integer n: the size of the grid.", "Output": "Print one integer: the number of grids modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n ≤ 10⁹", "Example": "Input:\n4\nOutput:\n16456" } }, "cases": ["4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/1", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/2", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/1", "251afbc1fe2e0118f21efcd99a65edefb597b294c5b10ed79b7c46017614e8db/2", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/1", "68fa0df744d966b18d68ef6d4d109680ca983d91b722e366be771c38138333d5/2", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/1", "f1da1c7ee0e0f018d446da9caecec6787bfc086f18ab6532563f565910bb544e/2", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/1", "217c446ade51820bda0114064e3b70c48968b75ca7582ce5060b57a9fb6ecc9c/2", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/1", "e9c518c222208126330da35258f2c5158217507383378dcaa03470fa3a83135d/2", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/1", "eeba9944aeb5d1d513a9eec8d6670ffb15d585025cc18f348c897b0601aefd9f/2", "eea8254c7500ba3de996aa8ad6af399183f04e17d4a8102fde539dbc93a90012/1", "af4b1fa13307a1f7891fe92f71b47c231d5d85428e9ef74549a723ca9bb9f487/2", "6d78392a5886177fe5b86e585a0b695a2bcd01a05504b3c4e38bc8eeb21e8326/1", "8cc0cdb9724574a437eece79b4b1ce3cf34d718c69d30b840a88e6b22d03389b/2", "9741b930eee900e8a7aba58fc6765720d4c91d9b17046ba3abace3a6e52dda1f/1", "24bec3b7ab348d1446f8617f4942bb5fbc1357aa8a5625f528f31b63fb6921ed/2", "8bd5a23c3aef1243c78bac155b39b9d57a43d8c49665ccf6f42acf2992a94afa/1", "217c446ade51820bda0114064e3b70c48968b75ca7582ce5060b57a9fb6ecc9c/2"] }, { "id": 1722, "name": "Fibonacci Numbers", "solves": 1893, "attempts": 2425, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "The Fibonacci numbers can be defined as follows:\n\n- F₀ = 0\n- F₁ = 1\n- F_(n) = F_(n − 2) + F_(n − 1)\n\nYour task is to calculate the value of F_(n) for a given n.", "Input": "The only input line has an integer n.", "Output": "Print the value of F_(n) modulo 10⁹ + 7.", "Constraints": "- 0 ≤ n ≤ 10¹⁸", "Example": "Input:\n10\nOutput:\n55" } }, "cases": ["9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "181210f8f9c779c26da1d9b2075bde0127302ee0e3fca38c9a83f5b1dd8e5d3b/1", "9bc3978a81be07cf7b65832bd6dce5e2ffbaf6490f0738906481b62f6250c00c/2", "94d59b76e5b10f74d285313f8c69cc4799f538481dbc05edb8dc62f7a59f6eab/1", "8e016b47b8613007410b4e560334235c186f478d24d1c1d3cd5c7260479939d7/2", "bd46fec83a8a99f0ed9ff53d36813491ccbfd455b13e2c46eb570fcd3b5f4e08/1", "7897dd440f47cc04c5d1ce811ee4b65d6f0877c6c62377ddf1c229e54d3b125c/2", "a3f3f6ccc080ea67532d131425608295c6b01b30ab4a494983253c243040d34a/1", "d00a9033a7df4dd6b096edca100b1ba919ec61412c1ce903485f550c441309f7/2", "8f7f36edb8097fcb911822aa291b37d7686244ae40b03ffca1de98706cc9967d/1", "ff585b98ca8ac0885967477bf613041efddff387fb918622067117fe65294e9c/2", "4c7e864739199d6fac9f2bc930c1a8551c1d77dda02ed933aab282e3404a34ae/1", "acda1d3a1a52594c143c0d18416c3bdfe0658337945ec85f1300b1fb39f288db/2", "8332317b76bcf1cd64a38f9df180124b76253f7d38035d8e74c59c118ed218cc/1", "70f6c1d879815e042ccbdd7cb83261fc17f0e103890079639822641c75960a16/2", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "495a9edb94e6c81fb2d6748203cc06228ef9791d89b9f8549a61d91573ea1cf2/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2"] }, { "id": 1096, "name": "Throwing Dice", "solves": 1108, "attempts": 1208, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to calculate the number of ways to get a sum n by throwing dice. Each throw yields an integer between 1…6. For example, if n = 10, some possible ways are 3 + 3 + 4, 1 + 4 + 1 + 4 and 1 + 1 + 6 + 1 + 1.", "Input": "The only input line contains an integer n.", "Output": "Print the number of ways modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n ≤ 10¹⁸", "Example": "Input:\n8\nOutput:\n125" } }, "cases": ["4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/1", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/2", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/1", "e6c21e8d260fe71882debdb339d2402a2ca7648529bc2303f48649bce0380017/2", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/1", "2115cdb6bfcfb008eb2bab2bb79347cb064a48e4e7c4115ccbe4469c787bb6c4/2", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/1", "eecd262c3ecab667b61ebb70835f3b181a1d1530d3ebc0ef99a3a8dc3d5b193f/2", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/1", "a5e45837a2959db847f7e67a915d0ecaddd47f943af2af5fa6453be497faabca/2", "2e6d31a5983a91251bfae5aefa1c0a19d8ba3cf601d0e8a706b4cfa9661a6b8a/1", "3216895b97263f4671c3b43421f41729557561eba5800a04565ed4d1bd1ca1e0/2", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/1", "31c656391e5af170a3185bd2d2fa6275de21d80d0351fb5ca479f9be4197868c/2", "7236e98f4f21fe9c0cfb45a242edc42d89af23cdfc14549c5025e35b07986ac8/1", "ccb24011e60448113f20f507fd5fe6ebe6ee723c3c37db6b036d81f253e54966/2", "935962a7dbc7239d502502b5f7d02e98689e66311389e7b07a8c907f26a10cb1/1", "83dd111b7fcde36575521dc394b60063fce07c37444629599ab09933edd5aa6b/2", "cef46f3e66a62d5a1af3923f228bdb17dc4fe4255730df1670105869a8900aa9/1", "1732e86f82d8abe8bfd9d3bedf23880b7765a62a690e57a45e40f53427ff2bef/2", "10ab3805f86a05287ecca2d8188f332ecd725ca33f3c18779464fc9db9c53582/1", "8bd2a3216e08ac2a58051bdcfa1290aac69c0e6f78073451a42c0f7202cbcc5a/2", "22730ece5e792849c3a7b5258461f93ea1f28a764dfb66421417ccd8030dbc27/1", "3ed427b835fe3e6a0ffafc91b4af52e0f2216c8c41cfcdf03602550f677051a0/2", "73ff0e210ffa829c7007f3e4fe05e41fd001e761c41f8a1d5cb2eda7ee2da514/1", "b6104e1c7a3b6c44178cb236b63b17be38d004654be39842e5018df9f09f7bb3/2", "896c5c9a4a3df4c7b3330f6c7d6129eea06afa09f123fe1aab83b06987bd041c/1", "57e777ccea5e82405d6b95a9ed6e741f7eb0a25b959f2db80c1d01f3e2ec23a9/2", "b06477ee37166a6f326cee8c3c6b526fb0e82516a2e39dff611070b719be4927/1", "f98cc1aec89f04c1eb7041d851f4bb96275544440a8c76cae03c27a0478dc5c5/2", "51900dcabcc34ce361d9ed7a0674ff4ac3674ad6c98f6acc1647f9b0d34edfac/1", "c57eca85f3406bd3774901528857a089e154e87be515834a1c46174628064a30/2", "7723fea23ed8eb32f323bb230986653ae5d8c7971cc7caadf302ccca295e911d/1", "bbb3d9675a97543cea94f2c235d8a4ba21dad22231fdf1412fee326ebbf5143f/2", "b2e8c06e28faa1a3075d4ac2968e5b0bcb4ce4c33866f3e3a827dcbf5cacb403/1", "52000339971d639422e863d3cd49f50eda33aea6d626d41f5b8d97ae405bcd0e/2", "2f84924da1b5f22b87569042e84a3e2e5664bdb10ceb0e57c39a78585c2597ad/1", "b0c3835515683ccdba15e589b1db7d7ece9ccf561f9b4b56e46b0d58305af47a/2", "7db4ce3ac79c4d604af1025a5f2b3b48a6f29792d607b5c57e60375d9dadd75b/1", "0832982acf543b45b5392e4db566b791f712ae14269e4be3c7096a0e87da734a/2", "d4af19a68c4a92a966abd4f13058dbaf110bd3688ce05bbd43fa0270e1617117/1", "bf11b023dec98bba7d230b02fbe17d99307ddac881169bf793eb7f234412b0b0/2", "a13c53efccdc06924689b85f1fb95e08fe2703d1017884e59bb6409d8fc9405b/1", "790efea16def27f60182d512a06f41d61bb8c841850868d87f132622551038ba/2", "cf81a05ab8a471728b65854943d0a8bf88b988329dfbd63508d6c7c6312c2d80/1", "d6f88f60e7d16679e1efe741a28c77c01eaf7c869aab344a82fa74dd1d6d9e32/2", "797b32ea3802306d7f0e8e729e00b10575cda4248d17ad6a70e88932460cfcf3/1", "0aa2c361de5af00159d6fab46791b02bde5e9907ff82f55ec590ddc690aa3470/2", "cc365c58b67280ba27550eb25c74a53e340d89614d85ac183f0a310d4d5417eb/1", "2f0ce1099b5949f88e4d1460f9487e68c1cb07c44945ee448f3fb7b62f98000d/2", "8310eb81b99944634c72a98ed4acd8b0415894713019a3113a0f355667bbf9d2/1", "1de3b233312faaf3c6c445415ed2d416e94f71be2796a0a04e4cf8222a69bc81/2", "bbd4803ccd489a68e6dc2cfd5aa196caf997cdf7fad6ac40ab90914cc551e766/1", "f334f3fdec2e57b98ab05d1bb5aa80e994f0e76d8402b5c5d3dcc8b85c39108a/2", "b8650fe462b5b738b2bb69af1d3c3f16974db285c79025cf1b98652763ff509a/1", "9361a8f9b5c109873edbb711449b024eff687e08b0dd1c736bac171e5dd22e7a/2", "fdd28d0d1fc0fde4b234e773cd837b9614db9c32ae5f75610aa7fba526465412/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2"] }, { "id": 1723, "name": "Graph Paths I", "solves": 958, "attempts": 1027, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Consider a directed graph that has n nodes and m edges. Your task is to count the number of paths from node 1 to node n with exactly k edges.", "Input": "The first input line contains three integers n, m and k: the number of nodes and edges, and the length of the path. The nodes are numbered 1, 2, …, n. Then, there are m lines describing the edges. Each line contains two integers a and b: there is an edge from node a to node b.", "Output": "Print the number of paths modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n ≤ 100\n- 1 ≤ m ≤ n(n−1)\n- 1 ≤ k ≤ 10⁹\n- 1 ≤ a, b ≤ n", "Example": "Input:\n3 4 8\n1 2\n2 3\n3 1\n3 2\nOutput:\n2\nExplanation: The paths are 1 → 2 → 3 → 1 → 2 → 3 → 1 → 2 → 3 and 1 → 2 → 3 → 2 → 3 → 2 → 3 → 2 → 3." } }, "cases": ["8aed2f103fa582b0c1a1971e9063800a8607226dbd4580a562a7a717a2f52c3d/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "facb20f6c4d977b8a2b5a8bfaf9252c58bd299e06649393c921465144b63b861/1", "95cf32708a31caa478a0e9141103ac567d85e5186e697e7e0c81f75589999e31/2", "ee220db5e13762041d52315c8d5d3c08bc096d478d24ea2833df17576a483598/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "12c778f2857d0abe27ca15afa34dd0bd32dacdb81f8a976132edddf1bad5468e/1", "05b128a84c8a17bb72b511889d7a67c13735a146621484f819e0b9607f0337bf/2", "9c17d9938ee32619eff8f0ca90c48ade31ad35d031a81d966dd461db390438ac/1", "0284d2c9afe829d1043855d26f4c2c3712821ce8da53e8565c8891c44318f984/2", "f327cafcd7f8e37d23035b135b0284cb8a8ef138b2619e99af1357b2bd2fc7f3/1", "8896d4d31e7ffdb035f7b6288530090a088c0a8d8146d04ce31b646395fe467f/2", "a3537562fb404f91d4d7dfd531bbfc3c8a0686049bc78cf81a1023c6af523d0b/1", "fcadcd2f6a237199f6af91db3dbe50fab128dca50363484d7afa6393fae507c6/2", "17873ed3d0f22bedc602afa53dbcc37884f798358672b8e30377af490d31b742/1", "13ddb0d4323d9cac63470278c998aa1ff35b200aabe508c504ff4937571623c0/2", "0f489b876c0c7814116f9ca73d8d9182dfbf7f79d4f9459ce3c35053cf7967d7/1", "d8fa249f49a60e85b3a049fb2f5b6a37069b460373024d4bbbef7c47d10a2055/2", "4242743ced8bd592bbf7e31103969259a6576cf9537bfd09d5d33c9882f70422/1", "11aa78cdd2d282c9c92f2e677a547c78d8478ff8311a1d01cfe96713c332d272/2", "d4c79a6e94b4a31d42bcdee814f837de6fdaf00632aa21341315f0e6c9be7d1e/1", "b44f2c285033b61d5fe467019e49dc205a0fee3c448731a98e8a9f249e19d2e9/2", "16f998e8fe8aeb5ca978406e39dcd16b503e9b90664cf2a96e0d1b3cef4bfeb6/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "1463e0eddfc99f0fdd62ac7605264efc9ec20c68bfae8251dab1edc8a2d8e76b/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "b2be8eeea9c983d5e45d706eb0ee17007f0c27c2157eb76f6584ced7ce7d9fde/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2"] }, { "id": 1724, "name": "Graph Paths II", "solves": 803, "attempts": 833, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Consider a directed weighted graph having n nodes and m edges. Your task is to calculate the minimum path length from node 1 to node n with exactly k edges.", "Input": "The first input line contains three integers n, m and k: the number of nodes and edges, and the length of the path. The nodes are numbered 1, 2, …, n. Then, there are m lines describing the edges. Each line contains three integers a, b and c: there is an edge from node a to node b with weight c.", "Output": "Print the minimum path length. If there are no such paths, print  − 1.", "Constraints": "- 1 ≤ n ≤ 100\n- 1 ≤ m ≤ n(n−1)\n- 1 ≤ k ≤ 10⁹\n- 1 ≤ a, b ≤ n\n- 1 ≤ c ≤ 10⁹", "Example": "Input:\n3 4 8\n1 2 5\n2 3 4\n3 1 1\n3 2 2\nOutput:\n27" } }, "cases": ["eb91c7dbdceee243e3b9ccd5ea3a79d98efcf7869f4964db994d63217b006d51/1", "238903180cc104ec2c5d8b3f20c5bc61b389ec0a967df8cc208cdc7cd454174f/2", "731155a748e5f92a040463bdba899ce8741e3c0280a1a2ce3d41ae41d0d0d384/1", "1326faec3eb42dc72ddffe46daf3940b932f48b9799f6cbf28e80504e7b34958/2", "ba1f0456107ea8c3118fb9af07edfcb0ee632c3fb06daeecfa2d628f1e7bcdbe/1", "f14b4987904bcb5814e4459a057ed4d20f58a633152288a761214dcd28780b56/2", "b7fa9599ae26d86c70dff87510e4874c357f273f29b86d9e248416707b4a3c24/1", "a2c6c14110a317833ac8f2fbae7080ee844af7469b2aa702876548dcf4c58077/2", "743abd3676beac897a9762f56d8b38efea89e2e22ed6e3395abf515346864d6b/1", "1a252402972f6057fa53cc172b52b9ffca698e18311facd0f3b06ecaaef79e17/2", "8bb44a9bcb84d474253edcead363037776405f0c218db090efbe00c988e46db7/1", "42d54a1f0cf08c9878b676b254d38d0a211e1757565f0bf4f7ff7ee87fe9fac5/2", "f34cdd4a521c71b8e9283f162a60d169181d66b27d55c6eaa853fec37e8e5f79/1", "12d9708dcb457de75cf0ae2347b3c23445a36178e956dd0b929b0fc80a0a9034/2", "aebbfd0a44dd04dbcabb99aaff195db7f3cf1a1d564d8d1c996bdcdc5df90217/1", "d59f6e706f2be2e974bd473f8572f9c3884a26ff3970dfb0625f09bf665c3321/2", "27dd7870797016b3924e8fbf956f555eaab4a06e74a8cd377ded84c2df8ca028/1", "ced6b52979a2172543a6f27d44c03f62424f1e478794d95ecf0c56542042e5dd/2", "6207e32ef39301b65b7a4bef924f67ad404283a9e48a544e666652227e16606e/1", "284993e329d031c17c6e9c8fe3d9ce65f7969362d29fb3874466e8603a5422ae/2", "16f8c44f2d55f1a5b012c60462a401dbbbd5479fd113b98ef25db4226f37e173/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "6d5a01a4ed17797453b4c020e1d692be4c768650cfa377b70dd495da6ef68d74/1", "7fbcb89f07d3c80d4cb610c7441c03345e33d87345dbaa6e933c23343a2cf1f1/2", "a977dafa82ddff0611e43a400a1b42587455ebb08a8ec9bee2d485bffb66c71b/1", "b8650fe462b5b738b2bb69af1d3c3f16974db285c79025cf1b98652763ff509a/2", "2859a13c5c70d11da37562b2dd2674124f394771cde72cd6e6045c07a2e30073/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "6bc2e90ef8b39605741bde5478141905bdf9f2291a292c63c69d470a7de28dfd/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2"] }, { "id": 1725, "name": "Dice Probability", "solves": 945, "attempts": 997, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You throw a dice n times, and every throw produces an outcome between 1 and 6. What is the probability that the sum of outcomes is between a and b?", "Input": "The only input line contains three integers n, a and b.", "Output": "Print the probability rounded to six decimal places.", "Constraints": "- 1 ≤ n ≤ 100\n- 1 ≤ a ≤ b ≤ 6n", "Example": "Input:\n2 9 10\nOutput:\n0.194444" } }, "cases": ["b60ab35dd1c3591ac92f3f99993a95275d622b57b6e33d684ac88108621c1f67/1", "1caa3a3e08590aff5a5ec80afbaba3b84fbdd21c9f89f0b52e32cb375eaeb2aa/2", "b8a855cac25babc7c74ed45a1523a4af6e5173f2dde33ea278c6107e1dc9c1a9/1", "dc730bf6f1a3df72e217d1bed7343cd68f466bc560bfad4ff7d8bb979a5e38e9/2", "9fa3bf7103161e344659127dbcd0517d54414f54be09fc2ed676a7c1d89c16c2/1", "be8054aae854daed80daaefdc52a580262bfa55158028d115c6bcdf34b5a17bb/2", "48de168c90cd21e74c5ef3be009ec0bfdcd67380def609048596e2a04807d41d/1", "3c3537da19e16a25b3fe612d42c2f7e07916a9dd4ada1e6c336f6fe563972297/2", "c4ca3ab84bd0c0949f729b884a1f61d7dce1e6c9ea673bcd556553bc3b91e22a/1", "a1601461f978fb6c4150e58de841e00570cbf287b1f727bba38d906da7e0fc12/2", "20d29e8ee7c786f601ba80c99da3ee13000773756a62778b0472e222787d90f2/1", "86fcac4184152b5e58326e2d83b28998d0412186f62e92a67d203727a16847da/2", "f6fd88147c94bcbc84402fab77a7f39c581cccc0869d54f91958ad030d09c21d/1", "d07f8b8eb2b5a15aa7a6d7edb68516d767d52c8d8fab98965cc8f21fe079cb05/2", "8a9b474c7c67a030fafa78a4af0b394aa1d18e8a3ceb9adb7492d54231d94874/1", "e6bdfd063599af30d3279ec57f2e2a4675be8637858ba8a70d87517074ef739c/2", "57c69d8a63a7e82f502578abebae76732c0e58d061e9b32a058f56028a115efe/1", "28e8b44f9f30d5079170b391c422b147e7e383f16b967a634a2baaa89e97e1ab/2", "767b2c712f47b182535fbe04ebe9c2275f9c4ee770e31751656916a424f38c45/1", "837bf7f751c970678a3fa103c81704bc0d57e7db2f7c6ee75d38bc3227cab32c/2", "5d380796dae6e637693552f66ae3d719a4bceb5ab1327af2be61b05a21051cf9/1", "7c23575be1e90143a566741dd2e933f37705c3a483f160bf9c6952380c0af24c/2", "d67df7df61d6152c4a61c23939931c5a90e51646e78d82e70a4e67d84eca097c/1", "345b39032c1a0ad89459df47b6a7812612eb73632b38ddc6b38a3fd1d8c268a7/2", "57b179d5c388836dc417f95c7a17ce4ca7ce9f3fe73b2eb80c54f4b3e341e85c/1", "2d217ee69b3045922ac54d17b53ea47415dcaf927afd66be9cb160526713f91b/2", "cf0dd8ac586c6a7f2b275eb3706d47b3623e5c38fdc738badc007d4fef00e7c0/1", "680991fb7e6548da36a30675c74dcc624e14bc1d0f7a1350395bed1f10c60b71/2", "0dc1ebad30d48054dc68eb89a6fa6f93540a49aee09f2c269c2ce36dc406af15/1", "1c33b79255f2f1f015e7cc364f7790626cc0a1681364ad2ce9742fddcfa0dc1c/2", "1def07dbe06eeb097aafec8a40329937cd20c93a83634b8221ea2b41a894310c/1", "ddbb20b371ffd12b30d23ae7a3b57a4b9e6d2cddc8aba15dd27dd753aa5c55a5/2"] }, { "id": 1726, "name": "Moving Robots", "solves": 512, "attempts": 541, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Each square of an 8 × 8 chessboard has a robot. Each robot independently moves k steps, and there can be many robots on the same square. On each turn, a robot moves one step left, right, up or down, but not outside the board. It randomly chooses a direction among those where it can move. Your task is to calculate the expected number of empty squares after k turns.", "Input": "The only input line has an integer k.", "Output": "Print the expected number of empty squares rounded to six decimal places.", "Constraints": "- 1 ≤ k ≤ 100", "Example": "Input:\n10\nOutput:\n23.120740" } }, "cases": ["53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/1", "da66917c5e74fef2b33dea259a0a2ea64aee41e56b9e7ac48bdaf42a3739b15a/2", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/1", "60011587948d4831e85b55953ccd89a033fcc12ddaa73e951328afd02d019faf/2", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/1", "6ca6cb2dcbd68d16904c2faf3e2cffeada14c72a622444e95e5941759d7c539d/2", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/1", "a9cc708369489cfe0ada6e09994615f3f34e5fe7e6155b81cebd2800d6cb032f/2", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/1", "c460304c3a9f7c4b068430ec4c16075f81447ce055ff810c73fb25bf188341c5/2", "95cf32708a31caa478a0e9141103ac567d85e5186e697e7e0c81f75589999e31/1", "ab780cbcb4e2bde17500dbf9333c94b6d5f80f0cf2dc1c8f4552fcbce9c15031/2", "6442bc26a7c562f5afe6467dab36365c709909f6a81afcecfc0c25cff0f1bab0/1", "3874193a2582fc681c52232af6095db032b100ac1c441c56c3096676de82baf5/2", "95aebc97bc646c67fdcd923a5965b001f3c8a5c4d3a77075112e12a3a311d760/1", "35ba631e899c68bdf34332ccd4c207107fc4f1b02b647b3e45ab907f6ded2504/2", "4393447bd3c1d55ea7f97417ecb1b36a691ccaacaaf2ebd21c59a5acf825fb7b/1", "253ef9418eac8306e370f8c467aeb9666ef8264a08e47d6f2c7bb5c92e2f991a/2", "eea8254c7500ba3de996aa8ad6af399183f04e17d4a8102fde539dbc93a90012/1", "031c425f7f5d2744f5aba7a0f36a393897d36d977c095a3b074881180fb80d4c/2", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/1", "c541a23ff6a15f01df428f372710aad2946cf5edb2b15424b9587bcf597cd5b0/2", "238903180cc104ec2c5d8b3f20c5bc61b389ec0a967df8cc208cdc7cd454174f/1", "90d04e38ccec3922d768e69e2d6a587857e846716a556da801ca2ab5a5e0d3e4/2", "1a252402972f6057fa53cc172b52b9ffca698e18311facd0f3b06ecaaef79e17/1", "451e8f247cf29f60d19d51ce387066a43dc6be3b1d203fe40d072f8878f9d360/2", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/1", "d57d13a97d22abde56c4cdee414a8903785330710f9007f63384b583ce942923/2", "7e332bcee418f7d700927c946d36341f0651d6d90997b58d3d5441dec96b2e74/1", "17a45f2d34ee13b1030689ccc8983ee2aa665f1811fa49a6662c88ce72e6f27c/2", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/1", "dbf37f0909d39a77d8535a961a6756663df8cd42b036d8d972e718e64d02389e/2"] }, { "id": 1727, "name": "Candy Lottery", "solves": 700, "attempts": 718, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n children, and each of them independently gets a random integer number of candies between 1 and k. What is the expected maximum number of candies a child gets?", "Input": "The only input line contains two integers n and k.", "Output": "Print the expected number rounded to six decimal places.", "Constraints": "- 1 ≤ n ≤ 100\n- 1 ≤ k ≤ 100", "Example": "Input:\n2 3\nOutput:\n2.444444" } }, "cases": ["f251ddc12234e0da8d3b778bd0f7463fb477f16f47757f5617dc8b4ff4d4f14a/1", "5c72346e6f0a1a99faa685e41bf2fac0e833e7a549f9a345f11754f4db743c33/2", "f65ceaae246de02135c1326ff5188bdd166c9749c021c91e49c0b9a79f9c7262/1", "8df1297827a5b446d8548d04272276450b8bcde5ab150e1cf4a2a778837fa84d/2", "b4e957e0334779b159abb9d00b7a560197095163204852ec43dc2cacc130f372/1", "2f765b1beec6f329a48a127ebcfa06e462697817e69134d74bd9269278ea9abd/2", "a96b63af333446540818c0eacd2c408b6d6403d649c9c697e8c66ff162a4422b/1", "4a0060bdbe30e755726d83a01c4e81aa199698c54e8ef9fe15c081c28bfea910/2", "710be522d9548d4fada099b9516bd6e79e419558a0f84e9d3486b9f83876afd4/1", "ed1c4e42ae1dd513c7d4db4fc3ae67b88a6a4afb791b173290366ba63a2704bf/2", "d43675d772c44af53bdb68edba1a15c50e12575bbf59279f0c5d7b1b32ab5cb7/1", "fa712d42dde1681238ea15de76184b89c146c183f7c125cd1e25720e880569d2/2", "ca7e0010e244a9b75bbae454f1afc42efb46a3f7bbb44de0aed391a62d29d7c6/1", "14659d9bf609dd008e19bb39476eeec3b6fb5f0aced6e64fd32ed0747ddcf6ba/2", "c080a8eeed938e92f9073240b61526667535fe2448076f5b0a3891bfd47995e4/1", "dc7d10bb3b367fbe7a9e4c0dfcebdd85de2bb2b7a8128299e963d9f176be33ac/2", "413949dacb8adac34948311914bda27ba7219097c1ad6f8a010d5ec2de5b554e/1", "a2fdbb9cbafd765b79b2d6f571ecd48d19e4a18df04f18d3f6e5fd7a30e8df22/2", "738b6f72d404cf4eb2975d9597440581107fa8ca0bfcec95741296c2be0ae199/1", "c372ccda154c9d1e3f57f4aa51b7995cec952d72952f1923c70363165d3192fe/2", "3f11ad6bbc7ecca0b2416b713dee77f1a635c00aaeaa946e14cde1c2bfae56d5/1", "50d3a69b930457282debea3d352ae49803a15f0843ae1699399ef4de2f4f7cdd/2", "064b320e629834a8691aec032af911ee6b7500f488f18a15559903e92ec44df2/1", "f9ecc97ead6622ca99cf61872d9d810c8b789fd2dbe14b2947fe758901104f41/2", "e3b77dde1a3f1075967351123d4066e127816879d7a40e9e70a0b6930023d42c/1", "d2285b0cf7e16559061f8ac0489c9f4e34a5587000c531d0151f294a0250f472/2", "8168620068bdef4c0792a577b005a4062bb20550b696531c20435bcf92012e99/1", "6c64e2e4a7e477a7597e0166008b8535e9543eb607401ff8d28e10301d4976c4/2"] }, { "id": 1728, "name": "Inversion Probability", "solves": 620, "attempts": 634, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "An array has n integers x₁, x₂, …, x_(n), and each of them has been randomly chosen between 1 and r_(i). An inversion is a pair (a,b) where a < b and x_(a) > x_(b). What is the expected number of inversions in the array?", "Input": "The first input line contains an integer n: the size of the array. The second line contains n integers r₁, r₂, …, r_(n): the range of possible values for each array position.", "Output": "Print the expected number of inversions rounded to six decimal places.", "Constraints": "- 1 ≤ n ≤ 100\n- 1 ≤ r_(i) ≤ 100", "Example": "Input:\n3\n5 2 7\nOutput:\n1.057143" } }, "cases": ["c88cd5f89e7985c966f4a428520c4b3cbe914a2c2475c2edbe607353c0c6f562/1", "020272b61382584268802e89a91b13a9589274cfa25a53cf4d83cc46f1ec075c/2", "6ad75f7d5f2c3e8d4ef0ed4c24b7ce9da827cda41b89eaf629579c789ee1d9bc/1", "1c985f527c646586a01f9c1a8c47dd421f4fac4b3b8d3cbc4bd7bdbbbf5a0dec/2", "c7a21d20f76c18407a4eb30005313c1694276021b4eabc130ce897d16c83d660/1", "7295c503619858af3c470f96de4ec2a7d7e9c640506e8d5d3d5fb65b75bcb794/2", "8f49b93818366bcf1516ca7cb37088d6f7b584f0665d35032148e002ce7d9dc1/1", "924d0078df44b1b1ddbc79cbdd7eb4b69dd5748047e605691c58d5c16f8129c0/2", "67b8cbf4a099ae144aa71c7456d483d4bdfa66e105677208487b379b696e013d/1", "1926bc5d67911ae7e63cff889584f9ad7aeb2c56ae64170ca4f2e3bf1039d955/2", "cced0953b874c95964953438a278bfbf0dd0f7cd76e116b1e73bb336d4bdfd8a/1", "51edd2cffe8a32e24558922601a5d8da1aa3551222e7b8d15765149171b0ac2e/2", "f0386e80bb8de87c264d18303567cfaa9be40c417698684fc5ca685149ab275c/1", "f34044f03412d3cb9712ec3a940c7b4562320344fed01abc6d3297c05c2e185c/2", "0d0ea49108a37065ac1c120b2ea861fee337b1869e29fb9397fdb311d19b36b3/1", "fb47e5d8bc3cdd0f50e2b6038564ac43f2c7722204f793f314fb7e046e7be293/2", "3a4b3b6bad814d432c1757f026ef06de303cf3a3d80e1a3da898b0a7054d1f69/1", "d60c1a5d6fdf02d44f8a34dcc95d681e493e65e14ec6d88863b53171cdea1d4c/2", "9412ef4254defa1a306a5da600a05cea05b5d4fb1445cda1b941f636b3b1b1a2/1", "e443cd25a91a8a73adc3fc4c0548a4a0ffc6c623f5967a141d811c9b2c8befc9/2", "f241e49ae60c2558622ec98e17be9ec1ef3ee199807582711c365240483f6869/1", "b968ace93aa6b7b5fe8929b9f80535bbba4d2b09adb64ca22d3fdb0a1bbd1fbb/2", "3c5b54a75e483fd7863419c9c44f76601871d171c02a7a1e7490efaf809bd1da/1", "65e8fe344f770e52ea7f3f8fc8633959361bb78e6ad3a178b7d3b1f16b6e2e9f/2"] }, { "id": 1729, "name": "Stick Game", "solves": 914, "attempts": 935, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Consider a game where two players remove sticks from a heap. The players move alternately, and the player who removes the last stick wins the game. A set P = {p₁, p₂, …, p_(k)} determines the allowed moves. For example, if P = {1, 3, 4}, a player may remove 1, 3 or 4 sticks. Your task is find out for each number of sticks 1, 2, …, n if the first player has a winning or losing position.", "Input": "The first input line has two integers n and k: the number of sticks and moves. The next line has k integers p₁, p₂, …, p_(k) that describe the allowed moves. All integers are distinct, and one of them is 1.", "Output": "Print a string containing n characters:\nW\nmeans a winning position, and\nL\nmeans a losing position.", "Constraints": "- 1 ≤ n ≤ 10⁶\n- 1 ≤ k ≤ 100\n- 1 ≤ p_(i) ≤ n", "Example": "Input:\n10 3\n1 3 4\nOutput:\nWLWWWWLWLW" } }, "cases": ["10b592bccc3ed0106d0063d3df6f2526a30d4b92d3dccb05745ce12e13696134/1", "0b304a09b46d0ae6f90ca243e5f28fb17fb29e3d0d42d54a8d044d71d622d3c4/2", "6c50b5c859d15b4fe56a9634e708ed842c725de3d416987615fd2a5dbc083bab/1", "8511450dbfb0ca71414387cac4224fd63ee65ae8d16abec7b047a137997e5aac/2", "0af21f50c715f8ff94b2d81f206f8b15b0a2f074d5e82d606b6bae95700feabc/1", "ac86044ff3b5b204f1d6156737b6681a8b009d2484af9b22d23510fca9b0cec8/2", "899d558183b6646ce45e21cc2cc0d587623a3140280c1d6f4c53b8e15df727dd/1", "81c00600c5faa853391640a436ecd7d6e501a5de0c657d7256a8af026e5dcf77/2", "ccd177620695baf916b8d68df3975ffaea1a901ad0b845373838cc6f472366c7/1", "d4a88d997e52796f98cd44bff652beb676dbb3be491749cfe71b6953db50398e/2", "8258c74c327d875d6262f4e4c0c97433ff552bab0d98f6f583a44524419327fe/1", "98cc12cc0ff2acbf6a69dda52ece9d6fb3b33d6c994163b2cb4799b0f09690b9/2"] }, { "id": 1730, "name": "Nim Game I", "solves": 1136, "attempts": 1177, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n heaps of sticks and two players who move alternately. On each move, a player chooses a non-empty heap and removes any number of sticks. The player who removes the last stick wins the game. Your task is to find out who wins if both players play optimally.", "Input": "The first input line contains an integer t: the number of tests. After this, t test cases are described: The first line contains an integer n: the number of heaps. The next line has n integers x₁, x₂, …, x_(n): the number of sticks in each heap.", "Output": "For each test case, print \"first\" if the first player wins the game and \"second\" if the second player wins the game.", "Constraints": "- 1 ≤ t ≤ 2 ⋅ 10⁵\n- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ x_(i) ≤ 10⁹\n- the sum of all n is at most 2 ⋅ 10⁵", "Example": "Input:\n3\n4\n5 7 2 5\n2\n4 1\n3\n3 5 6\nOutput:\nfirst\nfirst\nsecond" } }, "cases": ["239ee41854e91b70250a64c0190d21f5b43c9aa1cacca88b42e91eb865874abb/1", "6090a0817b9da2888871f3f693e629ed1ecab598217713db27f232b7f2b2f7fe/2", "3084e8def0d01e69a2e8befbf7e018760e8b66924cfa0229bddedc078d79c3fb/1", "06716a9b8ae000a43a8e400e98c8a176280e038187272c35c3ad83fd4589e601/2", "e8d6743d028dbc81b4c241cf21027df55c469464a47601bde7c1993c91b3105b/1", "70abedb5ee8fc1ddd3120fdcd1a021521352ce464d0e4146d4ecd8a295514861/2", "ccce065269620747ca153e9a430d44b175cdc1f7e0958741b567250a1d6b1d95/1", "b640e840b19d378660b32fb51ae18d67dccb4a8596a29e7bd72c1b2ae5928f41/2"] }, { "id": 1098, "name": "Nim Game II", "solves": 925, "attempts": 965, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n heaps of sticks and two players who move alternately. On each move, a player chooses a non-empty heap and removes 1, 2, or 3 sticks. The player who removes the last stick wins the game. Your task is to find out who wins if both players play optimally.", "Input": "The first input line contains an integer t: the number of tests. After this, t test cases are described: The first line contains an integer n: the number of heaps. The next line has n integers x₁, x₂, …, x_(n): the number of sticks in each heap.", "Output": "For each test case, print \"first\" if the first player wins the game and \"second\" if the second player wins the game.", "Constraints": "- 1 ≤ t ≤ 2 ⋅ 10⁵\n- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ x_(i) ≤ 10⁹\n- the sum of all n is at most 2 ⋅ 10⁵", "Example": "Input:\n3\n4\n5 7 2 5\n2\n4 1\n3\n4 4 4\nOutput:\nfirst\nfirst\nsecond" } }, "cases": ["fe75c307e70e5795482246bc39f5380b41d5c423dfae4a8e3862e2f002544176/1", "480c2336b410f1ad5f8bf1b28944490255804b65350c527787e74ebdd511e3a4/2", "d8bc59df17396f35fec4f6032a3841e0e7a4deabc47b7c0c712be44955ee34fe/1", "4557208e21463f9cea92922e2bc80fb5efdd47635fa3eced3658757ac17de525/2", "51545e675fd925b8ea0e7f9bd3dac49390be36960809aac6911061e759d42df6/1", "dce3d503cc9e58a36f63304d6f9dcae76bc199a6277cf538aee4c4bb402474cf/2", "bcf065520f9708bbcecd786d6f928fd6c91f33fb9939fe966df5f69d04449b76/1", "dc375334437bb64ece3e73282c159f691c0336d2178f35cf8b036c3f0820e9d4/2"] }, { "id": 1099, "name": "Stair Game", "solves": 635, "attempts": 718, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There is a staircase consisting of n stairs, numbered 1, 2, …, n. Initially, each stair has some number of balls. There are two players who move alternately. On each move, a player chooses a stair k where k ≠ 1 and it has at least one ball. Then, the player moves any number of balls from stair k to stair k − 1. The player who moves last wins the game. Your task is to find out who wins the game when both players play optimally. Note that if there are no possible moves at all, the second player wins.", "Input": "The first input line has an integer t: the number of tests. After this, t test cases are described: The first line contains an integer n: the number of stairs. The next line has n integers p₁, p₂, …, p_(n): the initial number of balls on each stair.", "Output": "For each test, print \"first\" if the first player wins the game and \"second\" if the second player wins the game.", "Constraints": "- 1 ≤ t ≤ 2 ⋅ 10⁵\n- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 0 ≤ p_(i) ≤ 10⁹\n- the sum of all n is at most 2 ⋅ 10⁵", "Example": "Input:\n3\n3\n0 2 1\n4\n1 1 1 1\n2\n5 3\nOutput:\nfirst\nsecond\nfirst" } }, "cases": ["f0b5c7d5b08bd85c11862376542211c52c8b2dadd931eb3078105269319a9b4c/1", "b640e840b19d378660b32fb51ae18d67dccb4a8596a29e7bd72c1b2ae5928f41/2", "8b7db06d20dc86665a208a2681f18cdfd66d9924b6ad6969bced73631c96ffbd/1", "c2286199ae68f1da17dcd76fcdd8bd5beebb0efd1b30e899dba96588ec215f02/2", "46025e3271511c86e1d49c10c2830744e6f676c82ed11c6acea0c6ee5982c554/1", "b2a196b30f0917a9072142f02c27bc4344342c862a89a1dcc018d9257ccd865a/2", "1d21dea7f6e53ba02c32a5f932a4518182a462dc7f02b34295030f1e4fb7b781/1", "318693c707603e1a46fbc6392a356d2648523f0741cd55c0600f6597810ab56e/2", "b35e215163eea27de8b0fe0132083e0d384c0422d136467f351b00735a75e115/1", "ed755cca39fa20299227447025f1d76a5bce2c39b2a1321ae6fab6db573687c0/2", "34459d37470767a7c6c7f9824b798f53265bee3c49e000d1ce7da874ac4eda34/1", "c2137137eea0cb38b9a174161fd149e7d008ce48018e6f5ac5e1246dbf685829/2", "ccce065269620747ca153e9a430d44b175cdc1f7e0958741b567250a1d6b1d95/1", "480c2336b410f1ad5f8bf1b28944490255804b65350c527787e74ebdd511e3a4/2"] }, { "id": 2207, "name": "Grundy's Game", "solves": 294, "attempts": 371, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There is a heap of n coins and two players who move alternately. On each move, a player chooses a heap and divides into two nonempty heaps that have a different number of coins. The player who makes the last move wins the game. Your task is to find out who wins if both players play optimally.", "Input": "The first input line contains an integer t: the number of tests. After this, there are t lines that describe the tests. Each line has an integer n: the number of coins in the initial heap.", "Output": "For each test case, print \"first\" if the first player wins the game and \"second\" if the second player wins the game.", "Constraints": "- 1 ≤ t ≤ 10⁵\n- 1 ≤ n ≤ 10⁶", "Example": "Input:\n3\n6\n7\n8\nOutput:\nfirst\nsecond\nfirst" } }, "cases": ["0ca2ba8a4c54f28a3c83cbe425b20b5b26c34c76a31be824fd28ecaa166bdf24/1", "112e40cd554d5e6184da0c89ebb0791da4fe8642f8b6e01abbb6812c26657fe0/2", "16f11f6654afc38f8da3da2f21d8a1d53cc4281deb8894a20686e06b67d52f08/1", "2726445d281dbd9e72d16b63a021ef3c0cee48c1060d3adc7c709734a3fc2cf7/2"] }, { "id": 2208, "name": "Another Game", "solves": 274, "attempts": 305, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n heaps of coins and two players who move alternately. On each move, a player selects some of the nonempty heaps and removes one coin from each heap. The player who removes the last coin wins the game. Your task is to find out who wins if both players play optimally.", "Input": "The first input line contains an integer t: the number of tests. After this, t test cases are described: The first line contains an integer n: the number of heaps. The next line has n integers x₁, x₂, …, x_(n): the number of coins in each heap.", "Output": "For each test case, print \"first\" if the first player wins the game and \"second\" if the second player wins the game.", "Constraints": "- 1 ≤ t ≤ 2 ⋅ 10⁵\n- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ x_(i) ≤ 10⁹\n- the sum of all n is at most 2 ⋅ 10⁵", "Example": "Input:\n3\n3\n1 2 3\n2\n2 2\n4\n5 5 4 5\nOutput:\nfirst\nsecond\nfirst" } }, "cases": ["ffcdb8f6f84d53c0760ed734b5046bfb9fa436317e9c4fbe4a07b5e12655e7d0/1", "ac0969799343a5f64254c2b458ce59043c3e5d95640916dd18785ab0159fa1ca/2", "12d89c20ff9610d6adc7560b0cb409b5dc98d3cb9a7dfcf931dab3035a2fb7bc/1", "dbea9325179efe46ea2add94f7b6b745ca983fabb208dc6d34aa064623d7ee23/2"] }], "String Algorithms": [{ "id": 1731, "name": "Word Combinations", "solves": 1064, "attempts": 1671, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a string of length n and a dictionary containing k words. In how many ways can you create the string using the words?", "Input": "The first input line has a string containing n characters between a–z. The second line has an integer k: the number of words in the dictionary. Finally there are k lines describing the words. Each word is unique and consists of characters a–z.", "Output": "Print the number of ways modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n ≤ 5000\n- 1 ≤ k ≤ 10⁵\n- the total length of the words is at most 10⁶", "Example": "Input:\nababc\n4\nab\nabab\nc\ncb\nOutput:\n2\nExplanation: The possible ways are\nab+ab+c\nand\nabab+c\n." } }, "cases": ["0d154f498ae37239fd3edeff3beefa90559ea2a030242f448a7dfb99a012f91b/1", "f6f70ba1800e55a7a7a6b720330800fa7ae0ae3c04021cccaf2716afe8ef9165/2", "7574d20e5211cf957bb8aa4b1788c28974caa533360476da7ebf544aa55b97e1/1", "23e22fa26e4580a6566fa70f5bd84ddb5702906540a631d489059036e7475e04/2", "35f92869bdd3a915d98e567b8a82cdc7a77634e322024a4eb618d281a497ddfd/1", "b59af6eaa13c17afe2d80442883c3ed6798fea27300579c6c7c2d754955480e3/2", "b3694a09911b8c7f5aea007050ace35ca181e9b6796385f7b051a9f958479ef6/1", "fafea6b01f0c12099ec22e43b004a5b932b09d5958d210ca8b5ebc545e2810b3/2"] }, { "id": 1753, "name": "String Matching", "solves": 2257, "attempts": 3035, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given a string and a pattern, your task is to count the number of positions where the pattern occurs in the string.", "Input": "The first input line has a string of length n, and the second input line has a pattern of length m. Both of them consist of characters a–z.", "Output": "Print one integer: the number of occurrences.", "Constraints": "- 1 ≤ n, m ≤ 10⁶", "Example": "Input:\nsaippuakauppias\npp\nOutput:\n2" } }, "cases": ["362f7854a36218b755ea83775cc90c69fa5fbd8d8c47a7b21643feb747eca089/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "010fd8d21917cf3d8e75e8375ea1b3cf11b2abb894e2873b35b51275e6afdb1d/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "911169ddaaf146aff539f58c26c489af3b892dff0fe283c1c264c65ae5aa59a2/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "298d5d5188322afeec8a744c6d880c5c37c21464b6355e7d0a56af2fb7c78364/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "9df11b73c7afc1431a3408948642bb37fd61ad76c0345ca5bb4d8ce6122c99dd/1", "c68671f33821ac1181f7d1da3ebbb090a330db2fcb1bf8fb944439fd4358fe98/2", "5153cb35c03f1d0f77bc433616719e2af50e7b51ad66a8318ac3233f46b8825d/1", "b054a8a7e12e5784e2114d9a78ed58537ae7f9f0f3cb276e785253f647122b85/2", "c8d28805a3c8e5ae74109d457c846d39e3a2c42cc15889e0bd35d439300ce31d/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "9a999c9fb8799409ea0cbac3caa02862d09adccd5f7db0ea563c4683ae20381b/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "089e5e40333c8e32d04ad62857acc8bd2b266805f579661b2307b7c8c1f3cb28/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "3a661d463ff614ab99d92ba4dc9698c4531ffd046f768e4dc1875b2640c3f4c2/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2"] }, { "id": 1732, "name": "Finding Borders", "solves": 1530, "attempts": 1737, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "A border of a string is a prefix that is also a suffix of the string but not the whole string. For example, the borders of\nabcababcab\nare\nab\nand\nabcab\n. Your task is to find all border lengths of a given string.", "Input": "The only input line has a string of length n consisting of characters a–z.", "Output": "Print all border lengths of the string in increasing order.", "Constraints": "- 1 ≤ n ≤ 10⁶", "Example": "Input:\nabcababcab\nOutput:\n2 5" } }, "cases": ["90da64bc8402d66bebf53dcc7847ad8270bf81740d5a8faee159ef6bc8f9c71a/1", "3d6329fda493a851561cae4838b8a3c82519c2271735eb0463099d4929ced229/2", "c51ffccd4f9a50794789351a2cb93d953bb335ee402f28874b1086ad4b7b55e0/1", "b7bc0acbec6ee11be32efdb01012114e2ee435ae9e865b273382f965ff269050/2", "70976238f7701771af37dcf28bfd19a794bae1f3275817d3e3b8eaafcd78c181/1", "c5295c00ead93b36a700b78c0cae17503dba4fe423425220b23f8519b5f734cc/2", "16ca007655f18d18b068aa013447bb3bdcf21203994bca30b4fc88f38e37ffab/1", "0000000000000000000000000000000000000000000000000000000000000000/0", "f069104e8ccdca3fb22df18cf6453873d78c3cb6a13e7722559234ca9c2985e2/1", "26b967e0b517fd5a35c498f6c098e4149cd3e713094c56a7400d104e23bcca48/2", "e5955d1fcbe7b291bbed6a6c23628f3935659c63f3328bae0d8f52c8aea4cf51/1", "7702c8d765eb8e1549cbc0e2231a0d2e74d2c47dfd39cffff1f8d95915aa03b3/2", "30299e42d88c4506c5d56b0ea6f0475e4f765b9d72bec1f1c6faa94ac99f1b9a/1", "d57e15abfbe16ec5c28d2bcd8d0761b3b69949495d3d9cd2b054fa6a63059ea6/2", "6092bc831d8e794fcb430b0cc424225a423d73ecf4e0f696b2118aa71dc9ebaf/1", "faea96bb4465512894b11eca2c71c9debb085483a2ab6b899d49181e6b13acfd/2", "92257fb96add6599efd000633837e1a90b700dfab3a129386a7874cf940dd156/1", "a66d5bff904a292dabc1357c807dd5b5600e94d1e5ba4f88fd386b6036ea38db/2", "667059e011e832e9b1f09cc65c9dec9b97caa7687badc3d77626f1a947ac184a/1", "c5295c00ead93b36a700b78c0cae17503dba4fe423425220b23f8519b5f734cc/2", "9f2c5358641ebdf9cd1d433ca5f067c96240517a9ecfc86dc46a09940d60fa0f/1", "937cb01268556d7d3101629bf602c9cbb70a8cdbbcd48f1f707e0e8eca40c33f/2"] }, { "id": 1733, "name": "Finding Periods", "solves": 1012, "attempts": 1151, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "A period of a string is a prefix that can be used to generate the whole string by repeating the prefix. The last repetition may be partial. For example, the periods of\nabcabca\nare\nabc\n,\nabcabc\nand\nabcabca\n. Your task is to find all period lengths of a string.", "Input": "The only input line has a string of length n consisting of characters a–z.", "Output": "Print all period lengths in increasing order.", "Constraints": "- 1 ≤ n ≤ 10⁶", "Example": "Input:\nabcabca\nOutput:\n3 6 7" } }, "cases": ["90da64bc8402d66bebf53dcc7847ad8270bf81740d5a8faee159ef6bc8f9c71a/1", "357a1aa8a3008e3f9b37f0be0a62af4c3eed5e0e182b6e67a842741fb40b99f0/2", "c51ffccd4f9a50794789351a2cb93d953bb335ee402f28874b1086ad4b7b55e0/1", "bc3d197cf2bf6a87df051d35976623d868dd98e0db7014775ead0e602d04a05b/2", "d2eba26bacea6d79fab2827dc2c5e6f35e32cf0ee47158c57435bc269198a9de/1", "902990c03e34cbeddf8a73a0c2f7f85c8782c9a55062afa8067f8a59a60eb6de/2", "58280e0c33d4e39828c601cfebfda5b25ed05530ea09f9e07ecf5879f92a1f5a/1", "170fb78405907811f3eeaf101434ccf4acdff7ed7fa581c04b3510718ceabcb1/2", "e1ffc579bc6737a5d4f16692148ebcfc0fffb8ff9a13763504e01cb43aa33582/1", "25a2688f8b345f9f92a217b251b298ee18f491b5833cdb111618f56cda092e9d/2", "e5955d1fcbe7b291bbed6a6c23628f3935659c63f3328bae0d8f52c8aea4cf51/1", "0996143b0f6d6816e981161838d7e0ce2cfc2d357d1bfcac09aa3411efbec2ea/2", "30299e42d88c4506c5d56b0ea6f0475e4f765b9d72bec1f1c6faa94ac99f1b9a/1", "86af50adc9bae0360aa8b16e49b41e2e1081019c5bf4bdc0f1c0dd4a49569a39/2", "c3de7f1ce2a37a739e618fce3f1b3d551ca03fb5edeef058f0afda8193186ff6/1", "55360819790eb1f81bc47cc6cc6cc40278635d9084e7ced38ba780c825acef4a/2", "c0b4f0851861723670da540436378e0678b0f41427f7670b9404fd7f1fe3fd16/1", "9721a5a442be694183581830f3821e54e90b0fde644cafd905f588cfda6c03e7/2", "6092bc831d8e794fcb430b0cc424225a423d73ecf4e0f696b2118aa71dc9ebaf/1", "65175b28ab2dc4c3f1ab737ec9280d1a47334b97624f593ca47ee41e9a1a7489/2", "8f6652523c83c92a729f6dbc44bcb4bfd0248e4b2f29dfbea62e30acce332f52/1", "b7ec941326974b4df5bbacec5731a06782f5a436c140ce9df8817096c607cb96/2"] }, { "id": 1110, "name": "Minimal Rotation", "solves": 699, "attempts": 1047, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "A rotation of a string can be generated by moving characters one after another from beginning to end. For example, the rotations of\nacab\nare\nacab\n,\ncaba\n,\nabac\n, and\nbaca\n. Your task is to determine the lexicographically minimal rotation of a string.", "Input": "The only input line contains a string of length n. Each character is one of a–z.", "Output": "Print the lexicographically minimal rotation.", "Constraints": "- 1 ≤ n ≤ 10⁶", "Example": "Input:\nacab\nOutput:\nabac" } }, "cases": ["90da64bc8402d66bebf53dcc7847ad8270bf81740d5a8faee159ef6bc8f9c71a/1", "90da64bc8402d66bebf53dcc7847ad8270bf81740d5a8faee159ef6bc8f9c71a/2", "c51ffccd4f9a50794789351a2cb93d953bb335ee402f28874b1086ad4b7b55e0/1", "c51ffccd4f9a50794789351a2cb93d953bb335ee402f28874b1086ad4b7b55e0/2", "e5955d1fcbe7b291bbed6a6c23628f3935659c63f3328bae0d8f52c8aea4cf51/1", "e5955d1fcbe7b291bbed6a6c23628f3935659c63f3328bae0d8f52c8aea4cf51/2", "30299e42d88c4506c5d56b0ea6f0475e4f765b9d72bec1f1c6faa94ac99f1b9a/1", "30299e42d88c4506c5d56b0ea6f0475e4f765b9d72bec1f1c6faa94ac99f1b9a/2", "7986aba29bd50ebc2ff649eb4930e4e734dc97c5411ec63bd216ade0a378b05c/1", "7bd66284b2e63efd70b1892dd8e58e024c9d9f31a5c845304e1530a8e2a40f01/2", "9f2c5358641ebdf9cd1d433ca5f067c96240517a9ecfc86dc46a09940d60fa0f/1", "317d9e65f00429d473fb04d75f1abfc4f3b2f1fd4a1cfcf690d81cb97e8e4af3/2", "66a5040137b96dec8a8f78ee55fe7a75b2747be04e8fb02470490178f26229c5/1", "35d71b0d526cff953693d28ff39b260260815b4213d9871e8ee65ba7a6e64e91/2", "8994f5fa7d3f63a35be4172e170e9308d5685eb17e85c4750cfe6513473ac1c9/1", "b0302cc53020630005c893a155fa0803100ae8a5461ca981679d8493423d7f13/2", "ee6781913ad2840f92c739af9255e06e0718ac4c0f9b12d7f03bcf6cef21e1b6/1", "ee6781913ad2840f92c739af9255e06e0718ac4c0f9b12d7f03bcf6cef21e1b6/2", "2e3ce441c191af64adfb1413696e98e435ac1dc80541007f279e5071b52c25db/1", "d8d65ef3acb39beddb3e80722c3b5f6f5aa28b94d9f207cc76943531c80050ce/2", "2eb2d9f8c3e77b357cc1270fe3b6209fc69339274b0a104ddd794bfda6c6bd06/1", "dac869fc1f4d4361fc4339e3b8cb5fd1b44ac79352f4027dea2593b1ae0d0ca0/2"] }, { "id": 1111, "name": "Longest Palindrome", "solves": 883, "attempts": 1226, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given a string, your task is to determine the longest palindromic substring of the string. For example, the longest palindrome in\naybabtu\nis\nbab\n.", "Input": "The only input line contains a string of length n. Each character is one of a–z.", "Output": "Print the longest palindrome in the string. If there are several solutions, you may print any of them.", "Constraints": "- 1 ≤ n ≤ 10⁶", "Example": "Input:\naybabtu\nOutput:\nbab" } }, "cases": ["90da64bc8402d66bebf53dcc7847ad8270bf81740d5a8faee159ef6bc8f9c71a/1", "90da64bc8402d66bebf53dcc7847ad8270bf81740d5a8faee159ef6bc8f9c71a/2", "c51ffccd4f9a50794789351a2cb93d953bb335ee402f28874b1086ad4b7b55e0/1", "0312fa0feaccf98684559ca2c38ac6e8a5b9be56f395e0fbf69d10a9391ce8d5/2", "e5955d1fcbe7b291bbed6a6c23628f3935659c63f3328bae0d8f52c8aea4cf51/1", "e5955d1fcbe7b291bbed6a6c23628f3935659c63f3328bae0d8f52c8aea4cf51/2", "30299e42d88c4506c5d56b0ea6f0475e4f765b9d72bec1f1c6faa94ac99f1b9a/1", "fd70bdde27ad02f7222f81523b1d5d0a29691c9658bb642fc0ce16e59d39b1d0/2", "9004193b15d9f6a4c344dd6ffc44cebcb3156383761da036eaaa80db25c0a431/1", "9004193b15d9f6a4c344dd6ffc44cebcb3156383761da036eaaa80db25c0a431/2", "d32f2f7050a21dc4c839817d3a35954f6dfdc52d3ec006e8a8a61c73d5b2c64f/1", "d32f2f7050a21dc4c839817d3a35954f6dfdc52d3ec006e8a8a61c73d5b2c64f/2", "e5204f876824f74e2593b2c3e75f0fc6a1b8e748af31bb0af42a427cd74b90f6/1", "ea9102f087b88635b83cfde1a3cb40e0dbb8a9f28a755ce32d62628da65d7f6e/2", "f27d241d96a8e41116776d1417beb75ece31479fe5e8d700db0db1be395e873c/1", "154efbc487b8ac0a63bc65d0692cc277a586f84844207ddef6f146e08fbda106/2", "51ecdbe7205510dd651160d9f532e68147cd5e097dbd757c0602219e1efbddfc/1", "e3174d2a99152953190bd0adc86589ace1cccfb0da678938a0d92c8ce4b3533b/2", "50d3b6f740690fac1499b212263cb3d90b0dd56013edd18cb8bf39ae1d089d67/1", "a8f48dda3b5863c43da38e646d8a6c69e40712d7917cd89ba7cb5e63f9db8b2d/2", "0add07824ab4514b25e671f3f3c2befd0bf624ee780dbc635d47c8b53a7d5aee/1", "9c6cfd308ccfc62b3e30ccedb552ce0c3e2f18acebe36581bc012074c43e2a78/2", "858f7f61f4609ec38b89176bc166ba725106dc7808a9dd0580892e37444c0c12/1", "55734663e32be7c56c59b32369281e591adafb51e6b79936498ab4a95114b71d/2", "a6859cf022dc1897d46e9506b644ac651cc92d137cb12522638a83b347c3ad92/1", "fe1fcd34656724bb71652d81f2ddcf356f16df63f09ad310eecfa94c4b0f4b3f/2", "4066dcb0c3f11a97154a17578dcecbe2ed16c1eb373f26a9d498a795166971e3/1", "dc5e6f7cab235dd4b0f3882320de1d3c090a2ab202fc2514b86346a4681b0000/2"] }, { "id": 1112, "name": "Required Substring", "solves": 410, "attempts": 687, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to calculate the number of strings of length n having a given pattern of length m as their substring. All strings consist of characters A–Z.", "Input": "The first input line has an integer n: the length of the final string. The second line has a pattern of length m.", "Output": "Print the number of strings modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n ≤ 1000\n- 1 ≤ m ≤ 100", "Example": "Input:\n6\nABCDB\nOutput:\n52\nExplanation: The final string will be of the form ABCDBx or xABCDB where x is any character between A–Z." } }, "cases": ["30287971b19065b5b2654c357f507ad2dfac5e32e50541d24b602d479583ac36/1", "5e4378dca2d5034533cb304da0891e97f356aea37c96ca25ef0a18c8acb5f038/2", "106b214b9eedde67d77d18e5625424916a7f36ce808e97b38e54be38ff9d54e1/1", "b1e12d81b43c25a9dcb55a4a3e269298b494aa9da3d2de99769afda599983c8a/2", "332d714f78e4423c2b0325bb6828dcf74cd1044c9b104d8bfb6fa139082813c8/1", "cd6b56542f324c6621a9f6d7c78e832bb90b955fc73f8472cedf13b5d27d8674/2", "5c5a271adfce61e53a7d78eb3f96f72de9217911c2775f0a09c8e2861453a627/1", "400aadddc09e08c3bf83f8bd05abe19eefc7dc1205a04582659cb63f931fe128/2", "ec2b75b5840d0d20eb7b1598d305b5368066b486fc29412b72a4159c74f877df/1", "96740f2ab86549e85dd846d40a2109b3651ad80419a9ff4d045a0af1847d58c9/2", "31726d3076b8a10fc590750235123369065fdf0cf4e9f303270c16c6642eeffa/1", "50e7918beb9cd745e59aa5b32100d41f247b64e7359182ef0b5f5fea535871d9/2", "8103b4310ce556f2e28cadbfe7d70f08449536ea7f446c1e98c48276fd111eb6/1", "c76c4b4e59ea1fd1e6215e4189f8844f11ca21956f0756eaad768125ba04ce0f/2", "133595f204d75a7b0fcead61394ebdb3f6509b6dca104dcc312114272cedf171/1", "4fe504329c59a1529eabfb1cf431f3176a82436c0886239f4f5feab6773a3cd1/2", "221c7c2a7ee6217d6b4704df2059778ce3c2208a322124360323f23ae56ff71b/1", "de1053f4a8189d565d6961dc916672e16ebb95ef4b6767032b6873790bdf647c/2", "00309b807e9f3f9efe7aa5b612b2b02d3563b0ef86de4f015436f60122e86e09/1", "99b6f54fbc7e73733deda767df332a1f33da35ca0c1c4fb787d417a69804c314/2", "d77d2c54aeefead03629039091f23c5858ccd0d3b1712ecd3c63c4f1cf780c61/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "49cc8093943f5fefc5a65a68b2cb628a103937307eb2530a7281e7dbd6c55f10/1", "571a9b37206e6ba1e77d7bec9703319a015c0e29da306cbb967c16c4a8860d1f/2", "ec47b3cd9a5719f5bd947ddd71224b5229d4f5b85ed57c4ebe1d9c25030722bc/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "f262bf718702f7cf53b9508eab8a26db50159f43c5e8659401d85ae763ebe422/1", "b08509fc066d32ac86e3eaec0e9ae5bdcbcef5b5fcc485534c5a52fd6a944989/2", "1f6d6889020564c216353daf1dbdae802fbfa57a2f48a0c1c340b0f389d08fb5/1", "7c62cf412919ae6abc2a3236aebac9c410727db7ee119b290aa1ab318f5f36c2/2", "b9d9ffb76ef91c7078c038ad8b3987ac9ebfdbb854289c06ba942b924d67a028/1", "291c71e0732594d140158f1b83152cbe1f6f89f9046f674b1f394600e2f0bf93/2", "4d52b121bd5adf8dc71d6c71b5876af91e3d59aa30bd4e076ab6020f5106ee01/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "4f75378ff4bf84565d1bd9bf563289058e0bbcfeebab4f43fc261f04753a28a1/1", "ebc9dd91f433f03b484fcea18d45d891aaacb3aadc8c4fff53b0ef13818edd99/2"] }, { "id": 2420, "name": "Palindrome Queries", "solves": 282, "attempts": 351, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a string that consists of n characters between a–z. The positions of the string are indexed 1, 2, …, n. Your task is to process m operations of the following types:\n\n1. Change the character at position k to x\n2. Check if the substring from position a to position b is a palindrome", "Input": "The first input line has two integers n and m: the length of the string and the number of operations. The next line has a string that consists of n characters. Finally, there are m lines that describe the operations. Each line is of the form \"1 k x\" or \"2 a b\".", "Output": "For each operation 2, print YES if the substring is a palindrome and NO otherwise.", "Constraints": "- 1 ≤ n, m ≤ 2 ⋅ 10⁵\n- 1 ≤ k ≤ n\n- 1 ≤ a ≤ b ≤ n", "Example": "Input:\n7 5\naybabtu\n2 3 5\n1 3 x\n2 3 5\n1 5 x\n2 3 5\nOutput:\nYES\nNO\nYES" } }, "cases": ["3bf97b6a1d5670a525759554975640ba8b74fcd90d7d052cf6bf47ea0549aa74/1", "5ac9ed20f51493ed1b2b142aef96e3e6b6a36db49ccc45aa966e4984fbca5002/2", "81bfaf27aada2dbe072c38c5b7ef971a53c1edb35e62d16a087c77bf86986fff/1", "0d2aabc97cb682d7ffff18b1fd3711c80044ec5a59d18c9939b760df8b1002d3/2", "0b6d7a6b28e53a880f7fba5e7440b272475b2ed7806c2fce40c5296bd75ea1fc/1", "9de31217ab24f13b916e857bf32701a2a502f5742ef4e0caa60fd966e606d194/2", "ab355dc55e14873b59db4e6b8f864947bdcd30d70042ce120195976aa69c6922/1", "13bde05cf68d75a919775423034e1d0df44f82fee17117460bdd6774dd074bd0/2", "41d1f3fc9eb43e5b55470c74dcf70e76f32ba22174253e3109e84ead280f568e/1", "9c5cbe39b6e751f2ccd940ba957a1edff682b1f5e013f5b2124d611274764931/2", "549672ca988bc4608b1a2eacf8559ad03b61aa9b7eb9de170ef4094a1735a9ae/1", "032748b97d0d5436f9366153936db848abe1b1934b56bd8b432a8f6056375be9/2", "9f3142a28ce42fa36385a3082ad45cf3632a07adcb00ebe775de1a3789948004/1", "ccfed1c423da1a7b203c73fd0fcc08d6c58448a992e90ee9a6785a989006fed8/2", "db986fcda11dacb74cfb02b03eeaa45e85412ab8358e40f95b28db36ed3c27d5/1", "f5f2e0b354970776283c8334b513fca90b66dca1e8977e109ba85210a1ebc690/2", "7ec7051deb146c1d5277ed022d8669bcc7eb11c9cab22614f4cb075a4689be47/1", "10e2b4bf1a045f802a805ed1586bcbf7a4fd5167a9accad07eecf244658af865/2", "cb1ee44b5b6c1fbc8386754de8b5adb66b9b0b7567ceff18be631f941f301605/1", "4d828b5afb308b7f037bdbf7daa6334a202ff794466a6f90f60d8f08015fbe24/2", "b188f14e9ae6b974411b97cf293040ec1504c4619cc537db5dbe537237e188d6/1", "032748b97d0d5436f9366153936db848abe1b1934b56bd8b432a8f6056375be9/2", "619b77224fc780d9b74bf015dd2589ecd48a2e8422adee5082417900ead6d909/1", "0c46b29524380d015a3207b322df75f0a0665d6d01aab7e4d18fbe58b46d08f8/2", "a9029101588039eca2474c5b2d94b75f0107b0446d650d24e41e03e6be34ced2/1", "dab3f34817d12e3f609f3ce9a11c60679f5cc886d54b3559e5083ca97f899bc0/2"] }, { "id": 2102, "name": "Finding Patterns", "solves": 306, "attempts": 425, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given a string and patterns, check for each pattern if it appears in the string.", "Input": "The first input line has a string of length n. The next input line has an integer k: the number of patterns. Finally, there are k lines that describe the patterns. The string and the patterns consist of characters a–z.", "Output": "For each pattern, print \"YES\" if it appears in the string and \"NO\" otherwise.", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 1 ≤ k ≤ 5 ⋅ 10⁵\n- the total length of the patterns is at most 5 ⋅ 10⁵", "Example": "Input:\naybabtu\n3\nbab\nabc\nayba\nOutput:\nYES\nNO\nYES" } }, "cases": ["4ef1cf234d423c4ee400fb3a483538147c02cecd1876dc8f6305e7a904f7fa33/1", "89a99e1c75ca7e4ebedcfa15b1eb7fc73d0970a460c0a440ca003a9dc96a41fb/2", "70a886a13491a78c15f61e14ef613b52cab76b1925681a0657e5f0a837c5e3e6/1", "1c85afc7bac5f9ca532cfd06f934188272aa2c8258d50edf92c3516126d2c68b/2", "1e0fb6032c2923255df88d3d9642349357c2979e1a4a1996c6af9eeca9af5ff0/1", "328ad7733110819fe5a0873b9961ae18ffab2d4e84a815217c79582bc0d678ed/2", "d00273adacb1aba536ad4db9ab61cb1ce278cae6e61fd351c61c42309122a8d1/1", "f753b4048efe01203c1673614ef2671a89e47c85feb0561f28ed652d123c768c/2", "1690016f48f4c15067dd72368a29018a8519845d03267edadadacc2444de88a6/1", "643c2f42747e197c5a0272a01b2c82e05e28bba21304482e607f872906c2a098/2", "add2e1198aeff83f705acc12e4d880f10f6365358576c3240ad6e38d2f8cad39/1", "cbad535e00358188b2b3729630aafcec9a90b0b7198ed3f81567bf14b65a37dd/2", "4197e8b26dbebf6b8aaad2cae1288fb1896d99f94bb4d495ae246ff1f245028d/1", "f2937434705c4e761c67e5ece889afe5e1622a2e6c652931710137eb403f16df/2", "cdb169ff95e19eb2b39a2d5bb50677c4607fcde360f41d30939cee2e9328ff9d/1", "e29f7dfe16dab09e9930fa69c1c93a88b049ce519bc15d5595a9566feacf5da4/2", "7e71e42f92de2376ad85936fcbf75c8f1c21b123dd9c68ef03c9b84d792fa0a8/1", "2674846e5e3131c7cef4cbfd6f0ee1417fb4f934b186ad50970f756aadd0fc34/2", "3bd479f8ad3f05dd49e8b35051c3eec31cd4c22ce4245b7ac2a8f48767d9dc78/1", "d349e2025ce87f818f1da22e29108f54f5b11b31ffdbf0dce03fccd04ab4a625/2", "6883cb6736d4ef9892b77aae861c40ff60ff3a8c8503046f743fb904fe48ae8a/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2"] }, { "id": 2103, "name": "Counting Patterns", "solves": 290, "attempts": 349, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given a string and patterns, count for each pattern the number of positions where it appears in the string.", "Input": "The first input line has a string of length n. The next input line has an integer k: the number of patterns. Finally, there are k lines that describe the patterns. The string and the patterns consist of characters a–z.", "Output": "For each pattern, print the number of positions.", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 1 ≤ k ≤ 5 ⋅ 10⁵\n- the total length of the patterns is at most 5 ⋅ 10⁵", "Example": "Input:\naybabtu\n3\nbab\nabc\na\nOutput:\n1\n0\n2" } }, "cases": ["3bd479f8ad3f05dd49e8b35051c3eec31cd4c22ce4245b7ac2a8f48767d9dc78/1", "f46b94fbc42e36b265d1d7d3299f9838e35bced5038022e2b9897a6e329c8804/2", "7d9dc8f5b380febede5bc4bc346274012f35aa069dacd9a4b390e987cbe0e12a/1", "fe414e831a059eb3c0b72a04d17b61c20bbe9f12a631c4958742ef98e56c8870/2", "d00273adacb1aba536ad4db9ab61cb1ce278cae6e61fd351c61c42309122a8d1/1", "53bf04c02402b47e66c7c07fd218d44e5b49e82290f0bb9a64f351780bfa033b/2", "e3174fd915ba0c25384fcd99114af8f073a24e5a616e630bb02b3059a346889b/1", "95804ca84930a9c09a2c87389697a0c66d1765dea9bdbf65bb45a9583dc031dc/2", "dea9c8b4d96861c5aba21b50a7fd5132558048e3729cb20e6bda0ed182a24be4/1", "c3847afefcef7e912b307f0765538e066c9575356472e8c45f17f7b270099a24/2", "add2e1198aeff83f705acc12e4d880f10f6365358576c3240ad6e38d2f8cad39/1", "e206d8c18d3ef42ced6cfff376ebfe89d6685de95f890c0b25367767ce9c369b/2", "cdb169ff95e19eb2b39a2d5bb50677c4607fcde360f41d30939cee2e9328ff9d/1", "a714acf0208a1a2e55902965ae577dcc30aa50e1fb1ba16a525e7f5cca653428/2"] }, { "id": 2104, "name": "Pattern Positions", "solves": 255, "attempts": 299, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given a string and patterns, find for each pattern the first position (1-indexed) where it appears in the string.", "Input": "The first input line has a string of length n. The next input line has an integer k: the number of patterns. Finally, there are k lines that describe the patterns. The string and the patterns consist of characters a–z.", "Output": "Print the first position for each pattern (or  − 1 if it does not appear at all).", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 1 ≤ k ≤ 5 ⋅ 10⁵\n- the total length of the patterns is at most 5 ⋅ 10⁵", "Example": "Input:\naybabtu\n3\nbab\nabc\na\nOutput:\n3\n-1\n1" } }, "cases": ["3bd479f8ad3f05dd49e8b35051c3eec31cd4c22ce4245b7ac2a8f48767d9dc78/1", "678e143b2460814423ade8980721fedc3e2e2b213677ec750a08cdf318b5a677/2", "7d9dc8f5b380febede5bc4bc346274012f35aa069dacd9a4b390e987cbe0e12a/1", "f13d63db2cc11512e8bb506b5b8c3a4335f6e0929f726d0f260bfc948dc46171/2", "d00273adacb1aba536ad4db9ab61cb1ce278cae6e61fd351c61c42309122a8d1/1", "560d34551f6c26f12cbfc516a780404ef9d470e63700013dd4ee3bd3f1daad08/2", "e3174fd915ba0c25384fcd99114af8f073a24e5a616e630bb02b3059a346889b/1", "629c48e0eab50ae84f50e778cdbe0c12e056157c3c01ace0875169eca7b9692a/2", "dea9c8b4d96861c5aba21b50a7fd5132558048e3729cb20e6bda0ed182a24be4/1", "fe0942b6c8225a695fa3febbfdb1b977af393f6a14654fbbf3d390bc4be7823e/2", "add2e1198aeff83f705acc12e4d880f10f6365358576c3240ad6e38d2f8cad39/1", "02a3d7960eee59548e9006c239df6327640b7d69a2b195cc2e101a4bfa4824e2/2", "cdb169ff95e19eb2b39a2d5bb50677c4607fcde360f41d30939cee2e9328ff9d/1", "30caecc12b0c1f7751980faf836c26f5a3cedaa6b27bc292ecf785b8d41054fb/2"] }, { "id": 2105, "name": "Distinct Substrings", "solves": 270, "attempts": 323, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Count the number of distinct substrings that appear in a string.", "Input": "The only input line has a string of length n that consists of characters a–z.", "Output": "Print one integer: the number of substrings.", "Constraints": "- 1 ≤ n ≤ 10⁵", "Example": "Input:\nabaa\nOutput:\n8\nExplanation: the substrings are\na\n,\nb\n,\naa\n,\nab\n,\nba\n,\naba\n,\nbaa\nand\nabaa\n." } }, "cases": ["167b3452f049e320b02a367cf5a8a6fb990d3f318d7375e05631a8ca8153b696/1", "b80500a01f984c764f1a3b486622d0ef7cc5b13fa9bd57ec9015113eaf875597/2", "0692b8fdfd79b33bde0fd66b34d3c4ae62f854bdcf049a946241179b1ad11d72/1", "00d9cd208c4bb685541067ed529222ed418e5cc75d71304d8ef159f3ea3aa50e/2", "ddc783d724c766afdf304136d167531c472f023425abdf2fa7019fa147d8695e/1", "df4a5f1f8f6604078c2322444bba21da8595a66a60b5a91bb38cfbcf933852af/2", "79624013d6482ded5e72a6d2085a0e5b85499e966184c6f4f25f58289d07ea42/1", "bb208664e9e622af5a7817f345f3a2432667b714f39bfb56a5bb827a6172b620/2", "7bbe7a07a912388519bfb1a6c8c65bc817c7e38eecc6fba290148f9c85359960/1", "413c8a1d72b2d08bffb70b577fdd2e87761d257e0577cf7ea16c9f87d8ac8733/2", "72d4572d21af87d07c88dd7850479d095cc969a342f616eb7e48fea607deb2c0/1", "1fd04b6b1723113d3f14839c7bc60ee8e904d7717c9dd6fba1191385bc09c432/2"] }, { "id": 2106, "name": "Repeating Substring", "solves": 254, "attempts": 274, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "A repeating substring is a substring that occurs in two (or more) locations in the string. Your task is to find the longest repeating substring in a given string.", "Input": "The only input line has a string of length n that consists of characters a–z.", "Output": "Print the longest repeating substring. If there are several possibilities, you can print any of them. If there is no repeating substring, print  − 1.", "Constraints": "- 1 ≤ n ≤ 10⁵", "Example": "Input:\ncabababc\nOutput:\nabab" } }, "cases": ["167b3452f049e320b02a367cf5a8a6fb990d3f318d7375e05631a8ca8153b696/1", "0040965455abfcb6fa887e111b3e85822bd2eb762426fa42def25e255b2937b7/2", "0692b8fdfd79b33bde0fd66b34d3c4ae62f854bdcf049a946241179b1ad11d72/1", "9a83880551abce4328af1f5b938d16b84e3c174ac04681cf2dcad8f17c97e3a5/2", "ebe304cad6a6f78b23da606e3203e48124b2ec5c8afcfdb295e0678c5befd52e/1", "589b976c98846c7b7071fe8034c414153a5280d7336cc02eaadbc19d4689508d/2", "e4f1697ee6ae5aec8bc6f2b664673a5cfa91ef88d4dfff9ec6187c21cf42ff30/1", "63feea17573c7490f1e5d3bf9255b4ea336a02d905441cc46c4de774473066cd/2", "011b7e62b519d67350e93d4a91c8818cbfceecf0d83f29cafbd20f3c93d984e0/1", "4be52c02b58c2badffc51c3b6e35cd2723e9c5f705a2050a87b4b819182bb8fb/2", "edeaaff3f1774ad2888673770c6d64097e391bc362d7d6fb34982ddf0efd18cb/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "72d4572d21af87d07c88dd7850479d095cc969a342f616eb7e48fea607deb2c0/1", "5a2f16559fad34847f92d0d8d05f14a18ae786b7721aa627e740b10d3f2afadc/2"] }, { "id": 2107, "name": "String Functions", "solves": 260, "attempts": 271, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "We consider a string of n characters, indexed 1, 2, …, n. Your task is to calculate all values of the following functions:\n\n- z(i) denotes the maximum length of a substring that begins at position i and is a prefix of the string. In addition, z(1) = 0.\n- π(i) denotes the maximum length of a substring that ends at position i, is a prefix of the string, and whose length is at most i − 1.\n\nNote that the function z is used in the Z-algorithm, and the function π is used in the KMP algorithm.", "Input": "The only input line has a string of length n. Each character is between a–z.", "Output": "Print two lines: first the values of the z function, and then the values of the π function.", "Constraints": "- 1 ≤ n ≤ 10⁶", "Example": "Input:\nabaabca\nOutput:\n0 0 1 2 0 0 1\n0 0 1 1 2 0 1" } }, "cases": ["e5955d1fcbe7b291bbed6a6c23628f3935659c63f3328bae0d8f52c8aea4cf51/1", "488200b7cf0ad743431d286ed2a3728f3f43e0dfeb64f333baf758cfc747a79c/2", "30299e42d88c4506c5d56b0ea6f0475e4f765b9d72bec1f1c6faa94ac99f1b9a/1", "fb2b12879ada3ef9590094659dc374a7d028396c2db167f88b1fd03367b0effe/2", "1b947b11d08f73463c876835b88e0fd98a9b48d8ed9f2f9d1a389740a4847fa1/1", "9767abdd07fb31ab7bb650a636014ee15ef160440a3341b4c82b416ae1c16086/2", "58e1fd6b760d2e215147646b7ef0fe43453a2ef32e6b3814a4201af7baa0e23a/1", "243adc0cc454519e7146c5cf4a910a444de74613df3fa7ff5b740e27ce281685/2", "6c81776e67388446ab69c1d0fa97183c0f992684dd2906c0090dca3cea8062fd/1", "c01902e4a872a3fbf6a8ab4c5a75acd82dda82b39c364bfae968bf4d8e4a2bfe/2"] }, { "id": 2108, "name": "Substring Order I", "solves": 203, "attempts": 217, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a string of length n. If all of its distinct substrings are ordered lexicographically, what is the kth smallest of them?", "Input": "The first input line has a string of length n that consists of characters a–z. The second input line has an integer k.", "Output": "Print the kth smallest distinct substring in lexicographical order.", "Constraints": "- 1 ≤ n ≤ 10⁵\n- $1 \\le k \\le \\frac{n(n+1)}{2}$\n- It is guaranteed that k does not exceed the number of distinct substrings.", "Example": "Input:\nbabaacbaab\n10\nOutput:\naba\nExplanation: The 10 smallest distinct substrings in order are a, aa, aab, aac, aacb, aacba, aacbaa, aacbaab, ab, and aba." } }, "cases": ["9a14bd59c868d9aec0862c8242253347d11cd16c06ecbf576c7d7efc36b42def/1", "95b3583a5933cdb03a5f1157713d1e138580535c5116ac2cbc2d5124e0a917a1/2", "913c838b1e537a3a1b7136200c6e0f072960181a7593bcbe607b668ab63c452d/1", "81b0c249ed68c57b18ad1791a2e17e5722c5b400db4fd68de1693a3ade6af428/2", "c45a507d4ee59fbf07fc574de2f2c608d09e08bb22c2a333203f0906af9035ff/1", "fa861b2e496747a1196b065a3c786221c54612b8477ed8e94924677ddc03021b/2", "c61215fd321bf6c9324e11d026fe25d9d93f4bd7230a48b00d75506789191e05/1", "367f5c991f1d74fad742d346b22d1dd879e5240bdab5d3fac42567d4fcebbb03/2", "e736a511fe627b4e7a633b9b63f14891547a75eae04ea6a90eff3453197a5d85/1", "1d8ecdb9c2da3c9d7e321f8774fa8817e536f8c3729d1394c8fe267dedb96099/2", "31eaaa0cd2d724f39bcc886b8d7ba5f08cd9944982ae9546e60aa8a9628915d1/1", "5ccdda0da51f29ea4dfea1ca02eb6b6c89b75cc7de0004b8c032b8c24e9daa09/2", "f5a6d5af9b0dc891891ae29824a6479f2673ff0fc07570441da1cbf8e79bc30c/1", "4b6b8d0c6f85cc772ec9db91b41f2044e8e7b07f69eb2a1e028773f8c6dd7c44/2", "738fa790d9dcc333e36ddcf60cad33a0c7376aee7e220f554b4cf68fe5a8183d/1", "d29eb9e0eb7514ed1a46fccd369b13eebf4a66cfdb56eb69a6ad30d213f181b5/2", "ac4afd2bf1d16dd57b310740c32cbc3b95998bca395dfef32923001cda6ae740/1", "e1267db9ab01fb2e9e93cfbbec908b030b84ca508a7d178e144da14fd19696e9/2"] }, { "id": 2109, "name": "Substring Order II", "solves": 149, "attempts": 175, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a string of length n. If all of its substrings (not necessarily distinct) are ordered lexicographically, what is the kth smallest of them?", "Input": "The first input line has a string of length n that consists of characters a–z. The second input line has an integer k.", "Output": "Print the kth smallest substring in lexicographical order.", "Constraints": "- 1 ≤ n ≤ 10⁵\n- $1 \\le k \\le \\frac{n(n+1)}{2}$", "Example": "Input:\nbaabaa\n10\nOutput:\nab\nExplanation: The 10 smallest substrings in order are a, a, a, a, aa, aa, aab, aaba, aabaa, and ab." } }, "cases": ["4861335f13800723174f201e11919b6e272fff6aaeb01114cb5557f1ba03e870/1", "38760eabb666e8e61ee628a17c4090cc50728e095ff24218119d51bd22475363/2", "75cb73b9605e5ddf98e8d608a3bd54c5907b8283b6c2cfe4ad4e2e72c5a1a755/1", "958bfd95f60d2a7af7bfb3fced69c24787d1627f46e3568515ffd2a0941ee70a/2", "31d6a3a32782bf847db47d35766f041991c93f10d43d4176556aa00322e27a61/1", "bc19b9d355411a4e3d3426f5d39bfc9a856ca5f042bc3a468572080086ad1384/2", "30e8a583e18d350f39e5d418f57e770fb8aeaed2e62234f6313630586b0d8193/1", "d95c99503472566b090116c72cc60ccd4ff57e97fe01bccf63e1c1e719f782d9/2", "1196f25b75a3ebc8e13f9451acd641fbc3bcc15b5676d608f364fc50d4882fd7/1", "6c13bbea7cfa1c0b0dcf198b905e096b5a9d4a4fe5449ff28c1f7e95e43dcb6a/2", "8966a9c799c4dc96e6d01b4a42b723bcb6430a3a33af56a524ac8abd5742f05e/1", "1053d884ee5b7b7d76b13f187c6a7938a50dd1a9f817dfbe48d448c3e8b37766/2", "704dc2c1d7165fab2cf2ae38ba1c12e3ada67aba502f7d1652ff179b3b362579/1", "eca363ad6515dbd23716fc81a415e174788ec2297baa083a58f3893fe17528a8/2", "ac4afd2bf1d16dd57b310740c32cbc3b95998bca395dfef32923001cda6ae740/1", "9d0793397991b57a99a07c6e6b4a92bab68dbf605345cd0b87f385a448a726bc/2"] }, { "id": 2110, "name": "Substring Distribution", "solves": 195, "attempts": 212, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a string of length n. For every integer between 1…n you need to print the number of distinct substrings of that length.", "Input": "The only input line has a string of length n that consists of characters a–z.", "Output": "For each integer between 1…n print the number of distinct substrings of that length.", "Constraints": "- 1 ≤ n ≤ 10⁵", "Example": "Input:\nabab\nOutput:\n2 2 2 1" } }, "cases": ["0ecbcbd7abcd9ebf16b7eeb8122ec5d3709632b6226e035b6e54d4af300af95b/1", "796d1f3ef9d0fef6bee021f17c19b36e8680ee944825621f11735878089cc271/2", "e5a72f3ef18662e0c4c82e26974d1f81988acc9344b35a0655ac44db3b92dd52/1", "9baf2ceece99878ca0b223e5d8a72d4b5ff8de818f497817771b60bf1e4bbf45/2", "5b26a988428c16f5837e381475655329ecf112d3daf9491c5aaba1398daef602/1", "d14426a7502bf30bcc3052857a313296102ff29b1629f908d8f8048859b5a5be/2", "1b36a479f725afaa610a12782133ab08d174a5298a4b91485bfe5fb70ff5b7cb/1", "2663bb3d7dec25dceaa8d7842b21d15e6712dd0e117cd35d3fa27b90755b7a2b/2", "be508bde5bea6f44130d3b579f105774f511d9c0e9d7dd77704e973787db48c3/1", "4ddaf66eba0c1d19dc5a2806b6dd1034bcb58dadec492226577e43044e476067/2", "015c6917b48279caa50fed6ea27244e70cbf55e3e10c0571e3c8ab1ee3dc4043/1", "063134f615a6cf55b29208dadb9ccc6fb2295d4007f25181e30cc5f8f4787380/2", "68093c8a14b9e8c1e645c9fdeaaf3fe7536218195ae8c9acb12df805417eedc2/1", "437b0782fae6123336c1ffb2b1850b8b01f77347101e7d76539cf9d0396263b5/2", "4e0bf9733348ba3bc9ab1a5b02d5a9b9cb2c8202b33e25b5ed7132dce7a05c6f/1", "708f89817d475c50a23d2b8cae95da7d73fc347814153374bb62aad4185a4d73/2", "72d4572d21af87d07c88dd7850479d095cc969a342f616eb7e48fea607deb2c0/1", "f28ffd37271a680bc859cb6127243bd2d9e97b8c92125349ad3f08d435f2308e/2"] }], "Geometry": [{ "id": 2189, "name": "Point Location Test", "solves": 1230, "attempts": 1355, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There is a line that goes through the points p₁ = (x₁,y₁) and p₂ = (x₂,y₂). There is also a point p₃ = (x₃,y₃). Your task is to determine whether p₃ is located on the left or right side of the line or if it touches the line when we are looking from p₁ to p₂.", "Input": "The first input line has an integer t: the number of tests. After this, there are t lines that describe the tests. Each line has six integers: x₁, y₁, x₂, y₂, x₃ and y₃.", "Output": "For each test, print \"LEFT\", \"RIGHT\" or \"TOUCH\".", "Constraints": "- 1 ≤ t ≤ 10⁵\n-  − 10⁹ ≤ x₁, y₁, x₂, y₂, x₃, y₃ ≤ 10⁹\n- x₁ ≠ x₂ or y₁ ≠ y₂", "Example": "Input:\n3\n1 1 5 3 2 3\n1 1 5 3 4 1\n1 1 5 3 3 2\nOutput:\nLEFT\nRIGHT\nTOUCH" } }, "cases": ["9b7626f77395b68626d84aa1ae6fff5fdb84bbcb4000a32a79db8470dfb275ed/1", "c7a61c2e5c9a5dc602b83734ef340cc242da52c7de62e8c92efaf06f79d66a5d/2", "74c93d2cb188c986b85428b281793b2bc4814fb68661869c2346f1b8e7b410bb/1", "cb9ab3bcb1a9fb532817872f22f2c95c7dc08e9d40ddf4d067549d014c76ea82/2", "2023164968213996ef2f7ec1d59b9507fd48d60b78e13e9e53c4d723a2dc1ef1/1", "b560b3e58cf92dd612cd6f51598e7f566e823d916660a3faad1bdc26d429da12/2", "ba51d5f9aebdfc909ad4c7d98dbda6ff252020f5e8159dd6ec7fdae282ff31d7/1", "990e95e34ad1bfca3085aa5eb2ce41c1fcea3ce6c27dcbd6ba2d3353f5b6b41c/2"] }, { "id": 2190, "name": "Line Segment Intersection", "solves": 743, "attempts": 935, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are two line segments: the first goes through the points (x₁,y₁) and (x₂,y₂), and the second goes through the points (x₃,y₃) and (x₄,y₄). Your task is to determine if the line segments intersect, i.e., they have at least one common point.", "Input": "The first input line has an integer t: the number of tests. After this, there are t lines that describe the tests. Each line has eight integers x₁, y₁, x₂, y₂, x₃, y₃, x₄ and y₄.", "Output": "For each test, print \"YES\" if the line segments intersect and \"NO\" otherwise.", "Constraints": "- 1 ≤ t ≤ 10⁵\n-  − 10⁹ ≤ x₁, y₁, x₂, y₂, x₃, y₃, x₄, y₄ ≤ 10⁹\n- (x₁,y₁) ≠ (x₂,y₂)\n- (x₃,y₃) ≠ (x₄,y₄)", "Example": "Input:\n5\n1 1 5 3 1 2 4 3\n1 1 5 3 1 1 4 3\n1 1 5 3 2 3 4 1\n1 1 5 3 2 4 4 1\n1 1 5 3 3 2 7 4\nOutput:\nNO\nYES\nYES\nYES\nYES" } }, "cases": ["5b38d8f0e15979f1cce369fd275a99b0a9b7cda45454b2d4ce16307a2f5cb2eb/1", "1553cda2ae43d19a19bbf7c295b9db95aaf5aca758c84782ad748c886c8edbbe/2", "3c37eb7b22cf34a6de1e942ac60f677bcee152ceb7322b2878af79e0d03b711b/1", "3037fcd1b6a757c4131b3482b51d98702b48a0e8e3beb2192101eeb2243025f2/2", "dc90f884aa95efae3afa9ce25985942a9d033f0971d43b850e8423951fe025eb/1", "e69606a08c7fd7359ef100e7eb56874d6241d4988f3b2541e45d02f031909592/2", "9ac6de778bd2cb60c9fd9f9b4a3ba0a6fa45c5fd53842c4e51458248a343b316/1", "b9a4c2be8fd702553b411d96983855b46f9b4b2861cda4ac400dfbafc185d4f9/2", "06c93dde000a83ab05e412f31c110547873d23a195bb9da1baeecf865f72320f/1", "a115e91c2e84c3078fa06914eff28d07590ddfaa47a55fb4f31dd7c5b3566194/2"] }, { "id": 2191, "name": "Polygon Area", "solves": 857, "attempts": 896, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to calculate the area of a given polygon. The polygon consists of n vertices (x₁,y₁), (x₂,y₂), …, (x_(n),y_(n)). The vertices (x_(i),y_(i)) and (x_(i + 1),y_(i + 1)) are adjacent for i = 1, 2, …, n − 1, and the vertices (x₁,y₁) and (x_(n),y_(n)) are also adjacent.", "Input": "The first input line has an integer n: the number of vertices. After this, there are n lines that describe the vertices. The ith such line has two integers x_(i) and y_(i). You may assume that the polygon is simple, i.e., it does not intersect itself.", "Output": "Print one integer: 2a where the area of the polygon is a (this ensures that the result is an integer).", "Constraints": "- 3 ≤ n ≤ 1000\n-  − 10⁹ ≤ x_(i), y_(i) ≤ 10⁹", "Example": "Input:\n4\n1 1\n4 2\n3 5\n1 4\nOutput:\n16" } }, "cases": ["45d5c9d93fc98d5d317f025f96a235d9ab8a0e9750337ba83a33de28ca39ac11/1", "33eb50faee5bd34f847172542ae38fdc185a32455b8544610dcda2dea36c44fc/2", "16ce7ddf9cae3cfde74a9d1e20da07439faf45eb33ec2fa732452f28b618ecb4/1", "cb5f887c4e49b1fbb005b9590fcdbe989ebaf96604a23810ee3681bba025d9cc/2", "d4f0b2f549d5beddd88457a3edaf19955e55691c0780c0a83a2bdae032c0d066/1", "7cae3af27d883c7cacc80e4a7d8870b246b9b393af9dfb947e118ff862f180b9/2"] }, { "id": 2192, "name": "Point in Polygon", "solves": 470, "attempts": 596, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a polygon of n vertices and a list of m points. Your task is to determine for each point if it is inside, outside or on the boundary of the polygon. The polygon consists of n vertices (x₁,y₁), (x₂,y₂), …, (x_(n),y_(n)). The vertices (x_(i),y_(i)) and (x_(i + 1),y_(i + 1)) are adjacent for i = 1, 2, …, n − 1, and the vertices (x₁,y₁) and (x_(n),y_(n)) are also adjacent.", "Input": "The first input line has two integers n and m: the number of vertices in the polygon and the number of points. After this, there are n lines that describe the polygon. The ith such line has two integers x_(i) and y_(i). You may assume that the polygon is simple, i.e., it does not intersect itself. Finally, there are m lines that describe the points. Each line has two integers x and y.", "Output": "For each point, print \"INSIDE\", \"OUTSIDE\" or \"BOUNDARY\".", "Constraints": "- 3 ≤ n, m ≤ 1000\n- 1 ≤ m ≤ 1000\n-  − 10⁹ ≤ x_(i), y_(i) ≤ 10⁹\n-  − 10⁹ ≤ x, y ≤ 10⁹", "Example": "Input:\n4 3\n1 1\n4 2\n3 5\n1 4\n2 3\n3 1\n1 3\nOutput:\nINSIDE\nOUTSIDE\nBOUNDARY" } }, "cases": ["c2ede878b39dea4203e3dcac40f44402bf9a65a507dc7a12a103b3f9347e7b32/1", "9b15ced7011cb81be667831c249aa7fdeacee2749f9c1cacbe3b334f4782ffd3/2", "2cb77bcbf8a6ee03b2a64feee6737e47066d3b37c1123540cb7c64cc0e2816fe/1", "9e9f1ea9d0d7a4956f560bb086d78872702bf194b4aaaaf63725eb28a8a70ba9/2", "3ef0da8a96e0d7cd697c476f6d034d966120c7d643a325468183eb4ab0991a63/1", "4dafdd538c8bae26e89f703b1370bfa1138cf3ba332d1f7127101e4fcce8df28/2", "fcb298ec320e9e3c998168f719a9d7e1e81bf7b8314c76e9912bf55f56e18ac8/1", "bb51dfdad1ad720de7bea2ccbdd9271ad6895af97fa17ffdbc9b492c53e273d0/2"] }, { "id": 2193, "name": "Polygon Lattice Points", "solves": 415, "attempts": 432, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given a polygon, your task is to calculate the number of lattice points inside the polygon and on its boundary. A lattice point is a point whose coordinates are integers. The polygon consists of n vertices (x₁,y₁), (x₂,y₂), …, (x_(n),y_(n)). The vertices (x_(i),y_(i)) and (x_(i + 1),y_(i + 1)) are adjacent for i = 1, 2, …, n − 1, and the vertices (x₁,y₁) and (x_(n),y_(n)) are also adjacent.", "Input": "The first input line has an integer n: the number of vertices. After this, there are n lines that describe the vertices. The ith such line has two integers x_(i) and y_(i). You may assume that the polygon is simple, i.e., it does not intersect itself.", "Output": "Print two integers: the number of lattice points inside the polygon and on its boundary.", "Constraints": "- 3 ≤ n ≤ 10⁵\n-  − 10⁶ ≤ x_(i), y_(i) ≤ 10⁶", "Example": "Input:\n4\n1 1\n5 3\n3 5\n1 4\nOutput:\n6 8" } }, "cases": ["45d5c9d93fc98d5d317f025f96a235d9ab8a0e9750337ba83a33de28ca39ac11/1", "f90676bbd1321ff702ee66c13d23454897fb335fbae4923ead7fe2f37e38c3fb/2", "16ce7ddf9cae3cfde74a9d1e20da07439faf45eb33ec2fa732452f28b618ecb4/1", "934a42f5c9f3740cee43bd68db9330db7770376b2ea8ac102d6cbbb3ef57a072/2", "d4f0b2f549d5beddd88457a3edaf19955e55691c0780c0a83a2bdae032c0d066/1", "6f50ab2a7ae8e9969ac580d76f6a4479a4a6b68eeae90e6b71abb3caa95a236a/2", "e3253a8764c7d320faf4c515f9b16dcbb0a01887b02349cc3aee5083e970a243/1", "488b1b1a8acbb005559e1338e0a40e96fd4f2aacd1773be955b5820e80b76676/2"] }, { "id": 2194, "name": "Minimum Euclidean Distance", "solves": 390, "attempts": 518, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given a set of points in the two-dimensional plane, your task is to find the minimum Euclidean distance between two distinct points. The Euclidean distance of points (x₁,y₁) and (x₂,y₂) is $\\sqrt{(x_1-x_2)^2+(y_1-y_2)^2}$.", "Input": "The first input line has an integer n: the number of points. After this, there are n lines that describe the points. Each line has two integers x and y. You may assume that each point is distinct.", "Output": "Print one integer: d² where d is the minimum Euclidean distance (this ensures that the result is an integer).", "Constraints": "- 2 ≤ n ≤ 2 ⋅ 10⁵\n-  − 10⁹ ≤ x, y ≤ 10⁹", "Example": "Input:\n4\n2 1\n4 4\n1 2\n6 3\nOutput:\n2" } }, "cases": ["ded4a8a020f2970c4213ecd7f2e56f7a604f56f1b83d2d16230350d98c9fd085/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "fafce2c2eaa733fb354cf288b1095a86180267df7f63fe197df9e856632a5eeb/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "0adabcd4162010722d9691d939f6e7a615b523786bdf79f4f0f63eaf89460b37/1", "1caabf241e003b296d356f31331486d948719bc827037130c695630bffc8d1c8/2", "806d5982c0413f3f72d52b7aead401813993853fc70efac558975057981e332b/1", "085c348f64a3b543e973a33749e90ba20847b99016a87e5228847597d61ce582/2", "beec1bc0331b89933d3cb0b7e91783cd9a4d1ea1771c32fe3a180fe4c8854624/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "616eea97c471ecd116041e4139d64be21d55e592baa672709291e01634bdd52b/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "223bb942953f6d7532ef20b482775972b15eea6ce3ebace6f4c0dfcb76c75ba5/1", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/2", "1baeba606f0ca9b1337e3dbebd166cb3dfa04c8a70c004fcbf5b3abb8bbe9651/1", "1a252402972f6057fa53cc172b52b9ffca698e18311facd0f3b06ecaaef79e17/2", "189eb37be144591aba86d91dfb0d2c25cf9a9504d6314a06f37684d8a2256f99/1", "49ff152a568e1ae6f9b476922d67dfa5cfd8639ad514e3c49daeaaeb6de177cc/2", "deab5cdb64aa1d484bee4f62ed44420e135156143fc66f9fc85f9cdfb3add55a/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "f29c913ddc3315da98110fe589124a4168c2f67fcb479ba9f2137cc8d9781c11/1", "e6c21e8d260fe71882debdb339d2402a2ca7648529bc2303f48649bce0380017/2", "aaf5ebf65218e8b2055fc4e96ae5716fdf1a3e5ae669b7f2983c5dc223a0eee1/1", "f493f8535304d683234a012229235aad277a896b029ceafd1f823759f8b3512d/2", "991100e75013ad26e533d1eca2e2f145d69238b534e30dd9d22ecde46b91b273/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "4d9587f18a4d2833a41ef54aa59f3c8346df75374cd44a549ee281a791784f2d/1", "b58a3da5fde2680191877ec88a1aa7d06927cc3b30cdf0d0db8c39b488891576/2", "33512dbd78a588f11dfa736309fc192a879b22911ecfca322f4e8633d9135545/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2"] }, { "id": 2195, "name": "Convex Hull", "solves": 565, "attempts": 684, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given a set of n points in the two-dimensional plane, your task is to determine the convex hull of the points.", "Input": "The first input line has an integer n: the number of points. After this, there are n lines that describe the points. Each line has two integers x and y: the coordinates of a point. You may assume that each point is distinct, and the area of the hull is positive.", "Output": "First print an integer k: the number of points in the convex hull. After this, print k lines that describe the points. You can print the points in any order. Print all points that lie on the convex hull.", "Constraints": "- 3 ≤ n ≤ 2 ⋅ 10⁵\n-  − 10⁹ ≤ x, y ≤ 10⁹", "Example": "Input:\n6\n2 1\n2 5\n3 3\n4 3\n4 4\n6 3\nOutput:\n4\n2 1\n2 5\n4 4\n6 3" } }, "cases": ["ded4a8a020f2970c4213ecd7f2e56f7a604f56f1b83d2d16230350d98c9fd085/1", "49c426cd9e28c5a924c86b9d2a65348077a0dde58c3d1ad18c067ac48912c381/2", "fafce2c2eaa733fb354cf288b1095a86180267df7f63fe197df9e856632a5eeb/1", "160ba229fae489eb7260bdc44652f6aec021d18e64653fe1c54c9e407aa38992/2", "0adabcd4162010722d9691d939f6e7a615b523786bdf79f4f0f63eaf89460b37/1", "9325155910489d786d3cb110d9813bff9f50939bfb16f1a07444ce4014cad6f0/2", "806d5982c0413f3f72d52b7aead401813993853fc70efac558975057981e332b/1", "74dd7a3a2773c439f1767d7b00ba722c9f59d08a24ecdb1768f8758b3c8954ed/2", "0c6879ab9e8e968191416c3ddbe0013bab23cd8f0a85613441cfbb0db7e7115c/1", "0c6879ab9e8e968191416c3ddbe0013bab23cd8f0a85613441cfbb0db7e7115c/2", "64866ba505a039e9be25e38f41bbfe010906efedce3601443ce7197c144b5346/1", "64866ba505a039e9be25e38f41bbfe010906efedce3601443ce7197c144b5346/2", "07bf867acfba252b285a0afa6782d935e767c45b5de1bf451f52c37769c0f350/1", "b808ac2a2972c6bd5cae89a6e922e1a031b3e021c9cac58a9798092ee124d068/2"] }], "Advanced Techniques": [{ "id": 1628, "name": "Meet in the Middle", "solves": 1305, "attempts": 1726, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given an array of n numbers. In how many ways can you choose a subset of the numbers with sum x?", "Input": "The first input line has two numbers n and x: the array size and the required sum. The second line has n integers t₁, t₂, …, t_(n): the numbers in the array.", "Output": "Print the number of ways you can create the sum x.", "Constraints": "- 1 ≤ n ≤ 40\n- 1 ≤ x ≤ 10⁹\n- 1 ≤ t_(i) ≤ 10⁹", "Example": "Input:\n4 5\n1 2 3 2\nOutput:\n3" } }, "cases": ["87fdba7ff1885bfc0a71a04ca2892be421d9a3cf07e0632a126b5c08cab08923/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "f55d0cc0cc13aef029454a0ea15b21cb13c377c93d211d8639e93788d1457d74/1", "979b894f2d91bf199766571d58024f020d1a44a417da5f48e1fa1cdf554a14f5/2", "aca6b915d9c8b66ee8238ad033ccb9c3ca44d2e13ced8e8b95064522b1498136/1", "f14b4987904bcb5814e4459a057ed4d20f58a633152288a761214dcd28780b56/2", "c8a4b94c9aac0f6d15b44b2b32fd1bce623ffbdb43ff9561ff3ca991930744ac/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "28e185376b8946ec1d72c96bea9d473d642a909bd550ee4039a09d0026e7c096/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "4a15c4f93106640f11d48e55aaff3a5256bc33bc13a4c21abc141a1597d785a9/1", "ba4984f42a0d20f6965d13314a4cb26029e4e98dcd801c026f682b7a7157d12a/2", "cfdc48846c4e78b5c727606a65aee1f536348f49d2dd7c87aa06b9e6ccceb00d/1", "54183f4323f377b737433a1e98229ead0fdc686f93bab057ecb612daa94002b5/2", "e49a782007e08ebd54d3785e7f4e150b114d3cd78ca9b75768fbec8d013e0ed7/1", "707da81c00046811207f3a2af00244be1e5e625cc10a81908b13ae33faccb4e6/2", "261dee7669714d18599587ca6d1a2501add475642f3abda90c0f7ba8ec802361/1", "c5baa2977d74c91e4549e1b0f0be331761c8b4eb910feb9dfb6f91bbc53fa174/2", "b2c99a4dd9e08ce3199aee338ad78dd8a4758eb52ca577a3e687d8a4a6bb1819/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "e0497cad6e0b739cb48a0a765d33bc5a6c5a2539ffbc9b6f28a9894e1088680a/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "47d8645855bf23c09bc1fcdc2e1fc537b7d00f4eed1693f29a1cd0b03da0b787/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "1e1847a363ff84e6c13748c198f471221385c160938345ce7b93fbffbb3c742f/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "d61686578f813ed08fc0431d77cc6581d2ff3d6cce5470458fc06acc2bd5ebcc/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "9228e12cb8f9f615fad12109742342347a84779c27056e06bf097c274e1b9b10/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "e2cac1ff79c27f658e5b3b72d3c833b64357519a4ebaa6efc310719126e12658/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "3800a9688345f6e558fdde0400cdd92b7cc10ac793fd1a2fd858fd8bcb37a160/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "d9b8ad6997c75273519e0ce5308b719798d16a6b6d9f1e03c86ab95c0497b419/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "066997928e375cb6451ca31616cd36da878c102317dc2267058015057b0d5a97/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "e089e5aa817d3c2547a6ab106012c35c1be2e5dd562ed410ac494316c3ce39b4/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "e10af96334f37d83e52216771db7343778fe8e8c49802a319595df3734903c32/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "3dcf58880cbe46d0937c692a469c6a8e1788a401456e6720974cba40b2bbfe36/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "3e9e12ef7e3df6d11c2e1c7824060f219630c0c1a858e549c9d0cf62e13e015e/1", "e82d42ceb2fb408dd6b104c336f80013ae884d5724d5f52f6f50b4bcb2b16804/2", "90e0cdd1cc9d05fd2270b6d84ec26692912157982e24caebac64f08b13993514/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "bdc1641fe7cc9de1d84ed82651e05bad08d0e064e3ee14fe25b3593bda0b6aee/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "febfe28b451e6db79a127bfb230d1d27235e0ffaf39f2b02e1e7f18c6ccff1c3/1", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/2", "2b022126f50b97f0e4cbe1a6be9ad3059a0e97328b9b785bd368daaf0420f7df/1", "b205d7c9e4095ae30dc6adcaee3bb0bf4c4268413331254930e8672872cb34cc/2", "ee003ab335811d6969cd087cbe12e7aaee74bda66140f1c9c09f63fbf2568e57/1", "75248033d1a9380c628994309d84eaf0193e876ecfc3ce745dcc70f75dfdc805/2", "5cc79d74bac1c4420840cb10dc6c514aa0370ae18b8d89e8ed37ab3b1435b361/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "e930f7188c4d6e56bee04b6a8323123d0155092db8f766f64e0d728796ce561f/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "c14cecf7dcc496c7957948e396549e70afd294eae77514d6a4de4f40bb06f597/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "1366016f38e9b3099cf90f876cd093c661bd10db00c6ed15b7ae109b0a262806/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "2e7dbbbf7c3d1076d1025c25f9c2602fe6ba0c18cf0e39db8bd155870d342c18/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "90e0cdd1cc9d05fd2270b6d84ec26692912157982e24caebac64f08b13993514/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2"] }, { "id": 2136, "name": "Hamming Distance", "solves": 581, "attempts": 638, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "The Hamming distance between two strings a and b of equal length is the number of positions where the strings differ. You are given n bit strings, each of length k and your task is to calculate the minimum Hamming distance between two strings.", "Input": "The first input line has two integers n and k: the number of bit strings and their length. Then there are n lines each consisting of one bit string of length k.", "Output": "Print the minimum Hamming distance between two strings.", "Constraints": "- 2 ≤ n ≤ 2 ⋅ 10⁴\n- 1 ≤ k ≤ 30", "Example": "Input:\n5 6\n110111\n001000\n100001\n101000\n101110\nOutput:\n1\nExplanation: The strings\n101000\nand\n001000\ndiffer only at the first position." } }, "cases": ["36d6c121a4a259992a399cacee3c4c4bf63ce8c64d5da24a435993d4e66e50e7/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "b943ef216d418bbcb8bab4e1683df7016e7f59ea08025dd92b9471ed46f34de1/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "4114933654cf89f97bb238fc723c1cd986226a4407d3c90bdf2e0698a65a216e/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "04b97e3ca948d9ca81ff35aa7926213f41045ae92245d7b606ed88922b90bd61/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "09b4c5ebb1f2ee254fa9fb47dffd21c58c299299b3436b55870c861f5170742b/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "5762c3faaf774750a4140d085d6c3a183fc5e2a41a40a05661f322a72add43f8/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "a2777c66687f0c8574053651a29a1085e17217cb5093a01b013110d59cb83724/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "cc7a00d4504e0e6ee19ff35ab4a79caf5ddd5e6521f92ab990102284d4879b60/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "0d1599d7d46a81c175efe9b4d396ba84e9feb54612d2b688d22cad44ed62237f/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "15ad916f60cc4af2e58058f3efb673fa2829156552d6e114f6e4444d2f949741/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "12c113f43d7a12227a6a3cd9f32d5fccc3b642e63d29c3b84088f77ce5080176/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2"] }, { "id": 2137, "name": "Beautiful Subgrids", "solves": 363, "attempts": 425, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given an n × n grid whose each square is either black or white. A subgrid is called beautiful if its height and width is at least two and all of its corners are black. How many beautiful subgrids are there within the given grid?", "Input": "The first input line has an integer n: the size of the grid. Then there are n lines describing the grid:\n1\nmeans that a square is black and\n0\nmeans it is white.", "Output": "Print the number of beautiful subgrids.", "Constraints": "- 1 ≤ n ≤ 3000", "Example": "Input:\n5\n00010\n11111\n00110\n11001\n00010\nOutput:\n4" } }, "cases": ["d521e529158f822275bd66075abd1b3849b393ab6bd8c7d7bbad9262abea2216/1", "a1fb50e6c86fae1679ef3351296fd6713411a08cf8dd1790a4fd05fae8688164/2", "c4ae82475f87ce79f34a200460599e7e3845a4dad3e7d065cf70d6c64525a4f5/1", "94d5a38598be77593d4781b8fbd74cb4e2cd05bb006b1b531988ab2db90de9c9/2", "b786ccde315626f829783422f154b3a8e3b600ef7cb30f980a48f1e39c02b9db/1", "3a73535ece7dc8bebde84c48bfc45cf1f4e21f55ab7056e67715ca757ae602a1/2", "79a9215210e0592f936a70b377f2deac3e589e7e9cf8323c917bd7f287837a80/1", "e4a363e051194b079481ca3210dc65fdfba488d01622b954d48e811b1b9bb6a6/2", "6ffaf4a10d90d85ee1982e08e74bd92beaac779a30f2fdb19a4606c33ae3e09e/1", "1db102073d2e2a14c7a01dc7c9908d0d0a41978cb59658749bd2470354d38481/2", "b3be08644f36eccb62fb7469eefec78ddd2f25d37d604b55eb6289afd18f2e99/1", "1e813eea7b4ced63d28d540c95154ad8b632546dd1730a47ec487474a4df0e33/2", "eee4c177cc8989b8dc6f171eee155e67c9288ab9ae65727a1e88b8a5a22471e6/1", "1d694a46d15a157622ea0b8f02bf23dfd5a671e339ea1604b428bb5952a3ffd5/2"] }, { "id": 2138, "name": "Reachable Nodes", "solves": 349, "attempts": 386, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "A directed acyclic graph consists of n nodes and m edges. The nodes are numbered 1, 2, …, n. Calculate for each node the number of nodes you can reach from that node (including the node itself).", "Input": "The first input line has two integers n and m: the number of nodes and edges. Then there are m lines describing the edges. Each line has two distinct integers a and b: there is an edge from node a to node b.", "Output": "Print n integers: for each node the number of reachable nodes.", "Constraints": "- 1 ≤ n ≤ 5 ⋅ 10⁴\n- 1 ≤ m ≤ 10⁵", "Example": "Input:\n5 6\n1 2\n1 3\n1 4\n2 3\n3 5\n4 5\nOutput:\n5 3 2 2 1" } }, "cases": ["43e8d85c5ed904fecc7d7eb78739c7fd99e17ed9b01d2018bb2a49d4da5c4c4e/1", "116d0e624c1cb45f40a2f91253410b353e6c50647019c0457de75f7a57c783f8/2", "bc89025a9e4d8c9671ac6304f4558a3cb7b620bb8a0bf4581ecf88a513c9faaa/1", "0fe3e90827ee3e74b8ec8312e67d5ea9c5d7729c58d8e8329147b9e93c341350/2", "3e42f66e942cfd23ce6e8ded82332e640345a0e0abd9505e78e5ea8c9ef50c50/1", "fa8815913bc8e9f1e914bb7527ad22917c67cb411b9149eca04822d2c7dd96b5/2", "f013a6ccba47cb5d99ae68ab26038bb8bf596604a188ca0921d4f482089018f1/1", "5d65edb70ae56fc6a980b18579c484fdb0cb153431054a8623ee349d62635d84/2"] }, { "id": 2143, "name": "Reachability Queries", "solves": 274, "attempts": 315, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "A directed graph consists of n nodes and m edges. The edges are numbered 1, 2, …, n. Your task is to answer q queries of the form \"can you reach node b from node a?\"", "Input": "The first input line has three integers n, m and q: the number of nodes, edges and queries. Then there are m lines describing the edges. Each line has two distinct integers a and b: there is an edge from node a to node b. Finally there are q lines describing the queries. Each line consists of two integers a and b: \"can you reach node b from node a?\"", "Output": "Print the answer for each query: either \"YES\" or \"NO\".", "Constraints": "- 1 ≤ n ≤ 5 ⋅ 10⁴\n- 1 ≤ m, q ≤ 10⁵", "Example": "Input:\n4 4 3\n1 2\n2 3\n3 1\n4 3\n1 3\n1 4\n4 1\nOutput:\nYES\nNO\nYES" } }, "cases": ["e839969027d597a9fa7bdf0c46ed6836a0d8ee6d0102c0bc4108dbd789981de6/1", "c6d5757e71154a2fbf133b872225be3529a669e7237a302c59bfbbcaa339de65/2", "5970f88a144c3aa9e598b851a5f029cb19c5d7a0c30c8e7cebc3c64fe36c6b14/1", "b718ddc58eef20a874fe76adc8d27c7d08831627610cff5e9637a768718c191b/2", "ae89f8ceab7f40ff8d4aae4c65ca57bff71a886c17002f4290aca1e17dc568de/1", "f217537750cc601687f4b4635c3b6caf1b7540383d962fe1e941c0e54e036603/2", "e727dd989a9fd68bfc39f9a3b38081f5ff5696cf466b327afeb490383ec39b7d/1", "261fe1b122c89cf5f0d7bae1372a725db4b6194b2c7357fdf8273f1d8d8eab18/2", "368ddca688272c4f5f6f46d10ecd871fb3fab83ab6f47face74f201b0448ee7f/1", "83235cdcdfa03a05238341aec4a8482d6859e87d9f5fa5e03693232bc3ce82a3/2", "ce4ee634614f044c826fa840057d613e904e483d9a437a7f0298b07246ae76d8/1", "a115e91c2e84c3078fa06914eff28d07590ddfaa47a55fb4f31dd7c5b3566194/2", "15664661b34d81470ab7b8247f489ee9820e221216557c2057143edfe7b51e82/1", "bb7f3053754291371108918feb903827e417a4e20eefe8ff2332dd524893299d/2"] }, { "id": 2072, "name": "Cut and Paste", "solves": 227, "attempts": 253, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given a string, your task is to process operations where you cut a substring and paste it to the end of the string. What is the final string after all the operations?", "Input": "The first input line has two integers n and m: the length of the string and the number of operations. The characters of the string are numbered 1, 2, …, n. The next line has a string of length n that consists of characters A–Z. Finally, there are m lines that describe the operations. Each line has two integers a and b: you cut a substring from position a to position b.", "Output": "Print the final string after all the operations.", "Constraints": "- 1 ≤ n, m ≤ 2 ⋅ 10⁵\n- 1 ≤ a ≤ b ≤ n", "Example": "Input:\n7 2\nAYBABTU\n3 5\n3 5\nOutput:\nAYABTUB" } }, "cases": ["f42291be52a1c70ce9a7e928d68c6b8b4058bc6c4d2062f4de9d91e73ffcd823/1", "9725b6bb2223c225a19c9de917feba2a5bddb20389ad4f247665d5897efee0f9/2", "38d6e521c9150b3541db45d63939a1e2dbb7f26882ea350911679b678fd04d5d/1", "77489b96592ed65df6ca645bbeabf9524948af2bb90017459d97496b9526e9ef/2", "ab898aaa9ec43eb041604e6dd81050ea9e8b02e6a7999aad23700355c19b19ac/1", "b783b117ba5bbf0f28d017913c743e6417198145eb0af4f5f6256371e7c317fc/2"] }, { "id": 2073, "name": "Substring Reversals", "solves": 199, "attempts": 208, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given a string, your task is to process operations where you reverse a substring of the string. What is the final string after all the operations?", "Input": "The first input line has two integers n and m: the length of the string and the number of operations. The characters of the string are numbered 1, 2, …, n. The next line has a string of length n that consists of characters A–Z. Finally, there are m lines that describe the operations. Each line has two integers a and b: you reverse a substring from position a to position b.", "Output": "Print the final string after all the operations.", "Constraints": "- 1 ≤ n, m ≤ 2 ⋅ 10⁵\n- 1 ≤ a ≤ b ≤ n", "Example": "Input:\n7 2\nAYBABTU\n3 4\n4 7\nOutput:\nAYAUTBB" } }, "cases": ["f42291be52a1c70ce9a7e928d68c6b8b4058bc6c4d2062f4de9d91e73ffcd823/1", "425ad964267e1e62c1d443c5681f4f5ee4d65f5a09bfd0fcb66e1cc21f927753/2", "38d6e521c9150b3541db45d63939a1e2dbb7f26882ea350911679b678fd04d5d/1", "5da30323baa2766dddcaf21cf001acbcd9b6ded0ce9d30bb61de99fc69b402f6/2", "ab898aaa9ec43eb041604e6dd81050ea9e8b02e6a7999aad23700355c19b19ac/1", "a649faedecaa503f40b71c1a7bd0a41154ece58a45b60140d533bfa08f6a523f/2"] }, { "id": 2074, "name": "Reversals and Sums", "solves": 198, "attempts": 216, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given an array of n integers, you have to process following operations:\n\n1. reverse a subarray\n2. calculate the sum of values in a subarray", "Input": "The first input line has two integers n and m: the size of the array and the number of operations. The array elements are numbered 1, 2, …, n. The next line as n integers x₁, x₂, …, x_(n): the contents of the array. Finally, there are m lines that describe the operations. Each line has three integers t, a and b. If t = 1, you should reverse a subarray from a to b. If t = 2, you should calculate the sum of values from a to b.", "Output": "Print the answer to each operation where t = 2.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ m ≤ 10⁵\n- 0 ≤ x_(i) ≤ 10⁹\n- 1 ≤ a ≤ b ≤ n", "Example": "Input:\n8 3\n2 1 3 4 5 3 4 4\n2 2 4\n1 3 6\n2 2 4\nOutput:\n8\n9" } }, "cases": ["fea20687adad6ab630c627b7f0a5e9f4f10c8ff53afc33e6aaa0404f0f18dd0a/1", "9d98e8a4b127014b98e7df5b832a1dc3bad8880a26d2b3b59830bb1c5268f6c2/2", "78713170c4c827e2b2e680f369b5d56265dd3645dc3218f24245f18af0cdee1c/1", "01198df3b0b30f0cb331813a47d54da49f33f67a033d248e7cd510ccd62c463a/2", "0729f23a56895fca4089c1e603d1f9f29f43f240df00a2994ab726be30059559/1", "f67c00c274dfb86b770f1b8c33d6ed1d0a00bb9d856027126ab852067e068149/2"] }, { "id": 2076, "name": "Necessary Roads", "solves": 297, "attempts": 301, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n cities and m roads between them. There is a route between any two cities. A road is called necessary if there is no route between some two cities after removing that road. Your task is to find all necessary roads.", "Input": "The first input line has two integers n and m: the number of cities and roads. The cities are numbered 1, 2, …, n. After this, there are m lines that describe the roads. Each line has two integers a and b: there is a road between cities a and b. There is at most one road between two cities, and every road connects two distinct cities.", "Output": "First print an integer k: the number of necessary roads. After that, print k lines that describe the roads. You may print the roads in any order.", "Constraints": "- 2 ≤ n ≤ 10⁵\n- 1 ≤ m ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n5 5\n1 2\n1 4\n2 4\n3 5\n4 5\nOutput:\n2\n3 5\n4 5" } }, "cases": ["f80970d6ceccdde5f94861e3a8379c2c7796580bb93a07a9d7412cd6bcea8e3f/1", "6a49ca6ffebdcbac1e86062e9dedf1e6524f9cb52b0c7f57b7bdf5685e926e24/2", "81acda9bd72c3ba5aea93c916db8fbe25e6224af2835dd214e307c458d0dfe83/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "0b8f48ef1a210ac9b392de9106edd104fbb2b624de65b3ddd1343a483c191aac/1", "32fdeb8f1573c4473a142ce10f9dcbad092fcd48b3e3a451eb78c117a6c2e7dc/2", "303337ee9a1652fe32686b16bb12a35cc156c7512d359e7da94bfe8760575774/1", "43e952838d1387aef567715ad20479b4f30fdb38394428e75a0e17168ec78b36/2", "2cf4cdcc38e226ab61762c404ae535ad0dd5c79843c194653ec93ff5ee959653/1", "dcbfbebaedb60b2ead6df0134671b76eda25a02bef5d1b26d0e40a5bf5416f52/2"] }, { "id": 2077, "name": "Necessary Cities", "solves": 266, "attempts": 282, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n cities and m roads between them. There is a route between any two cities. A city is called necessary if there is no route between some other two cities after removing that city (and adjacent roads). Your task is to find all necessary cities.", "Input": "The first input line has two integers n and m: the number of cities and roads. The cities are numbered 1, 2, …, n. After this, there are m lines that describe the roads. Each line has two integers a and b: there is a road between cities a and b. There is at most one road between two cities, and every road connects two distinct cities.", "Output": "First print an integer k: the number of necessary cities. After that, print a list of k cities. You may print the cities in any order.", "Constraints": "- 2 ≤ n ≤ 10⁵\n- 1 ≤ m ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n5 5\n1 2\n1 4\n2 4\n3 5\n4 5\nOutput:\n2\n4 5" } }, "cases": ["3e73e9804845ed92e6a41cddd949f63739993933ce7264e96dc25bdc7c717ad2/1", "5e868cce4f7959344096b827053e1d8c95fe5fe32436744f4270c99a40fbe041/2", "37fece55327d407e2fd1f4b0e42352321adba7f46192b4b88fb1f7a857559dc5/1", "c63f8bfbf836e0854f1e36a25b1b45c8efc006f5776465bd4bb5d512b9eac8a4/2", "c7a5723e5d16f17f37e5fecef12c3fda5981d5a8d6240e39b89e354ba8036336/1", "934678c324da0818d29a2e6bceca501375e90d7f0f1fc56ef1b4ff4124c502f2/2", "4d83a12889b695e4942773f862f6d6e68c1c5783371252fe41b1fb55764b5da5/1", "39ffb7375f58b9e75dc3ccbb120cb1f07af01ca1655a710ea3827f8fdf99570c/2", "2cf4cdcc38e226ab61762c404ae535ad0dd5c79843c194653ec93ff5ee959653/1", "0d2e3965dbde1a1517e4e2b1844cf286b465ee2da88d764c3699363e4ac87006/2", "7219e739ac6abf6a39e141de2cb2077c9232bf435e87f0480dfa0c026523e347/1", "74d01a0c051c963d9a9b8ab9dbeab1723f0ad8534ea9fa6a942f358d7fa011b4/2", "3d818f681ffc112503778220674a9c7f011eec0987af19e953826605f1e8875c/1", "7befa5cd45e7211be4508678838b447e99cd5d996bdda10ed3a52772533fe0c4/2"] }, { "id": 2078, "name": "Eulerian Subgraphs", "solves": 156, "attempts": 162, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given an undirected graph that has n nodes and m edges. We consider subgraphs that have all nodes of the original graph and some of its edges. A subgraph is called Eulerian if each node has even degree. Your task is to count the number of Eulerian subgraphs modulo 10⁹ + 7.", "Input": "The first input line has two integers n and m: the number of nodes and edges. The nodes are numbered 1, 2, …, n. After this, there are m lines that describe the edges. Each line has two integers a and b: there is an edge between nodes a and b. There is at most one edge between two nodes, and each edge connects two distinct nodes.", "Output": "Print the number of Eulerian subgraphs modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 0 ≤ m ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n4 3\n1 2\n1 3\n2 3\nOutput:\n2\nExplanation: You can either keep or remove all edges, so there are two possible Eulerian subgraphs." } }, "cases": ["eefb79a8d4e6940478c9dce6b392a630f02fdc7e1af3b79a4bb193ec24cb2e06/1", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/2", "c1311b6c6ff1054758c70c676306f67a7522e432834a278fe7a806d86548a62c/1", "ec80ee58c62bc6b069ec87273d357cd94afa4cb051ba893302f092d7ba2e4c56/2", "3a39f012d4a658a21527eea913420dc5ec168aac24957de096f20861ce386a57/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2"] }, { "id": 2084, "name": "Monster Game I", "solves": 178, "attempts": 195, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are playing a game that consists of n levels. Each level has a monster. On levels 1, 2, …, n − 1, you can either kill or escape the monster. However, on level n you must kill the final monster to win the game. Killing a monster takes sf time where s is the monster’s strength and f is your skill factor (lower skill factor is better). After killing a monster, you get a new skill factor. What is the minimum total time in which you can win the game?", "Input": "The first input line has two integers n and x: the number of levels and your initial skill factor. The second line has n integers s₁, s₂, …, s_(n): each monster’s strength. The third line has n integers f₁, f₂, …, f_(n): your new skill factor after killing a monster.", "Output": "Print one integer: the minimum total time to win the game.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ x ≤ 10⁶\n- 1 ≤ s₁ ≤ s₂ ≤ … ≤ s_(n) ≤ 10⁶\n- x ≥ f₁ ≥ f₂ ≥ … ≥ f_(n) ≥ 1", "Example": "Input:\n5 100\n20 30 30 50 90\n90 60 20 20 10\nOutput:\n4800\nExplanation: The best way to play is to kill the second and fifth monster." } }, "cases": ["5d6f37729e97f3dcafb56ade2ca4ed80ebf1797412e9cac00c9dc1ac5ddb1898/1", "2177cd474baadb2455e9bb5da770984f513d2d8744f8dfd3f10d90dab3513769/2", "217c33373c4dab3980df6a488e467b082353c2f5f21bc53153ec7f18cf26afd4/1", "56b499a0bfbf9a93e3b4c4202ce04bda5f743f2017905e148373f7381ef387dd/2", "58e7e0940dcfa1550b40f05a04fe0fe3aa7bbf83101e86cfb55e720c98904c36/1", "a770645358d70a030247dbf77ba510024edb215a6e0617ad5ade9e6529df6fc6/2", "caf315006d9096887687f17efbd7ffb74d1ee4640f053e5339872792c4fcf1a0/1", "e6a1e9c2260041149ba47524007b88cc7980fa0dac3f71260506bd5d2f2b351b/2", "69d23d8f4d01b0b52591090f762af1787a785a873377ecb68f6394c30e413537/1", "1689ef7ade689004f4cfec57089856666c4e61b91224642149a7ffb1df67c58f/2"] }, { "id": 2085, "name": "Monster Game II", "solves": 170, "attempts": 178, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are playing a game that consists of n levels. Each level has a monster. On levels 1, 2, …, n − 1, you can either kill or escape the monster. However, on level n you must kill the final monster to win the game. Killing a monster takes sf time where s is the monster’s strength and f is your skill factor. After killing a monster, you get a new skill factor (lower skill factor is better). What is the minimum total time in which you can win the game?", "Input": "The first input line has two integers n and x: the number of levels and your initial skill factor. The second line has n integers s₁, s₂, …, s_(n): each monster’s strength. The third line has n integers f₁, f₂, …, f_(n): your new skill factor after killing a monster.", "Output": "Print one integer: the minimum total time to win the game.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ x ≤ 10⁶\n- 1 ≤ s_(i), f_(i) ≤ 10⁶", "Example": "Input:\n5 100\n50 20 30 90 30\n60 20 20 10 90\nOutput:\n2600\nExplanation: The best way to play is to kill the second and fifth monster." } }, "cases": ["d09c6eeae963b026c33538e5933cba4f8806e3259c2973697d57d2ebbfe133d1/1", "c0864f1db8e4bd70de5006ddbe470757d95574a64a0dea24ba1b95f181cbd74f/2", "f9710b7e01d532f0cacf0043b5d24f83f35de39cdb9fe296d913469ebb3eec0d/1", "8864fabdd689fb6699f29350bed0590274f20e9efd35276b41e80149e58865b1/2", "b8d3535ec24454e7a3a12f3659b66a91bcf76aa71f630cf703da402a628d664b/1", "8d36e15d4c2ac45239f0b86ac2f664da79d4fdf8fa83b107b4a59ec332537d35/2", "e724272151f232616ea1a99ccc8f13280e29caf3e838431c2ce63111b66b77eb/1", "df5236e7cef82bf9a3820a016c414522d929b48f22d63fb4dfcb8a296b0a9204/2", "4d79ded9c076c333c2a4dbc6b0b904ec91460339394222f00c7df2cb8035e561/1", "9e80291053a067f8b8c20a239a584bda598c449c66cb3382beaa03e0c9fc4282/2", "5d6f37729e97f3dcafb56ade2ca4ed80ebf1797412e9cac00c9dc1ac5ddb1898/1", "2177cd474baadb2455e9bb5da770984f513d2d8744f8dfd3f10d90dab3513769/2"] }, { "id": 2086, "name": "Subarray Squares", "solves": 190, "attempts": 217, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given an array of n elements, your task is to divide into k subarrays. The cost of each subarray is the square of the sum of the values in the subarray. What is the minimum total cost if you act optimally?", "Input": "The first input line has two integers n and k: the array elements and the number of subarrays. The array elements are numbered 1, 2, …, n. The second line has n integers x₁, x₂, …, x_(n): the contents of the array.", "Output": "Print one integer: the minimum total cost.", "Constraints": "- 1 ≤ k ≤ n ≤ 3000\n- 1 ≤ x_(i) ≤ 10⁵", "Example": "Input:\n8 3\n2 3 1 2 2 3 4 1\nOutput:\n110\nExplanation: An optimal solution is [2,3,1], [2,2,3], [4,1], whose cost is (2+3+1)² + (2+2+3)² + (4+1)² = 110." } }, "cases": ["05f6ac768fc96e23becac951d6e3652b5b20f198ac83db36c9bbb317f71613dc/1", "feaddb6885a12af9a6f0c24a13347c50ba6e0f6b2fe986cdfd00c021f07d6545/2", "7c02a58bb5f27831e1808f71dcd6f5d52e6a70dd077094d0063eafd6daa592b8/1", "fb086517faeb8da323496242836c7347e5f97ed30053823fa31d36136180e959/2", "3792e54e32642b59bb143e1cfd6ff7e70d4e2dc2c0ecb82510272a79beb2ad18/1", "ca82ca7209e36dd0808d337d47ac4589a184cfc346c6c4ae8f86dc3f34664e43/2", "8f9201ee3558fbe95aaeb4282d2a804561fe4d2d93162925003ed91a4954310a/1", "cc87f51a0544032232f46ce43c4eaa2cd9f1f6f5be736b86b8fdeee769393446/2", "923ff1ebb81d0d61270cc36b136dac717d0d7438796332af1c93dadd848c96b0/1", "1a21583d3d847e889365fedae3703838fbb092b85bd0e92bbb2b6235c895aee1/2", "ab70fdd4aff2e14228c1fdc231e9a8f8fd9066ff84370821df037cced5534a87/1", "54b67b1bd9665fd0053a025238efe9dc578913aeeb3e1e892cf79f075487be4f/2", "696be2a7ab34a895adf1b5503acf3ed84ed4a047629e627fda4d8a22d07b6e4f/1", "e48d9c778f5a7927ce3d0849c898845cbab87286d3e0c3560444404855b90864/2", "f5c191772ce997bb93674762799e9b5680782f03297f9d21623d78515a3f5240/1", "ddf07754926e4c2d7e8537b4b7f0fec672ec0c181ae06efe7ab429cc2c35d141/2", "711c1d5de08af5ceb0d88db2c1d14691cc218a2e71255b70fd007c90e6aff733/1", "5aa7623cc30b9b4e6f317c0906485da2dc0e3c9112a18793878fa61af21c814b/2", "194bdb969065a6ee581c9b825c52684b4c6a33dc713c4161f6379422a296ec21/1", "e32376dcb8cffd601a41038c3f6637a7ca7e064516ecda58dc8c4b55b75cb7a1/2"] }, { "id": 2087, "name": "Houses and Schools", "solves": 135, "attempts": 147, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n houses on a street, numbered 1, 2, …, n. The distance of houses a and b is |a−b|. You know the number of children in each house. Your task is to establish k schools in such a way that each school is in some house. Then, each child goes to the nearest school. What is the minimum total walking distance of the children if you act optimally?", "Input": "The first input line has two integers n and k: the number of houses and the number of schools. The houses are numbered 1, 2…, n. After this, there are n integers c₁, c₂, …, c_(n): the number of children in each house.", "Output": "Print the minimum total distance.", "Constraints": "- 1 ≤ k ≤ n ≤ 3000\n- 1 ≤ c_(i) ≤ 10⁹", "Example": "Input:\n6 2\n2 7 1 4 6 4\nOutput:\n11\nExplanation: Houses 2 and 5 will have schools." } }, "cases": ["ca90a47d54bc7397df5d233264cc69904ecd393cee74c4ff194b50c4f5819ac7/1", "57bf74dec225e8d81d937a468dfbec6d78463d3824079a34c485d6b9c3b67fcd/2", "7d74e39ecea5bfb29e10a4b61681121e6c848c55baf185210611888081de4084/1", "db3d8d9cfc8e549d5ead53771a516a7c266a2e6d0e8eb51844a67a922d72af90/2", "c1a40e33d01ee3e1a8c3d182b9c68465929bacbc70bc6a23452210b9c319b712/1", "b133eb191ff7e2db47a278cd08df8173a935a1f5d7f4ff5a96fe160c2ff3bb87/2", "d2bd7870af0c2d05022a3f27db83f4845fb6181340dc91533fa099f9f61f5e9d/1", "c90aec517e3d6b4e72c39c6961f407e9e4f829f2ed5dd96c2057aba75d353929/2", "683e718e15c6914d044094b9cf334857596a8509514e829a692bcfb18a953b24/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "4405a188c2b488818320bebeec793feeddeaac7b2204a2e9f36f9acf3dc1112c/1", "b16377786788b35d5d5cd87fce0c0eb3f3f5bbd83ab6b9b1375dde697d23e796/2"] }, { "id": 2088, "name": "Knuth Division", "solves": 158, "attempts": 177, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given an array of n numbers, your task is to divide it into n subarrays, each of which has a single element. On each move, you may choose any subarray and split it into two subarrays. The cost of such a move is the sum of values in the chosen subarray. What is the minimum total cost if you act optimally?", "Input": "The first input line has an integer n: the array size. The array elements are numbered 1, 2, …, n. The second line has n integers x₁, x₂, …, x_(n): the contents of the array.", "Output": "Print one integer: the minimum total cost.", "Constraints": "- 1 ≤ n ≤ 5000\n- 1 ≤ x_(i) ≤ 10⁹", "Example": "Input:\n5\n2 7 3 2 5\nOutput:\n43" } }, "cases": ["fa8c8106f59c794084d2db1bd6fce789eb600aee5a1dfe86c2ccdb24c841b05e/1", "5ba22c28ca5e198f96731dda13761ed0853d04cfe4e0399867caf9cea15c272e/2", "1d6ab29e7a80a8878c73ab2e43f68b25a89c7f060861beec13cb5441b8847397/1", "818ac974f4ad5c3c26a8993bac881b0c8947f8c5d430c05e0c3c3ad43c95aba9/2", "f53a4d97e70ef387caf60abc86517b44a47eb9a10a9329e187a397b9d2fc76e2/1", "ecb00fd26525e706a40193252b9579b4b925a72cc6927ede4f711d8efdba54a6/2"] }, { "id": 2111, "name": "Apples and Bananas", "solves": 157, "attempts": 174, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are apples and bananas and each of them has an integer weight between 1…k. Your task is to calculate for each weight w between 2...2k the number of ways we can choose an apple and a banana whose combined weight is w.", "Input": "The first input line contains three integers k, n and m: the number k, the number of apples and the number of bananas. The next line contains n integers a₁, a₂, …, a_(n): weight of each apple. The last line contains m integers b₁, b₂, …, b_(m): weight of each banana.", "Output": "For each integer w between 2…2k print the number of ways to choose an apple and a banana whose combined weight is w.", "Constraints": "- 1 ≤ k, n, m ≤ 2 ⋅ 10⁵\n- 1 ≤ a_(i) ≤ k\n- 1 ≤ b_(i) ≤ k", "Example": "Input:\n5 3 4\n5 2 5\n4 3 2 3\nOutput:\n0 0 1 2 1 2 4 2 0\nExplanation: For example for w = 8 there are 4 different ways: we can pick an apple of weight 5 in two different ways and a banana of weight 3 in two different ways." } }, "cases": ["13b743db53c6c8191650a8f8a4e0cddac70653c7d47fe9e68e875eca15e170c5/1", "165b224ddd850d3403186f3d6f131c36364c019b4dabe66da3081ede38cfe024/2", "6a5fb1bd638477c41e24fe24fda520443e65a569f72774c032bc80f2bb2d3429/1", "c91d75b0cf94d448960e6be0ba7ddfa44efb990132ec01e536226ee12634e571/2", "9c0a4750b7089c1a2ffb5298539536facf7a3e1813e5021aec53546e53096e7a/1", "f1d9ca2db2b7022c201bd03a7bb52ac1eca120fde8852fae632c0c5e3619089a/2", "b147649f638b4748472eaf6a69dec48477793b8a3024bf0bff62e6b89f4ac63c/1", "c8bfac3e45fbaf9f9f3974379dce01e73a2e254fd79fe7f12d50774c713f93bb/2", "b88970f56b630d3a66f9e6927a1b2c444c6b1c18852f474caedc59194f958fcd/1", "31e053d702107d0e2da8787f0d642cb688b9bc37077321da1182f8b781579407/2", "1cabaa6333558f6a271c1f4ed96988be9fd7df2ab3201b983e32eb3e80f520e1/1", "4199148abe43c5849068b99a7b4eb4792abc1f38b3c1a7ba3f5f0c1046d8ee9a/2"] }, { "id": 2112, "name": "One Bit Positions", "solves": 150, "attempts": 172, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a binary string of length n and your task is to calculate for every k between 1…n − 1 the number of ways we can choose two positions i and j such that i − j = k and there is a one-bit at both positions.", "Input": "The only input line has a string that consists only of characters 0 and 1.", "Output": "For every distance k between 1…n − 1 print the number of ways we can choose two such positions.", "Constraints": "- 2 ≤ n ≤ 2 ⋅ 10⁵", "Example": "Input:\n1001011010\nOutput:\n1 2 3 0 2 1 0 1 0" } }, "cases": ["f111d660bd00ef3822378d0d8e5524c22160ffeaacc6b97a725d3a6a0e79cb8e/1", "afe6bf760a7da434d98edc09fc59ddc573c937afd75b5c8c1422b2387cd96588/2", "9380953ef0ea530ebcea31f0ed78061adc1443ff9a744199f546283bdd44776b/1", "5180667e9f150df28896145f9072f425f10f48dcda26bb99c474d81510636ebf/2", "10be7e633a2a7174aa71f28ba28c51a85febc623b452899daf0f29107a5a7138/1", "26bd4a1e92c83d513ec6fa8156c6810341c2d7d27d116d09936b66a4aba186f6/2", "5f89d923e7ffd8db940387f8067b5d7a882ae40abb8560b3fe46f3a9d528a803/1", "6d9e0d719b90cfe0a8625c85d334fe6286fcb2e1bea23406c00d87a23cb8bb21/2", "76472dacd78702a6b8f6abcae03662bf5543ec0daf62a0c44e5a8a671d026f8c/1", "ebc0e064fe0301a4868dd7b0c0dd13862b7fabc46037d3a562ad60aedd2c40ff/2"] }, { "id": 2113, "name": "Signal Processing", "solves": 147, "attempts": 153, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given two integer sequences: a signal and a mask. Your task is to process the signal by moving the mask through the signal from left to right. At each mask position calculate the sum of products of aligned signal and mask values in the part where the signal and the mask overlap.", "Input": "The first input line consists of two integers n and m: the length of the signal and the length of the mask. The next line consists of n integers a₁, a₂, …, a_(n) defining the signal. The last line consists of m integers b₁, b₂, …, b_(m) defining the mask.", "Output": "Print n + m − 1 integers: the sum of products of aligned values at each mask position from left to right.", "Constraints": "- 1 ≤ n, m ≤ 2 ⋅ 10⁵\n- 1 ≤ a_(i), b_(i) ≤ 100", "Example": "Input:\n5 3\n1 3 2 1 4\n1 2 3\nOutput:\n3 11 13 10 16 9 4\nExplanation: For example, at the second mask position the sum of aligned products is 2 ⋅ 1 + 3 ⋅ 3 = 11." } }, "cases": ["049aeb96a6aa85111b8bfb7308e9c7f01c3ce0cd3e663a7007bd52a33a99d693/1", "b2acec14fcf2ae7fee2e4e87ab41dd3f550b2be5f760d15973470a5ef57636ec/2", "7ebc00008087a620aea55ffa0f2c763635a6b0d475f4c76497e7b7883356174b/1", "04c534aff5857841e784130bc49748c5f1f8b70e9eb79d264a1fe37f9080dad9/2", "0c3b3c7aa7e77d348e6365a288d28908aad965c42e6921eb872433ecc09803c7/1", "88542378ab90f32f712fb478023f62a4f7925bbbee9c49bcdee3e487bd0b7eea/2", "2dd821cfb4d0ca2aa1fbf9e27ac7cd187145cd33f83f28143938e57feaded6e1/1", "b1bc58072626d49bd96fc1bef2d8ca8735fcc7a027926a95bef383fabb909e64/2", "78aed0ad80214f8f8da7f574d1750ab7f1b5a633ada1ec5a616e4e4fcefe8a9b/1", "f614027aa37332029fc1fc955441d0c5a0de2ea6012c4cb1a16a1737a6ccad10/2"] }, { "id": 2101, "name": "New Roads Queries", "solves": 241, "attempts": 310, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n cities in Byteland but no roads between them. However, each day, a new road will be built. There will be a total of m roads. Your task is to process q queries of the form: \"after how many days can we travel from city a to city b for the first time?\"", "Input": "The first input line has three integers n, m and q: the number of cities, roads and queries. The cities are numbered 1, 2, …, n. After this, there are m lines that describe the roads in the order they are built. Each line has two integers a and b: there will be a road between cities a and b. Finally, there are q lines that describe the queries. Each line has two integers a and b: we want to travel from city a to city b.", "Output": "For each query, print the number of days, or  − 1 if it is never possible.", "Constraints": "- 1 ≤ n, m, q ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n5 4 3\n1 2\n2 3\n1 3\n2 5\n1 3\n3 4\n3 5\nOutput:\n2\n-1\n4" } }, "cases": ["9952d5bbd1f1290f6c413ce8e2326a68f92c9bbcba28b5db01864bf44629da56/1", "682337493d8436ab600949ded8ca5119ff1a9ccd48d57733c2834e94dd3ff5e4/2", "c05032fe69da40dcb8d66dfa5b99a06eb2553df99d10c11f69acac82063a6e38/1", "a1472dde1efb0ed03f70bcecc793466d486d1246d09914422e830d7545a783ff/2", "1130e5174356dabc4104e573969c73f26216c98a1786b5a1f99a4a95ba30695b/1", "52989377b7d56517534dd361f9015aca4ce2c6ac91d519694424525986cf3440/2", "906cf0219873e8db698e4b73378c93020e4eb37448439f3398ca64e4558b0481/1", "f573022a8edaada87dee61f8b848f3c4a2524733065d585afdcfe88f1f2ed750/2", "7b0c3ec9eebe50b41bdc86544499e9043f8d4e32000a348ace6e66b9cd64f2dd/1", "74fbbcf0fc35df2611f4bad46fe1ad952a26417ba59e35038784bacd27ab4b45/2", "128b5e721e323caa22cc9dbe9a549f77450f49621264168cabc5eb6456f3d511/1", "6d6d255f4e1d81b6c161a8db42f878987befbedf91af7f7020eaf2c73044638d/2"] }, { "id": 2133, "name": "Dynamic Connectivity", "solves": 123, "attempts": 134, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Consider an undirected graph that consists of n nodes and m edges. There are two types of events that can happen:\n\n1. A new edge is created between nodes a and b.\n2. An existing edge between nodes a and b is removed.\n\nYour task is to report the number of components after every event.", "Input": "The first input line has three integers n, m and k: the number of nodes, edges and events. After this there are m lines describing the edges. Each line has two integers a and b: there is an edge between nodes a and b. There is at most one edge between any pair of nodes. Then there are k lines describing the events. Each line has the form \"t a b\" where t is 1 (create a new edge) or 2 (remove an edge). A new edge is always created between two nodes that do not already have an edge between them, and only existing edges can get removed.", "Output": "Print k + 1 integers: first the number of components before the first event, and after this the new number of components after each event.", "Constraints": "- 2 ≤ n ≤ 10⁵\n- 1 ≤ m, k ≤ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n5 3 3\n1 4\n2 3\n3 5\n1 2 5\n2 3 5\n1 1 2\nOutput:\n2 2 2 1" } }, "cases": ["4ce3fc910608ca521da91da756e20507f892ef4bb633f8a221d3a9418318f319/1", "09dc8e2978c09d804f59d17b49f535f422c3093f2629500d055afd606e604f78/2", "b548f989198b4675f79735cbebf16aca7e9c3e2169d59c5fa8a00fddab2dee60/1", "b53a34269aff3d0061fcdb873d5ff088520cc195363b1745d017634eeff89bae/2", "4daaf17336627b85caff57c47dbab42247f30f89b2ff5420e6583aa0cdf78a6e/1", "361ca1394d4f657cc9db04ab4c3434429e304cec6c2d1ea2dde523028b64abfb/2", "737efddf92d52727f28d46369dfd5212b4a3eb0d211e225811f5a7c5e352f71c/1", "e6bd7f412c6360b2dcd08c6f175ba48237bd76c80be3e17723a0edc3f7078c54/2", "d388123dd33c5cdb4fe08545a1fd81c7c7606e820a450acc604e7bdde7aec9b1/1", "4b744035c9b151d58ecb24d74581f5fa36ab198a155cea6a0e00343430281463/2", "733013ced082da82b039b1750980755d0f8199d67456f27737e09bc9cfe055a8/1", "f795806bc9d8757f09d2c25c708416ddc8a96e5164d19b624a0c098744e49ce7/2", "ac70a5213e11f275f1dc1d9141e6eb650c129575a771faac38297f716c9ad982/1", "f6b56746c348484a1fa74bfcae69466880b240b1c18ae8c6b1c2b176b04af61c/2"] }, { "id": 2121, "name": "Parcel Delivery", "solves": 120, "attempts": 140, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n cities and m routes through which parcels can be carried from one city to another city. For each route, you know the maximum number of parcels and the cost of a single parcel. You want to send k parcels from Syrjälä to Lehmälä. What is the cheapest way to do that?", "Input": "The first input line has three integers n, m and k: the number of cities, routes and parcels. The cities are numbered 1, 2, …, n. City 1 is Syrjälä and city n is Lehmälä. After this, there are m lines that describe the routes. Each line has four integers a, b, r and c: there is a route from city a to city b, at most r parcels can be carried through the route, and the cost of each parcel is c.", "Output": "Print one integer: the minimum total cost or  − 1 if there are no solutions.", "Constraints": "- 1 ≤ n ≤ 500\n- 1 ≤ m ≤ 1000\n- 1 ≤ k ≤ 100\n- 1 ≤ a, b ≤ n\n- 1 ≤ r, c ≤ 1000", "Example": "Input:\n4 5 3\n1 2 5 100\n1 3 10 50\n1 4 7 500\n2 4 8 350\n3 4 2 100\nOutput:\n750\nExplanation: One parcel is delivered through route 1 → 2 → 4 (cost 1 ⋅ 450 = 450) and two parcels are delivered through route 1 → 3 → 4 (cost 2 ⋅ 150 = 300)." } }, "cases": ["caf39511454493b04d325e24c0730167b7bc09c8bea714c14b107408b65ff6ce/1", "3a96b71ac1f074b212347595e9e0bee7b8afd941c76d607a450d3174d6f42258/2", "b998f47e89e5d9dd409d3d417420ffd906e7a0501f3b5c24cbe7e4be3e30b7ec/1", "cae8934a441243980ca44aadcdf5e70da43aff4b901e7d53b6f17b479ec4986e/2", "16b86aa01a0af1d8ae25d7d42c1db0520b0be75a613a57d945e3a3f5c597fc30/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "669ff07e1d77746e18760f7b14c024e002c38a718ee63c65572036d28c5ddbbd/1", "a7d60e24cad9d65a03bab4edf514cc89b6f9ba9bff61d9f7c8bc6baae5404451/2", "f4863f00ec0f5b99448a87a566e7d730fb536c503835648a1ca4f955dcf1b695/1", "89ab24f11326911ed97c0df9ebf9ba71dc5011d7bbf5a94389c0ed2c80d7870c/2", "51f737a11ae2dfc0b22d055d19624137e85ef691cf7ca4c9c506dc5ffdff6cf6/1", "748cda3878e8e885c9d4e779bdec5bc58a2d851fd216b35a410fb29ae5e1a496/2", "496168ae53e1b35c6c111941c782525680c98b52685cd23e18b6b5bf8f478d0b/1", "de3d4f58047e823865f138d079f11404f6cea8d4713af2a9933c536a1d98b44c/2", "c70e1e00b05cc48251150c155756e9ce524135d79147521021602bc161ebe179/1", "34d6bb379382280c05fc7e2a4a3dbe6147068abe419ce3629236e61e3c201677/2", "5e14139a792b7a8f00a27d92c33b150f0b04ec4f0330355729c6ffccc921a3d5/1", "8da6fc950dc931ff8d70a5c2af6ced64b325b2ffb755d3b04a9e1a51c510642f/2", "7f5b74c30f6f50f39915cf5864b4c750642116cfb9710e50d17d1161459912ca/1", "673650f936cb3b0a2f93ce09d81be10748b1b203c19e8176b4eefc1964a0cf3a/2"] }, { "id": 2129, "name": "Task Assignment", "solves": 120, "attempts": 127, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "A company has n employees and there are n tasks that need to be done. We know for each employee the cost of carrying out each task. Every employee should be assigned to exactly one task. What is the minimum total cost if we assign the tasks optimally and how could they be assigned?", "Input": "The first input line has one integer n: the number of employees and the number of tasks that need to be done. After this, there are n lines each consisting of n integers. The ith line consists of integers c_(i1), c_(i2), …, c_(in): the cost of each task when it is assigned to the ith employee.", "Output": "First print the minimum total cost. Then print n lines each consisting of two integers a and b: you assign the bth task to the ath employee. If there are multiple solutions you can print any of them.", "Constraints": "- 1 ≤ n ≤ 200\n- 1 ≤ c_(ij) ≤ 1000", "Example": "Input:\n4\n17 8 16 9\n7 15 12 19\n6 9 10 11\n14 7 13 10\nOutput:\n33\n1 4\n2 1\n3 3\n4 2\nExplanation: The minimum total cost is 33. We can reach this by assigning employee 1 task 4, employee 2 task 1, employee 3 task 3 and employee 4 task 2. This will cost 9 + 7 + 10 + 7 = 33." } }, "cases": ["7a93de4487d26757842e40f3130874d96093ba52e1d7f94b4632b7cfd0b321d6/1", "4d578e6c6ae7109e0aa7dce7ae6b940fb88e1e137c050bd50ef756ee7e481958/2", "8f5b2d501a7041cd82f883eb8ca9c4d4f1c449944cb9e2b316167a33a5414d94/1", "b304d9bb9fd269d0b93e2c8b558a106e283378d45e17d9d9200b4e0401a1ca0d/2", "2f39cb8463e2b377c966efd6f2544670fb5df7e6b374b12e05f0492b0ed9fa20/1", "f03e427c2ce68fc9363598b5a839ec6d9e35b3b91dc84f0598b2fcc14a1d9b30/2", "d8fe84f13f5d25c5a38025c6bfb9ddacd1f36e95462c3e36e97c5e2db19d1d74/1", "1c4158190077967fed4dfa91cd9824ad94f68a188d7f5b00f1637c30554f5712/2", "6c1c90bd9cc6a97522e4ab4c953696eaa6544d92856bf933e1aebe99adb5cc1e/1", "7a877d3f5ba50b0df049dde30f48205be22ff38c1f8813b287098f8ac15ae578/2", "a9755238bc1b55ed2230612c7eae056c1af5753aba26d0d15fc72e02f2676ef8/1", "b0569b6f01daab92cfc5f6a4711bfc6fedf2d40b2a394a1dcecee5993b132c3a/2"] }, { "id": 2130, "name": "Distinct Routes II", "solves": 108, "attempts": 126, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "A game consists of n rooms and m teleporters. At the beginning of each day, you start in room 1 and you have to reach room n. You can use each teleporter at most once during the game. You want to play the game for exactly k days. Every time you use any teleporter you have to pay one coin. What is the minimum number of coins you have to pay during k days if you play optimally?", "Input": "The first input line has three integers n, m and k: the number of rooms, the number of teleporters and the number of days you play the game. The rooms are numbered 1, 2, …, n. After this, there are m lines describing the teleporters. Each line has two integers a and b: there is a teleporter from room a to room b. There are no two teleporters whose starting and ending room are the same.", "Output": "First print one integer: the minimum number of coins you have to pay if you play optimally. Then, print k route descriptions according to the example. You can print any valid solution. If it is not possible to play the game for k days, print only -1.", "Constraints": "- 2 ≤ n ≤ 500\n- 1 ≤ m ≤ 1000\n- 1 ≤ k ≤ n − 1\n- 1 ≤ a, b ≤ n", "Example": "Input:\n8 10 2\n1 2\n1 3\n2 5\n2 4\n3 5\n3 6\n4 8\n5 8\n6 7\n7 8\nOutput:\n6\n4\n1 2 4 8\n4\n1 3 5 8" } }, "cases": ["a4c64615fccc2319dc807e94c8586928127a459d7ca6ffa663c9fddc95cdb166/1", "19e802d267a23d9bdd225586380554d76b27645649a358602efe113e2306cfff/2", "24fcb06b13ba8d4052ca94b8c696fe1fba91ae9ea81b27067b8694f66b0a5494/1", "f19fd2cdae5de94b49ca47150d1b5687d1ef5b3d916e9dc9a792ff077c304279/2", "999dfac4ece5881882a55ca6c4b408bfdfa91db91bdaede5a68ea45e16255d23/1", "6c784e625a7c0771f2a1fc5dfc037b69032d6801f5c2b2f95296805aa58d97c4/2", "2109048ebd4dfd5b6d1c81b26170bb9b3864e9511e8baae4e970c8a4b40bb010/1", "0fe2d5b61b69837451c0b73922d3352e8227bade55226957db277ad459616e77/2", "0519579be67f1f52d9e65366989828b41cfc813ac93196d593b6b042e49d83c7/1", "3b226001a967cf603ac80b36fd397619ccaba7960480e7b4ce33a64ddb149622/2", "0498e5dbc30f6ef0eaed5180e0669b07655632e2a2c231aa0d9cc0472589227c/1", "223993a4ab46163c243cba52cfd0a85a461d8ecd9c7b63615b27d4f27316fb36/2", "4ba12c290e9bdfe5622ccdc4cfc00e7579fbb227617c4b5c77af266197f014aa/1", "b1aded122ae8008b4ac0f4194b6677d2b3a6318f8ae8c27715e95225be011609/2", "f9e8f5c86cea215fce4b407d827d4b88b6d7fc2c13a917740e685c7e1e1dae04/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "5df4438681aabe62d770c0736c2748481cc57885e2c867096c2ee1a94dd6cdf8/1", "8cd7cd376e72e2d8cd80152a283201c1a306d79a861879711163b6f2f830eb02/2", "e6b71c52fa7995e90b51d0b63675e1ed0eb25a4275b1c31838b8d164c263ba2c/1", "4f601aef28c7d2840097f121737afa0475101fa6ecbbcb9465196e6d58661d49/2"] }], "Additional Problems": [{ "id": 1087, "name": "Shortest Subsequence", "solves": 937, "attempts": 1226, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a DNA sequence consisting of characters A, C, G, and T. Your task is to find the shortest DNA sequence that is not a subsequence of the original sequence.", "Input": "The only input line contains a DNA sequence with n characters.", "Output": "Print the shortest DNA sequence that is not a subsequence of the original sequence. If there are several solutions, you may print any of them.", "Constraints": "- 1 ≤ n ≤ 10⁶", "Example": "Input:\nACGTACGT\nOutput:\nAAA" } }, "cases": ["4a1b85abace8b931f5a5635a0a6dfd417e5938630def88acf90aa64b9bcf0e64/1", "3fde96e7ab0ca122ca4587b29e6b4efaa9f4139b989a88eb81676762bcde0e74/2", "eccb72769cb357c30284b10771fe84a768d1c76856486c84d7f0bc5cf6661914/1", "7a9fc81bfa87f98d4c02057045b163d07163373e18cfa9a023c74a0fecef4526/2", "74b52080ce07219220c3af509a172ee1ba88b478ad17f98d747b9a0a9c7d99fa/1", "8111098d919038026875f04b0f4ace480a2d6059e44638ffc0dedfb7f2e33b67/2", "cd791d5bd9dc31e12457c85426bcc9877a9b3e6a605d4a951b87e262b6fd9694/1", "66e57d194f51c66b8319f321d1440abc901ad76b05905ad56911d21592b6d314/2", "ac13edb9e3859d5048ce5904ceee88a285b1774f6daa7f1d2cdb0dff255afcb6/1", "a9d1d3c3dfe2189708d1512a27d6676518267b5d79b9ac23768ae5f89dcec555/2", "c9291892070a8022a53493a32000582f0b4942f1f5454d44fb5ea6abc54cc28f/1", "d40557de7a3af3073de595cdd0c6def5a59a1068c5fd87a191bd57c260c05452/2", "921aef3a1ae2c790a631bfe75f5e53a4668c3c33c3d41ad188c2219a74617d91/1", "70c6aeda8938ca3b65e5bf274c83cbb3971cd7ad786fa4c8704de51368288c1e/2", "766980ae5976b9bebb66d12cfd431d0498b0c740d2b89dededbba15b0b5da5b5/1", "8667aefaccd7bf95a35fcf3c8dff80094f655e9bd5289ec5b03905cf7cf5751c/2", "9d5c8357b2b24ab9b66824ab364cdfa017963264d555a77ee6c15b5ca2f399a9/1", "f1803ffe2988cce21a02aaf224eff25cb70673a72fe2af2cf9a9447b940bcbc1/2", "9c0d2b818d402e1399327a55a458a49b31a03cc1fc89187d3ef9295539a2a5fa/1", "1673598f074aafbfcfddccad2ccafb507ba3626a1c8982caf0b32d08a0f195c6/2"] }, { "id": 1146, "name": "Counting Bits", "solves": 1025, "attempts": 1320, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to count the number of one bits in the binary representations of integers between 1 and n.", "Input": "The only input line has an integer n.", "Output": "Print the number of one bits in the binary representations of integers between 1 and n.", "Constraints": "- 1 ≤ n ≤ 10¹⁵", "Example": "Input:\n7\nOutput:\n12\nExplanation: The binary representations of 1…7 are 1, 10, 11, 100, 101, 110, and 111, so there are a total of 12 one bits." } }, "cases": ["4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/1", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/2", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/1", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/2", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/1", "2e6d31a5983a91251bfae5aefa1c0a19d8ba3cf601d0e8a706b4cfa9661a6b8a/2", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/1", "a1fb50e6c86fae1679ef3351296fd6713411a08cf8dd1790a4fd05fae8688164/2", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/1", "1a252402972f6057fa53cc172b52b9ffca698e18311facd0f3b06ecaaef79e17/2", "2e6d31a5983a91251bfae5aefa1c0a19d8ba3cf601d0e8a706b4cfa9661a6b8a/1", "238903180cc104ec2c5d8b3f20c5bc61b389ec0a967df8cc208cdc7cd454174f/2", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/1", "54183f4323f377b737433a1e98229ead0fdc686f93bab057ecb612daa94002b5/2", "4b23a89aacfcc2bfcee6035b258e80e734d6ebb7f8347a74e97f7d35a7c1f08f/1", "90b909cd9dbb51ab99f7e3dd6e29bb256fe95a4d9e343306662cf7ecb2934e0e/2", "835440084e4cad61ec51cf294ab6962b45165691f03f2660e3642fcb9d696a7d/1", "0fa2c2f8a28b2a65635a3fbaf25fb8e013bfe23e9bfe4e8e141a849131cb8af0/2", "4914db7205af3948c84a376b7197b12a59e3521f16ae28cfc405adfb7ebbdf1f/1", "75ef62b62519439b60205cf65f926ef1571cb06cd107c221020bbf52824b5200/2", "73997d3543c9bd3f8291ba6a15c15eb9a6086bbb01a8c2a3a166c20cf30a0fcf/1", "7c468a3723e8f71fe5ff189852b50ab6eb32e1abfaca84a70d9d1a63f34ab624/2", "fe4049fca2bfededc493fba8acba46de85816ccb933a612b3d05246b2594ce8b/1", "d7a4d3780d7b72218b55f2033f4bc99b4ff45245ef07378d7d7bdcf0e79d995e/2", "3c37c4a033ef2db4e97403979be49d1729eed4d0ff1129f07a9752cd8b53ffec/1", "16c2d90eb6eeec2337b99bfe0869da71034ec04bee7c18cb60e79372d5bd785a/2", "c9f5b01b3af44311e34bf3c194cbf2e71aab03592f31bc2b97c575a43d59a63b/1", "736d78c8f4edfc14b2ed843bb9ab92245fa77925a0d60e412118cf58e8371958/2", "5836d1b35244fcd11850a24e9f54a7f170f02398ef135bd0e6591373ae6b59cc/1", "6af3ef00852a7a6af10d9ede717e79b52e6a35cfaf6115f513c0d16a9bc5d652/2", "8310d14804655648fa5bf29d81644cd9e3cde442562c11d7d18318cedcd5f08c/1", "c7fcd42be8d52533bb5cd610066f42510c1ff15c28bcb153a5809c4fd752dd63/2", "9bdb927de8a0a39cee716776fa76143b15ca2576548728829f4400ea54a59647/1", "31beadb279991fdb45a02f6504f4444011a9f64f030bc0780639fcb5ec9b8a9c/2", "2996c47df76aa975102b7bb81388c29e3f8c46cc2d8eec1ba1c515b838d049bb/1", "532dc4281aeed9ad57104c310c45d1b772787382e4e848f72c131b751427d7da/2"] }, { "id": 1670, "name": "Swap Game", "solves": 448, "attempts": 597, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a 3 × 3 grid containing the numbers 1, 2, …, 9. Your task is to perform a sequence of moves so that the grid will look like this:\n1 2 3\n4 5 6\n7 8 9\nOn each move, you can swap the numbers in any two adjacent squares (horizontally or vertically). What is the minimum number of moves required?", "Input": "The input has three lines, and each of them has three integers.", "Output": "Print one integer: the minimum number of moves.", "Example": "Input:\n2 1 3\n7 5 9\n8 4 6\nOutput:\n4" } }, "cases": ["dabfafef3cd0bd55c7c1e1163a025fbed9ea7206bbbbe67bdec624d71b9ad78c/1", "2e6d31a5983a91251bfae5aefa1c0a19d8ba3cf601d0e8a706b4cfa9661a6b8a/2", "e5f35b515acc3284e95af2441e183535307a7691114c09ac319a6580fa673ef2/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "3933e44399df5fba30716a58f5521f91c5eb8b2d361f46756f4365a6f98a2e17/1", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/2", "ffd1721cb0b3065d5b59b1f3c7744ee04bf1c55e4d67471bbbcf022b58f70658/1", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/2", "cb60032f36fc572a5dcc5dc7b0731b158b490a9348b677a8c8bc98b8a249cd75/1", "2e6d31a5983a91251bfae5aefa1c0a19d8ba3cf601d0e8a706b4cfa9661a6b8a/2", "e6ba81e4f29b706e8d881484a96f834e908e80ea319d0d527ced6c24db285462/1", "2e6d31a5983a91251bfae5aefa1c0a19d8ba3cf601d0e8a706b4cfa9661a6b8a/2", "6744d0b5f0f360aa128a41c2994838b46946ffa4120dc361cb49cc838f07f1e8/1", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/2", "84623a82370feba7b7c587766489e3f25c7590115994d4688a15eacd08530766/1", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/2", "bddfc0c7833cc6489f005bdef568648510748ed5e70f8d56f6e611050c450040/1", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/2", "d607387499bbdcdc8327f61e739dc3b67e4d98da57d8167b4b01d83f6b29c23a/1", "25d4f2a86deb5e2574bb3210b67bb24fcc4afb19f93a7b65a057daa874a9d18e/2", "e141900c3d7400fb919da5257d2708c66ccbb7433a005f7a4ac5914019b9c455/1", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/2", "4b9a8784d84459aa2408e96e300a070c460ee56c8d235cd5f5097d04b3255dd3/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "503860a9c8f34edd42d20dc1774ca1fc82192caec6b677e42d1b97aa938b4962/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "7ed03ae13fe06f0e65cb1584fd47e333571c9edd932f8f7997b4b7d6eb5fddcb/1", "e6c21e8d260fe71882debdb339d2402a2ca7648529bc2303f48649bce0380017/2", "b9e038e91b47eca83d868e3ee788f831d84b5b5ac1f44bd22bddf5e2f9448109/1", "238903180cc104ec2c5d8b3f20c5bc61b389ec0a967df8cc208cdc7cd454174f/2", "967d414e27d59dce5732bfc872066ddcc4adfd6df19217747b10330fbfebc3f1/1", "238903180cc104ec2c5d8b3f20c5bc61b389ec0a967df8cc208cdc7cd454174f/2", "c40d23d3c49e9a7b379358191c06c4d3064ca4463847fe60d358198e3a7ff072/1", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/2"] }, { "id": 1134, "name": "Prüfer Code", "solves": 426, "attempts": 453, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "A Prüfer code of a tree of n nodes is a sequence of n − 2 integers that uniquely specifies the structure of the tree. The code is constructed as follows: As long as there are at least three nodes left, find a leaf with the smallest label, add the label of its only neighbor to the code, and remove the leaf from the tree. Given a Prüfer code of a tree, your task is to construct the original tree.", "Input": "The first input line contains an integer n: the number of nodes. The nodes are numbered 1, 2, …, n. The second line contains n − 2 integers: the Prüfer code.", "Output": "Print n − 1 lines describing the edges of the tree. Each line has to contain two integers a and b: there is an edge between nodes a and b. You can print the edges in any order.", "Constraints": "- 3 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n5\n2 2 4\nOutput:\n1 2\n2 3\n2 4\n4 5" } }, "cases": ["eca9f6da0938f075b27f937cd6fed9ba1124d5af2063591d03e812df4e649d2c/1", "6bf5b26460faa39d252201bda8dce13241e97bc84a8c0ac83b986fe6b76504d8/2", "3a49ed0661335bb24706865f6765b4e1a65031302666fbbff98648c4e36ad729/1", "5b345fe95fab57916e5ca0a0e7a69d03aa2979aaac56f5960ad520ad6396455c/2", "51d396b52f23d154499e41677475a2d54a9ea539a875289497fc4df89ea2b097/1", "4e7ac601bdbf4b5c7d12385cdda86a6e156133cd1379a315befdd2605402da48/2", "f39cd3626e6a2bc9d888237fe2f922670b4b48138dd4003b398a188be7a11a50/1", "8926341932f9e61db6c69f9f2eb4495a381b6cd227b183f1f4b15469bb9f78cd/2", "02b1677ceff05f6e5555cdc84e38bd49a162bbf125361646a43e709775645292/1", "a9e4748c8fcfe440fbe0d472be45af3dad3a266bd8ae281975594494ae927928/2", "f4cd3872e5da46458e70d1cf070183b1075a949b6215db9100462c55cc18d94e/1", "981170e2ad48cf8bc72dbc2aea2df7b1a7d116c5f73a0da8dd4d9276c5767db0/2", "a320a96b8ed3f7f13ec471be6fd93ae7db69f0c97622df069987b77f5f70d6fe/1", "f73569c237c86c8dca8545ec2412d1df2f4b837c4e074010249848d76c34929f/2", "e6f600b5e6534dd3325e4c019ae902dd048fa92db0bbae3bf2dde7ff3fa99201/1", "43a6aecde0b4818cc1a0db6367c76566f88f2e86ebd89caf4a0328c49643b31c/2", "72475d76dfbc862d5130225897dad13363a7888e848f2c1622a3f8b7591a4746/1", "f076d776c80515895011159fb6cfece24f32ce18721e5b48765280307b81056c/2", "d2efe45efc507a0042b2dfeb2b07140f1a04b2804d73e3737b4fe0aed20fd685/1", "0907ee977e0b4505ebe12f3a57d35ef10d1f106a405eef2d2fea9837fec6db2d/2"] }, { "id": 1756, "name": "Acyclic Graph Edges", "solves": 584, "attempts": 618, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given an undirected graph, your task is to choose a direction for each edge so that the resulting directed graph is acyclic.", "Input": "The first input line has two integers n and m: the number of nodes and edges. The nodes are numbered 1, 2, …, n. After this, there are m lines describing the edges. Each line has two distinct integers a and b: there is an edge between nodes a and b.", "Output": "Print m lines describing the directions of the edges. Each line has two integers a and b: there is an edge from node a to node b. You can print any valid solution.", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 1 ≤ m ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n3 3\n1 2\n2 3\n3 1\nOutput:\n1 2\n3 2\n3 1" } }, "cases": ["13e5b114c8d17a105b07adb1b94223b93e28e5dfc3c31e86cee0e8fb600a37e3/1", "55e9b916596ef4478928e246d8dd44e4553f98e77e5bc6f7ce00838ad1c5d983/2", "d6f7ea566c8e3ff1f55884d1aba134500b1e289c91404a5435f39893250c775e/1", "5fbf160d2184c7c7c979c82482f161a777c0d1be51b5d680b66063e9e2c64a35/2", "7219e739ac6abf6a39e141de2cb2077c9232bf435e87f0480dfa0c026523e347/1", "f251ddc12234e0da8d3b778bd0f7463fb477f16f47757f5617dc8b4ff4d4f14a/2", "d585766554a7e0f30cb173c687bececaf21fad1b7b0707f036855ad326857a00/1", "6e9cde863c3fa2eccf09562af38aae26e3e0aeed8a93eb252dbee44b229a039d/2"] }, { "id": 2177, "name": "Strongly Connected Edges", "solves": 234, "attempts": 257, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given an undirected graph, your task is to choose a direction for each edge so that the resulting directed graph is strongly connected.", "Input": "The first input line has two integers n and m: the number of nodes and edges. The nodes are numbered 1, 2, …, n. After this, there are m lines describing the edges. Each line has two integers a and b: there is an edge between nodes a and b. You may assume that the graph is simple, i.e., there are at most one edge between two nodes and every edge connects two distinct nodes.", "Output": "Print m lines describing the directions of the edges. Each line has two integers a and b: there is an edge from node a to node b. You can print any valid solution. If there are no solutions, only print \"IMPOSSIBLE\".", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 1 ≤ m ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n3 3\n1 2\n1 3\n2 3\nOutput:\n1 2\n2 3\n3 1" } }, "cases": ["39e5ac08aad5a42449990274d04bd34c9b3d13bdaa60da51e48b1032439da07a/1", "93ed2bb6f3415a1f027295798afd4db8376042d8291757b7a07695301b8cd885/2", "48e0e8d3e4c7df91a717842163eb4517bf30338392082fae87d90fd29c5e0877/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "a900bb90c6fd63cc4ddbf94fddceb9622e2abf219d7b7d3b9281e6f759297296/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "7cdac5014bb594c47add3cc3ff0765f648c0044b1c54e8f22f0e725d1b78e72f/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "48d32b6e35639eecc25d201a1ac0dcb1f4f6267d465351ec847ce33a79fba891/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "96e469b0ba467744487a8ec1858b846c54bc22f564409a69e1d0e68dcb6e0095/1", "33c0c7e7799e5ab5c67787776b47de82d3cfa5acf89ac9b3f20f9991d1cdfa91/2", "7bd680c09aa382590865511c5b8c6f3d7f83f4e8400a74798171ded93cec7d9c/1", "b6bd094cb71ce7037a18561a8caf4e5d1a07101dc2d53eed5142c2ca945d9cba/2", "d21c383601aaea2eb9e38598f2c9d108bb39748de34ce71aa09cfbf211778635/1", "b9d50e0c29d5d8e607503b8e215ba274802b3b37e6b666b8772d8689b7f10b74/2", "6c4da1a9d8735ca353a4fe5e31d08e6651965c1eb3280b5add77378567a83e28/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "9f8c77111b1b84705a3945519f77a7d6bc288bb044b2175300f6692e973a5fb7/1", "c0080b42d34568d1f679501a7a081549ca6c40476193561b60f6dea1651899ee/2", "a945dbe3f39da79d8e9093a0c983c45aaff9b6caa419ce89c0385f683d3a7b1f/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2"] }, { "id": 2179, "name": "Even Outdegree Edges", "solves": 221, "attempts": 258, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given an undirected graph, your task is to choose a direction for each edge so that in the resulting directed graph each node has an even outdegree. The outdegree of a node is the number of edges coming out of that node.", "Input": "The first input line has two integers n and m: the number of nodes and edges. The nodes are numbered 1, 2, …, n. After this, there are m lines describing the edges. Each line has two integers a and b: there is an edge between nodes a and b. You may assume that the graph is simple, i.e., there is at most one edge between any two nodes and every edge connects two distinct nodes.", "Output": "Print m lines describing the directions of the edges. Each line has two integers a and b: there is an edge from node a to node b. You can print any valid solution. If there are no solutions, only print \"IMPOSSIBLE\".", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 1 ≤ m ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n4 4\n1 2\n2 3\n3 4\n1 4\nOutput:\n1 2\n3 2\n3 4\n1 4" } }, "cases": ["d483a34a55f06b945e04d6989c5e10bb64bc858708025127cd9872130ca149a9/1", "495852a07e0a813bd37a39a3600ac010d27bf156bf5f06076ddd75326ce6ca35/2", "d2c34c2cefc7728ba185f312c0fe613a7c1235c58519e46a492edc7628ac7b85/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "a5e58d8819a399ba29440851f49f52360aa1463e72f70d92920ee94f70f69f87/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "e758084a681857df9ef6a8cb864fa5f0b147e8b6260e48a61f16a2efaf1d5f82/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "681e8ce88a136d36596c7c7dadd32f4feb6de486366c0cf1a443ac2d76b719cd/1", "2022c2f1835fc544e0ee724cc1f6c98565efc7c9aa0b3b980f45d6559e9a932d/2", "7ad84b78647b9eab3aebbcc69cc4e057a8090058ba4b0b151828533bf832c50d/1", "b5dd33d49d5126926ad4bdc8227133b5bdb3cc4d11ef05bc9eb731dc108ac7bb/2", "ff5cb1469dc64e71726b96be45a31bd46f97b63a08424aec110e5c971df232cb/1", "2002f76c78fff6020ba1a170891fd16fcf4d9f6b9d9cd0ac1279aae733a25884/2"] }, { "id": 2422, "name": "Multiplication Table", "solves": 510, "attempts": 562, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Find the middle element when the numbers in an n × n multiplication table are sorted in increasing order. It is assumed that n is odd. For example, the 3 × 3 multiplication table is as follows:\n$$\\begin{matrix} 1 & 2 & 3 \\\\ 2 & 4 & 6 \\\\ 3 & 6 & 9 \\\\ \\end{matrix}$$\nThe numbers in increasing order are [1,2,2,3,3,4,6,6,9], so the answer is 3.", "Input": "The only input line has an integer n.", "Output": "Print one integer: the answer to the task.", "Constraints": "- 1 ≤ n < 10⁶", "Example": "Input:\n3\nOutput:\n3" } }, "cases": ["4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/1", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/2", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/1", "a1fb50e6c86fae1679ef3351296fd6713411a08cf8dd1790a4fd05fae8688164/2", "9d272f1f3e92f7c5efdcfdda0ab92facccd98c340be8be09064060503fd167e4/1", "4934a19798edb5e0f075ee575e9672eb0eefae0aff676edc7269668c55cf2f22/2", "e6f943e38e4b9b9b96f50cef63cf12c0933f03f2b7053a9c36b6721dd143b4a3/1", "166877be233d4f304b139f32a7adccc515c91e6ba25c671f70282ae9ff5a3d0e/2", "14d01c6abd3f99f28e729fc9d1b8a0e5a76d4db6e708c591ff534f605e8d2d92/1", "83ffde406399ff40a1c115a072cf0d455c7b1797179f29e6f2e50e93756305bf/2"] }, { "id": 1142, "name": "Advertisement", "solves": 787, "attempts": 826, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "A fence consists of n vertical boards. The width of each board is 1 and their heights may vary. You want to attach a rectangular advertisement to the fence. What is the maximum area of such an advertisement?", "Input": "The first input line contains an integer n: the width of the fence. After this, there are n integers k₁, k₂, …, k_(n): the height of each board.", "Output": "Print one integer: the maximum area of an advertisement.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ k_(i) ≤ 10⁹", "Example": "Input:\n8\n4 1 5 3 3 2 4 1\nOutput:\n10" } }, "cases": ["b3d27753d290a4ce2e844ac6e8c1a172df6c1426314089a1db2afb7ad2ceb68c/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "df297b5fc75833f4540c3e8a1d48bf3d1cbe39720952b6867470e2d313f62002/1", "f4ccd05b3271c386ee55d9876c7450012a3b361e5065c09dc22075e38b3cc35c/2", "8a3fbf51431064373de4648222c041f83407271ba9b9bc5e8bffa1e44070f105/1", "f4ccd05b3271c386ee55d9876c7450012a3b361e5065c09dc22075e38b3cc35c/2", "f0392a2b81c1310a3fd377616780b182dcc1de223353158f2b2fcc56f13a9386/1", "68ca3fba3b7e864770cb61aeb306d4bd4354b68ab4dd38450860c5d823e42a53/2", "48c99bf093edeac383365c19ef4a8bfd8956a1d8f4c149bc75951090a048533c/1", "6e2ae11dad0616f66bbb2b6e6556f580bb987fd911d7132aa6bee2bfc7cc7b52/2", "19d069a1577bf0ca04ba13c31dabeb8de05f9e8d9fdc6548ed48df252403f3ca/1", "d43574be921c54215a1e05bb2fc0c1a4b63dd2aea4bbfd5b9ebc11a2685943e2/2", "0be5594fa61710760bd37b2df0a27dfcafac84e8d0e0f9184a205ed44ece3146/1", "e6ff8a06e596801a9f34d7832019e9b16da312c0bb0b99ec5d1fa29b40ca032d/2", "98acc55246bb1e4c7a1327c0698607a0cd5d380a527c354433911a7615b3b4b8/1", "e6ff8a06e596801a9f34d7832019e9b16da312c0bb0b99ec5d1fa29b40ca032d/2", "200cbdf8df2e4344e53df71dacf196d8bbdfc6a9ea31ec6a4fc506dbf9cf6689/1", "13fb483ca5108b51200756992ab80cd8c4677026f03b6dde9497f514bd5b3141/2", "5bddcf756d1c1f8c6b7c3ccec9ecf6e7abbd97dd6a0a9c8ea03a1199b27b1d95/1", "5c2d3ec8ddca459348470afbda1f2d5a8e955d31317600cc323f36da1e7c3382/2"] }, { "id": 2186, "name": "Special Substrings", "solves": 172, "attempts": 188, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "A substring is called special if every character that appears in the string appears the same number of times in the substring. Your task is to count the number of special substrings in a given string.", "Input": "The only input line has a string of length n. Every character is between a...z.", "Output": "Print one integer: the number of special substrings.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵", "Example": "Input:\nabccabab\nOutput:\n5\nExplanation: The special substrings are\nabc\n,\ncab\n,\nabccab\n,\nbccaba\nand\nccabab\n." } }, "cases": ["87428fc522803d31065e7bce3cf03fe475096631e5e07bbd7a0fde60c4cf25c7/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "5061fc538e362d8314436b5e03f7c157a7e544ff6cef6667c3fc009d3f366d71/1", "80318278668a65584b64df8779e86dd61957427ab38d04b4138cfd41ad19aeb6/2", "78343ca5f24475d75488040ceb06de4f0de61446134a81f59290f09e2a8a2000/1", "942b4856e340af964df8a12f8092d95c62275c48f061d724cbfc97b499ba78eb/2", "d05cd318dc695e11cf10beefe442d0a4cb99058d3694c9de83a8a71cca6d7968/1", "5ae0307a36b47113e21e162eb0763b99a5ec4a707164fc97170fbbd3167b5b9a/2", "38526586fea5ececad71cec3b9ca41921681ca81fa7e0429498cf2c01f73d9a8/1", "04360efb6c61afac2860a7d886758b7c18c1c3bfc470bb21c52088d114d979b4/2", "7f3a2d0068a0c1c11987813a9e0091f713d5dd11917ff185ab276c3bf6ef550b/1", "1105f3d627c8c9ddc53f9a8673b4894de0839bd76943390b0b352a5827fe6928/2", "f26c25690a0058d4b5eb3dfbb6903c9b66c556f88a52637c81a30f41833bbef2/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "7dd7048462d11ba952e5cab5bd04edea484fb9a5a0f9722577f061bed68d65bf/1", "2e6d31a5983a91251bfae5aefa1c0a19d8ba3cf601d0e8a706b4cfa9661a6b8a/2"] }, { "id": 2229, "name": "Permutation Inversions", "solves": 201, "attempts": 223, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to count the number of permutations of 1, 2, …, n that have exactly k inversions (i.e., pairs of elements in the wrong order). For example, when n = 4 and k = 3, there are 6 such permutations:\n\n- [1,4,3,2]\n- [2,3,4,1]\n- [2,4,1,3]\n- [3,1,4,2]\n- [3,2,1,4]\n- [4,1,2,3]", "Input": "The only input line has two integers n and k.", "Output": "Print the answer modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n ≤ 500\n- $0 \\le k \\le \\frac{n(n-1)}{2}$", "Example": "Input:\n4 3\nOutput:\n6" } }, "cases": ["f4a8ae8e74ddfb896a256de4e3099911dcaa6a9302591713898069b0bcd6e3d7/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "4516f6eaaa675488778d6ca333df14bc68c27fb7d7b8015073220d4571aa9c51/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "dfac347cb71ae693ba8a54687f7112aff24ec67f88a3c66f69a7bf968fa2ac16/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "f447e635ef60d86f4591ef150e99d027d79600a624955da19c447d2e7f957fc8/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "a279f0fe018bb1305d69ee251cd2a29919d20c910b86e3730fc1b857dd3c573a/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "ece3d232c1ca9ef8a80b6fdb1585b8f5cf653b9dd023b0521c8da64db859ffac/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "1dc008d228c479a1728c002e3b40df8ccf8dc403fe358057c73c896b9885480e/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "fe3d205d7028d2540e89fe25dadf5834ac29d9cd9e031da51dbbabba9139fa90/1", "e2d1b6647866a6cd8fc5d8a8559d4e960a6c1f5e442c4b3d5af3b1743e47b7c6/2", "1c42ea2db4dad9e0538978948f3976fdeb17d0eb04a4741e3c2e23118a68bba4/1", "2d2d220f91ca9d5eaab568bc677b182c0e59f2585dd3c65a8c3987dcfe08e35c/2", "3fb035464308fc2be8dbd386c840f70e8d8ad878675d00cc57807adbe1e52f5c/1", "9b30732dd78c3b1d8169244ffad87bb247cbb3e71e43819ea5c7d917e9bf53f7/2", "2de67bf37e837ced4611983739b1aedbf1d6449a999886893b8a370d9f694d17/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "3969af5b6a19c32f726ae3f898b50aadf5d4c74eaea03440d5134a462a67026a/1", "fdd52fe57b428c024c9f235b6476aeeec55f48e48b31ae651b0c129b2c0ea24b/2", "910c14b7157e104c6d92f41d9a09ffd22c6c4725460a22e78f68e1906ca2fa64/1", "d93777fe1d847ce007596f1fd09776151243d72c7562f172e8ec1d398b5bb2e0/2", "33aa8273e296001238747482ea9e4723b1924415829f7182bfa3c7d123f25c76/1", "640f7294d00f3593dfc06f490f7d411250384d2e9c1586ece00581a9ef123ae3/2", "2395ad1b1d5b7283597b73b4ca99d9f5beddd9d0b6432d6a955bbad97c64f5b5/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "b84fd368b09846ce4a8816b29ca7224b84632b1c85b536ad1b189c5de3865977/1", "23e8149fe5efa86eb76adf3846ac30b1724fdb8cd38f9be157bd3f38ec3324e7/2"] }, { "id": 1655, "name": "Maximum Xor Subarray", "solves": 585, "attempts": 636, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given an array of n integers, your task is to find the maximum xor sum in a subarray.", "Input": "The first input line has an integer n: the size of the array. The next line has n integers x₁, x₂, …, x_(n): the contents of the array.", "Output": "Print one integer: the maximum xor sum in a subarray.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 0 ≤ x_(i) ≤ 10⁹", "Example": "Input:\n4\n5 1 5 9\nOutput:\n13" } }, "cases": ["f25b82bfa9ef62b6c027850a87b71331f26c612ed8623a7b199339d231e45a59/1", "606b7d0891b4db74edb21c241c302f298bf6ca4a6158deca6b58c15c950ab5f2/2", "1eff405c8a1015344b2c14321f6290eeff953570e17f38b83e5c23f030e4b5e9/1", "bd5fa6e75f0ddfcd9ff32e0a2297554cd81188f177f14d7ce416310efa0b5c77/2", "612e5c1e37da63127f7fab4b59042f2d2b97a3d39d9a7a563d0da8868cc3d892/1", "076320a2a08267b4c026d06573bba408ea68841e73cdc20e62cce59de165ece3/2", "1765fc575f8bf592b5516be53f458437efebda52422ebfb37bffb65b22cdc980/1", "d9e68dfadf739b986ec5a0c08d3b8ad973b7c1c019a451e5abd6cabdf0c7907b/2", "3b63a5a1fde01245bb5077a76d6e81d00cf3c3b9835a03b2ae676798dee31707/1", "b7ec1afbbde702d54bf956dc6fed360e503f5f05619486935bee6840e4447364/2", "699631d4bcdf1fa2554173d841f20bdd7df3c67b2d0074b7cfe929a57ff3adcf/1", "45fcba4b16b7f3df281100aaf57f91c3cb62e9a8f390590d97aaf29cbfe376af/2", "f5f4ab442ebba497e0249514182e5f414c97e3aa2cda1f04b7d8d1ddb0263349/1", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/2", "ad0fadf63cc7cd779ce475e345bf4063565b63a3c2efef1eebc89790aaa6acba/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "ddd8d56601e7ca3b715bd54c3467e8d3635e5c4fae8dc0b52fd1bad0a635ab70/1", "37ad7b06fe6daa0f30354b236b1ffe903351929ea885bc14593629a8c68226d0/2", "bb9b7cc8ae0273d68a75191698ba216f992a1fc02e0e02555aa445aa258808d6/1", "e40be1077b3c2ce8a34fe0cb686c984191d52feb4726ffc4eb615527d0b0e3f7/2", "7e5b2c9b7c3baac287fe6c8b1de24af99c8fda5a21a9c2318fbf6e0f189d0311/1", "643b95667e20cb60d65b10fbf2b1d9cfe8fc726ff4fdbe0e9c2745710294855c/2", "fdcb27265764b2a73c62380d364aa177b18028a2d6fffe621bac5a23affde265/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "059ddaaaf5b1668dd6dc3ac533d2761ec42686ea0a4485281a252d330ade633e/1", "37ad7b06fe6daa0f30354b236b1ffe903351929ea885bc14593629a8c68226d0/2", "a5107c2e97459c313741378d5d565ac4faef30c1d85e9eb8d764dddb16a6d1f8/1", "1a252402972f6057fa53cc172b52b9ffca698e18311facd0f3b06ecaaef79e17/2"] }, { "id": 1664, "name": "Movie Festival Queries", "solves": 275, "attempts": 317, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "In a movie festival, n movies will be shown. You know the starting and ending time of each movie. Your task is to process q queries of the form: if you arrive and leave the festival at specific times, what is the maximum number of movies you can watch? You can watch two movies if the first movie ends before or exactly when the second movie starts. You can start the first movie exactly when you arrive and leave exactly when the last movie ends.", "Input": "The first input line has two integers n and q: the number of movies and queries. After this, there are n lines describing the movies. Each line has two integers a and b: the starting and ending time of a movie. Finally, there are q lines describing the queries. Each line has two integers a and b: your arrival and leaving time.", "Output": "Print the maximum number of movies for each query.", "Constraints": "- 1 ≤ n, q ≤ 2 ⋅ 10⁵\n- 1 ≤ a < b ≤ 10⁶", "Example": "Input:\n4 3\n2 5\n6 10\n4 7\n9 10\n5 9\n2 10\n7 10\nOutput:\n0\n2\n1" } }, "cases": ["277af9877dd1976f181c5e9a6b3091afb0f964c66cbddfd60089fdc231566889/1", "61d735401c23e8295a439e3de504f8b339477acbe4d8142aee108cf7eb55eb91/2", "59f9460791466f7e4206b786a0c812a16b584599340e9d390d071acd4e7d06aa/1", "399e2f9385d4336c449fcad0da3941073f2a8a3f5916c8ac63e06cddf57d099e/2", "9aa490df3b4a09072402d8f868d6d3d7a41830ac2bb5cda6c37c28db02f763bf/1", "24748c0a41a45d41dd59827f8b908deb254e9e6671374fa1e52810444283aa93/2", "798dbce271ba1b8baab75d810a065451a1242523db1c09af25625d2c18b2368f/1", "de911684b149a263a1cbbc9df6a37b2f6f46dc10c8730c5689015b9869d3fd04/2", "59db6619079a4a3a47983826dd49cd481651f92032cf0779ba2b31112a40f00c/1", "47261d6c016fd1e1cdef5913ae0347e7069d5a2717faee5c627a678f2f7305d2/2"] }, { "id": 1697, "name": "Chess Tournament", "solves": 334, "attempts": 386, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There will be a chess tournament of n players. Each player has announced the number of games they want to play. Each pair of players can play at most one game. Your task is to determine which games will be played so that everybody will be happy.", "Input": "The first input line has an integer n: the number of players. The players are numbered 1, 2, …, n. The next line has n integers x₁, x₂, …, x_(n): for each player, the number of games they want to play.", "Output": "First print an integer k: the number of games. Then, print k lines describing the games. You can print any valid solution. If there are no solutions, print \"IMPOSSIBLE\".", "Constraints": "- 1 ≤ n ≤ 10⁵\n- $\\sum_{i=1}^{n} x_i \\le 2 \\cdot 10^5$", "Example": "Input:\n5\n1 3 2 0 2\nOutput:\n4\n1 2\n2 3\n2 5\n3 5" } }, "cases": ["9bace3cf6ff7ae5107f1e4c8617b09fa97bedf0630c0348038449f1477f815a4/1", "ea6dd7c00d1ea9459726bf2f90d65667650fd896212c8c968992db08f8dd0032/2", "e1eb83fb8bc56fe22c7ad98a58bfeb656eb19cc257ff2c436e5001356171d4cd/1", "a6073d13009ac3154e6beaac47e336bfd6f19a443804031b664ff75ec5efd4e8/2", "0859f8b2565e737cb72b6b638e7c7dc338455339449bc1b3a90302811d70a720/1", "969db4b91d1f26fc2136d8626cd7eeb7dd44a3cb9d21b374e4e88ab1cab3bc6b/2", "f1f586403512b8ea7f82be8a93d4ad33da0c3b385640895403da9f1fdda909a7/1", "cb97a8ecc9749a89b2dde63404a199a7105b12cb99175332687b235bcc9993a9/2", "23ef36cf88bd028b0c6653cc7e4f62d46c10048c74334a8a4b599d1a54249cd4/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "fe1891a544e4d418ad70c098727ce74565aebb2e24f8e2a97cb7353dae62b161/1", "2fecd24a31aa2b1ac7d6d625ec3dc819c6278ec9834c1947eea441179f803135/2", "0269f317f27080a5bef0392d3e0ac62a51f2a61ad8d04231df1fd2169d1a47a0/1", "f986224fe578695b217945cf6afbebda9fecb20667b67016cca00d36f8f1fcf7/2", "ed577eb6fed27b40ba5eb4bc9b01a54fb094b189c803bbfd27a7de0112dc0277/1", "7e53e4a4946b4b360565cf129786888b4c108106a90fa6b56df6ce649d6ebb2c/2", "be3d80344ae9a8d6ab2724a70c208c097b3add360737e1dee91ce43bd342ba35/1", "6e0066d8bacc2f3dce02aebc824cd2389900a058adc431aea04427d0f8c93a12/2", "0e4d28453e13d9a8c1600aad9754166e01e214f73c789f46172802a88758cce8/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "62d8a21803283e4d4b31cc3377bc1ef43bd5ffd16929fc19a26ef28499026e04/1", "251723cc6c9c822d62035613ab68f96218a9781073906584db634040e90f8a6c/2", "ec4ec82b396d69a6e61542ef029a7373b6df65ad5bee9a0503f4fb8c69d7747d/1", "99d71d354f019e02ae41ed1443b09126229e0a62b720e87458414b548af89dc2/2", "59fd1ae417b03d79cf15e9bba8676c8f030b0cee35b81e871381fdb502aa227b/1", "da0a9e77961a876d44db75dfb158a504ad7bbd10f99aee4ec804bacb1603f450/2", "4cd8f0e803151132cf793ce54c4e5477bd5f481d173201711ec4087944bdb5fb/1", "819d0bef3458519cf6c40045adbb864cdf1885daefcb256b27ad52115cfbc18b/2", "5fcbb3642f73e7582c419965b1d724cfb7c343e651e644bbd15c4be59c37186d/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "0330656bfcb7104ae73df3cc9b7ee0bbed81d467beb7d0c49bbd2271c1b3106e/1", "4239195f5ac7754ffe17c6a31e68fe3d20044460849e2308bd228b2a09786dbf/2", "a13929eaac2649149cda769155982bfbac053955e44164ea72bd27c4c27df61b/1", "10aabde2861a4e08b8d8189a8c781088d72c0e6017604c3af32f7bb00e294017/2", "ec1aff67cc66454209c11a0a3ec0bafd401c669977a83db7d7a3ea8809e73b2f/1", "a7f5dc21f005321f6069e2e43c632e390a9d8cae2b82a63b0c2a12ae77510a5d/2", "aae214a6e38051d1f7298647ffa0cd66d364ec4018ad4c18e5cd39cc4634cac3/1", "4208a63fb674757335a9a9ecf1e5ec85f31bce8df616838b952a94a3f615a758/2", "097d7daedea3a38c04acd12c965714b55915effb9cac81dbb5996895d317933c/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "f85216abbeeb5169726555f3a385c2173e5970368e4e98685f9da042a93f35bc/1", "df5b0213e599743157f1294537518a1cfc2564a184e844cd54fe61ed7895439d/2"] }, { "id": 1702, "name": "Tree Traversals", "solves": 303, "attempts": 337, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are three common ways to traverse the nodes of a binary tree:\n\n- Preorder: First process the root, then the left subtree, and finally the right subtree.\n- Inorder: First process the left subtree, then the root, and finally the right subtree.\n- Postorder: First process the left subtree, then the right subtree, and finally the root.\n\nThere is a binary tree of n nodes with distinct labels. You are given the preorder and inorder traversals of the tree, and your task is to determine its postorder traversal.", "Input": "The first input line has an integer n: the number of nodes. The nodes are numbered 1, 2, …, n. After this, there are two lines describing the preorder and inorder traversals of the tree. Both lines consist of n integers. You can assume that the input corresponds to a binary tree.", "Output": "Print the postorder traversal of the tree.", "Constraints": "- 1 ≤ n ≤ 10⁵", "Example": "Input:\n5\n5 3 2 1 4\n3 5 1 2 4\nOutput:\n3 1 4 2 5" } }, "cases": ["ac4cc93e19295766a5f115b2ebb3bde0553bb5e68e3fe47750e1f4062b623751/1", "4287d334611c4618cf4a09258f759358f2e90db83552c800d1d7bcd7b04dca06/2", "cf7b5fb589f564357543cbe754f86e1139170174ac1d3b5ccd373c2663bda8c4/1", "3d9a9d97312aee089aed79438bf26e2eb1480c171d4f950e2581a62ca18bbaff/2", "053013016912f06bda537b4767d2b82ffe64e1cde01f388a84c08d9f5bf1fca5/1", "bd2f329bde838aa39a96cc87e239c6cf07411bf326c15f9c5f24c6ed1bd06d9b/2", "ebe73445b6fb0d3302a4451933757bf8df9a585da0df6eb34ed19ee9be179eac/1", "ac441b020ec1c0ba7d506788518ada4408030da1087ad55835d1d621ef0f88d9/2", "b8deff77e77313d3d7e073a6eabcda3e55e89b47c5c93cc739f112a3c61a9f60/1", "735f6f989accdf77eb9ae4bc75e5daf252d6cbbd2a23e866c949c3357620a79a/2", "5f25399327381c1b656d2e9eb897d1cf900e695d99a37444c1fdff8c35e88d0d/1", "576c792bda0047817c4a6ec43b3b15527a97ed605856e46864507ed389ea8340/2", "5561ed0ec768b1e8247159327eb345aaa60089a8cee3ede7a46422b38f9dc6dc/1", "2c045c6ec4710d99fd5f2b61a833afe5daf9eef5bf0f5caea453f4d05018aa26/2", "e0f8294dd166c4107955e6726855585a6b66eb6af4103c110288de13f9602857/1", "e9d0f71c72ea4a4806c7fd71ff5501c9cbb1b4086e70c05c55454057c1f25c9d/2", "f0199fc387dff5d758933c74d515dbc08331f9a320158420dc4cbb39f9966873/1", "dc32d41ad43e3844a9816f3aca67f62fedcfa33c2ecd0b8422e0550aa5bd0ab9/2", "41e554566e6ab95fcd9d9deba16a00e11aaa954d1b66f5523f27cbd5dc307994/1", "9c1f102d460cb9a53eeb8bcb4ea00429a7ba06db82b2c74b11e595b894a131e7/2", "33c8ba647f9f7cda45357d38dbfc31dd98afc906c354e60e0b828d1614a06c73/1", "5ad576077b3bf25168496b9459c96774c3024f57ed037fa14dd1bb0062a169c5/2", "a94c13f300246d13287c730804dbc38d5d6e666eff61a4ae18e481688ab10f6e/1", "fce65a7157e06e7a587b48442b2deba936bf667c3d14bb698d5b3fe51a8dde29/2"] }, { "id": 1704, "name": "Network Renovation", "solves": 257, "attempts": 353, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Syrjälä’s network consists of n computers and n − 1 connections between them. It is possible to send data between any two computers. However, if any connection breaks down, it will no longer be possible to send data between some computers. Your task is to add the minimum number of new connections in such a way that you can still send data between any two computers even if any single connection breaks down.", "Input": "The first input line has an integer n: the number of computers. The computers are numbered 1, 2, …, n. After this, there are n − 1 lines describing the connections. Each line has two integers a and b: there is a connection between computers a and b.", "Output": "First print an integer k: the minimum number of new connections. After this, print k lines describing the connections. You can print any valid solution.", "Constraints": "- 3 ≤ n ≤ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n5\n1 2\n1 3\n3 4\n3 5\nOutput:\n2\n2 4\n4 5" } }, "cases": ["0288d42b612e4b1af4f44d8238ebe6f06fe901feefddbbb5c2162c7b577adab3/1", "58e34b49b8c329989ed53b243131f11386722af17f5e748ced3ee4580029270c/2", "5343f9c2066971dcf983947c913371d6f678f159a8ae4da1b9ccacd857ad62df/1", "0c35321c71ee597d9fcac604e0e4bfcb0d48d3a74a4f6e2e282e96c6af224fd4/2", "511d70cf82480fcb3b77023b341ae1e294a0080d00031fbbc84928c18df6287f/1", "7a49ffc0fc791a0a1d69feb1deeed704751a056563c021bc529eefe0b5b3ea69/2", "cf530db719e55d729801c87fb4136f172f9bedd2cd7aab0663ab5830656eb731/1", "36d14743eba1b211722fc0822df217a3fa6864cd936507bd09ebe038809c3ab2/2", "75d11c45dcc7878091d730399c7ba3409c4eeeae944660ee649fd665fc70f45a/1", "e564b927bc53921b8a13bb96b905a6220d41f4894be0e3dec99e0628b99d52a6/2", "ed8e210e6e341895430acabb557389895d09c32b3577a34912d3ac1cf0eeafc8/1", "3124f43713c84d16ed2c285267d3112fc0d78f554fcbadbd347502cacc5170ca/2", "756339ec24fd7ff7017f67513af24ab32ac5ad3d5e0a8bb1ab5bf87d346d9a19/1", "f7aaef029cf0c9b16802579f46145e4f15ad0e702813ae461044031661cb00c2/2", "4cdfb49175a64dc2246efe45dca2a5be127ac6926f217cfc263e73f9518985f1/1", "538e7e0dc5a5f3178f3d8f99685af4d414db3023d5e982405cf71489db5716dc/2", "daf64be0ca4fe060a8fd660bfc1ad9db378447d88f0edb9233e4eb9738e42960/1", "88a3e4fb1c350bdfc3b3adc2312a6ac54b7d30b860f21289d854531a64372364/2", "642bc978218fc0942da76e1521140494567477f264b2abec56391590a217b4d1/1", "6f2e5a450be77b96ddc0d3d2674fc58942f3627eca154e6e73eba53a5f88923f/2", "68ba24fd753d05fc23ba7fea3d170bfc3a18e08c484c5093db3e9a71381acc9d/1", "97039a8efb7224deb66747fada65c0cb206e44cb718c0bebccba4b9e1071c3dd/2", "9f7799322ca0b6c97c0652eafd965ad2d4ecf54bc5ec582757b4b05a108f34cd/1", "bc49604382deb4f1e26074de37993f50da6d7720a1fe5bfc7730249a54493318/2", "bf469bd257a49ec62e24f911ae80b025b7b59236058eea6d44bf5af9fb909734/1", "2c332c2f7dd4189c5af6df0c2fed0925aee500a4d5bd7c1c35219da082ad1351/2", "6157a297f386f6cfbcf4a129220c28cd0e627e1325b44b1168dd8700e25772f6/1", "b85b859792c01cf06f73caee685c7060532fae9b29492321d24892a25595a86c/2", "53a8cd08d9933fad9a1142ef22eb809632b3a0c7273c1e2cd9cd4b48929ec124/1", "6d1455db3a11628af40fde5e5b3bad1fa5c1ffa3c6364881d2b3f471be2e90d8/2", "883c6e091b16d85975ed3f7eb3b18720847ad7a1ae1308f2849c2c13b8607420/1", "fe5cbfd8138245b674409daee1caec02151b0e5ef85036840e83592656fc7516/2", "883c6e091b16d85975ed3f7eb3b18720847ad7a1ae1308f2849c2c13b8607420/1", "fe5cbfd8138245b674409daee1caec02151b0e5ef85036840e83592656fc7516/2", "8d4bb11e6267e1dc33ed4efc9e0671c877a1099ab099f04fdca44d362e866063/1", "e564b927bc53921b8a13bb96b905a6220d41f4894be0e3dec99e0628b99d52a6/2", "b35c50b3fb3e8e3b665e2a45d183aae7fa562f6ef9159c78ca0a3d3b42d3c29c/1", "3219a55c7cecaa8185250aac35cbecc1fe72a8c199e5b78a58df08b0a732f23a/2", "d05da1c37b636c48a9a69cc09f1b7d6fccfbe85232e85d01bd073676a742e63d/1", "8a6e286a55f5228cb9f9ad6ede35a96e5383b9061e4e4698ce966db6ec2b6bab/2", "6b9f50ea33a71db526e15c4bc999131189d4dff45cf47071ae8ced88799ff05e/1", "ebc6a98839c4408794f0735edd97d1e82078ae1abae431daec5a96b5503009bd/2"] }, { "id": 1707, "name": "Graph Girth", "solves": 631, "attempts": 712, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given an undirected graph, your task is to determine its girth, i.e., the length of its shortest cycle.", "Input": "The first input line has two integers n and m: the number of nodes and edges. The nodes are numbered 1, 2, …, n. After this, there are m lines describing the edges. Each line has two integers a and b: there is an edge between nodes a and b. You may assume that there is at most one edge between each two nodes.", "Output": "Print one integer: the girth of the graph. If there are no cycles, print  − 1.", "Constraints": "- 1 ≤ n ≤ 2500\n- 1 ≤ m ≤ 5000", "Example": "Input:\n5 6\n1 2\n1 3\n2 4\n2 5\n3 4\n4 5\nOutput:\n3" } }, "cases": ["b02e4c475f970d75b31bc35d21a4c587f4c057d2bb7b1e13166e31e8f43cd2aa/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "0eac992213bf92b04fc4498a148d216274d5dcd669191b4bd42d6b98755f9d77/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "b1a0463b6f1e5a3a9c2c7cf2a2635f920dd820002239b71a99c5a7939abcd124/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "47abf24e02a6780fbfa06acfd0123ce3b873c500b2583ef90fa677d742527d22/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "7c0cd945d0ec41e30a82b948cd482fed6101e9153b221131dce2d1947a021b32/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "e04033e75a9c7c53f6e4f22c6ecec52c52b40f76f702a979c53bc7f8a72cddf5/1", "f739882f40e2be8022d26517e0b963ab2351687845ebe1cf320efd0d0d3e388a/2", "7fc3bf08c76d4c520c1986ad4e5abe27ab9b7681899b397bda3a6c032a4877d3/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "f26829b4407c72afd1c5e78b7af74c880f1d6f612302da0b401e661a30ac75c8/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "a3ab153044d0f8e8624759fc2fa8bca0e7efd798be87d39e34f4e4787fdd7f0e/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "aae3ce2b218fd9a0d4cad8870bae2b27493e01d354406fc70c9e85ff0f1df898/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "af9a26ffd42a2f855f2b87198b7e4ae0abee33a2e66ddcd1f138ba4cabed9748/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "ec13723d5d2a2b26853acde6f4017a7500e0d68283d5287d18ad6883bef28bae/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "af9a26ffd42a2f855f2b87198b7e4ae0abee33a2e66ddcd1f138ba4cabed9748/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "80c9107f03e4e95953d6ef27cc05b2c2cf82218bae33bbe41a7a536727f989dd/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "43b270088321d00be5b21562595aa8d380207eee4ede999623b5ebf12d101724/1", "c6ebc76be5dc1f8b433f8d6fd9bd85cd9325086038442db8614bb799fec6fd85/2", "43b270088321d00be5b21562595aa8d380207eee4ede999623b5ebf12d101724/1", "c6ebc76be5dc1f8b433f8d6fd9bd85cd9325086038442db8614bb799fec6fd85/2", "b871bae16841dd3811c634cf801fc8b4369ae3f49e857fe6b1fcdd49bc1d40b9/1", "89e56b272669de11431602f3c77e560ecf6c61512fa8db5ac0006606e88d5282/2", "e8be0020c0e4bf6f045bd0cf378c35fe8fd8fb602716ea85c8b8640dd44b5a84/1", "77a60c200656e08ac5403f38b58657ecec155293323bd5313290399b75cf1c3d/2", "f26829b4407c72afd1c5e78b7af74c880f1d6f612302da0b401e661a30ac75c8/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "1729f1cb619c039c7f6fd41b3dde54ec5091164da940f717123acf8a0f3fd7a4/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2"] }, { "id": 1740, "name": "Intersection Points", "solves": 415, "attempts": 449, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given n horizontal and vertical line segments, your task is to calculate the number of their intersection points. You can assume that no parallel line segments intersect, and no endpoint of a line segment is an intersection point.", "Input": "The first input line has an integer n: the number of line segments. Then there are n lines describing the line segments. Each line has four integers: x₁, y₁, x₂ and y₂: a line segment begins at point (x₁,y₁) and ends at point (x₂,y₂).", "Output": "Print the number of intersection points.", "Constraints": "- 1 ≤ n ≤ 10⁵\n-  − 10⁶ ≤ x₁ ≤ x₂ ≤ 10⁶\n-  − 10⁶ ≤ y₁ ≤ y₂ ≤ 10⁶\n- (x₁,y₁) ≠ (x₂,y₂)", "Example": "Input:\n3\n2 3 7 3\n3 1 3 5\n6 2 6 6\nOutput:\n2" } }, "cases": ["9f7ed834eb94c71316725bbcb62ba961a68a656feed182548798e1e82de120ec/1", "25d4f2a86deb5e2574bb3210b67bb24fcc4afb19f93a7b65a057daa874a9d18e/2", "f61a5021bc83540233888a2cfa22cf3f3d89c83ec6a7b4f129446a02ae19d789/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "7cb165d7cca3e40ce620c9f533f024a40998b8b86928ddc8aa59c8d128e79627/1", "ed22e026944a0170b69457b108972bce6dc23e776cb39cf77609e0b1a6a6b621/2", "2094426e32183432eab3517c1793176db943dcaa20376d1097bfa03a560f30cd/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "5a5bd325a190db166ca18aafd3d6b1a39768a94b11ced9e69e19825f1d9e8a1f/1", "2772b8ccc397adfe5ffe8e67d24254fc74085a0439b106b9f0c874bd89814626/2"] }, { "id": 2214, "name": "Inverse Inversions", "solves": 186, "attempts": 193, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to create a permutation of numbers 1, 2, …, n that has exactly k inversions. An inversion is a pair (a,b) where a < b and p_(a) > p_(b) where p_(i) denotes the number at position i in the permutation.", "Input": "The only input line has two integers n and k.", "Output": "Print a line that contains the permutation. You can print any valid solution.", "Constraints": "- 1 ≤ n ≤ 10⁶\n- $0 \\le k \\le \\frac{n(n-1)}{2}$", "Example": "Input:\n5 4\nOutput:\n1 5 2 4 3" } }, "cases": ["f4a8ae8e74ddfb896a256de4e3099911dcaa6a9302591713898069b0bcd6e3d7/1", "c5295c00ead93b36a700b78c0cae17503dba4fe423425220b23f8519b5f734cc/2", "4516f6eaaa675488778d6ca333df14bc68c27fb7d7b8015073220d4571aa9c51/1", "4ca26e3b46917b5fecd4c98bd906853f7d08ecae9fcb9379ff43180abe857590/2", "dfac347cb71ae693ba8a54687f7112aff24ec67f88a3c66f69a7bf968fa2ac16/1", "630f7c0294c4388f31b032f229368066a5036f11c0cc0837d766700b3bc18e50/2", "f447e635ef60d86f4591ef150e99d027d79600a624955da19c447d2e7f957fc8/1", "980d4a1cc4064c725845a00679c0ddf97b3f4dc5c3b979a7f90288728335843c/2", "a279f0fe018bb1305d69ee251cd2a29919d20c910b86e3730fc1b857dd3c573a/1", "c5c56a238c421daee9b21c9b6ee5e29b1b5bc7b133be3a8106784ec13d6d6e86/2", "ece3d232c1ca9ef8a80b6fdb1585b8f5cf653b9dd023b0521c8da64db859ffac/1", "62f62b4db9496848ad2f83d581310b4162b640cd6f15dd23b3027f0fd4483778/2", "1dc008d228c479a1728c002e3b40df8ccf8dc403fe358057c73c896b9885480e/1", "16b3499450b7437bf19ddc009f735924ca60f7080ae18b1960e51eeae762990d/2", "1547e805a9430999d36e74a2538130b6319398d722ac37b7071e014167548c54/1", "0996143b0f6d6816e981161838d7e0ce2cfc2d357d1bfcac09aa3411efbec2ea/2", "684eae503d65fcc1d1f6b114a3b8bff72d9215cdd3a674cb945692b82bf2c94c/1", "8157f9434d31375ae8c974b8982749268e5bad4a7ad1cf1e3b1d00d0c0697a89/2", "dfbfb8707ebaf08a6ab751b9e5f3807cf8afd2352bf00f9cffef54d32e08dc65/1", "6ba4b3d68551fd2229e19b17f659e7cf0211fdbd3a98c1510560fea646773ecd/2"] }, { "id": 2215, "name": "Monotone Subsequences", "solves": 124, "attempts": 137, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to create a permutation of numbers 1, 2, …, n whose longest monotone subsequence has exactly k elements. A monotone subsequence is either increasing or decreasing. For example, some monotone subsequences in [2,1,4,5,3] are [2,4,5] and [4,3].", "Input": "The first input line has an integer t: the number of tests. After this, there are t lines. Each line has two integers n and k.", "Output": "For each test, print a line that contains the permutation. You can print any valid solution. If there are no solutions, print \"IMPOSSIBLE\".", "Constraints": "- 1 ≤ t ≤ 1000\n- 1 ≤ k ≤ n ≤ 100", "Example": "Input:\n3\n5 3\n5 2\n7 7\nOutput:\n2 1 4 5 3\nIMPOSSIBLE\n1 2 3 4 5 6 7" } }, "cases": ["b2d7cb40cc9840ebfd9d8569b5d7914abf2162dfacee8bd5cde32a0610e66016/1", "48d4c7a9c9c40a63e099be40c6c9444df19899d072ae241a30451b1b91e161c1/2", "cea466eeb8c039ca064e6bc130b88018e75c13f148f64b3b2981eae0797b2775/1", "b6ea75e6938fe40b6b43db788cbf95a437445e87b8a6d36ff25ca19e4ad67e75/2"] }, { "id": 1743, "name": "String Reorder", "solves": 229, "attempts": 252, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given a string, you want to reorder its characters so that no two adjacent characters are the same. What is the lexicographically minimal such string?", "Input": "The only input line as a string of length n consisting of characters A–Z.", "Output": "Print the lexicographically minimal reordered string where no two adjacent characters are the same. If it is not possible to create such a string, print  − 1.", "Constraints": "- 1 ≤ n ≤ 10⁶", "Example": "Input:\nHATTIVATTI\nOutput:\nAHATITITVT" } }, "cases": ["36a4aba0dcec23e926f0692065524808479c33f4501bae79348f8f005f10b21c/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "0c1534e4c91f35a28491c1d75687b9df1e40b9a28099fe4abb0cefc0a0ae5935/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "027c3838f81eff35c5abfa98d06500fe18c3baa1ff81f0a94279508a3e468c7f/1", "63e2af1ec5623ae2aae455ed0a01a127c239ccd7e740f7ff3ba85dec3b5e0e53/2", "149215e4783bed68d61b010aaae1b8055dc41c394d61df11f993a959f9be8eb8/1", "7f3c4d0a7acf180ba572b90030fdb2391d846bc6ef2240c07a016125b2a7fce6/2", "4677942dfa3e74b5dea7484661a2485bb73ba422eb72d311fdb39372c019c615/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "c9b4dbc5df9811140f0e868d3612481ef527e847adedef158d3090a7b440a24f/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "d8edbd5aaeb5630a99bc8fe099606af7ce46a5567ea32e204207694f815b86dc/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "eb194b04b05092675009e8413bd74913e2d708db7df783685ae954fc4bbee319/1", "d7c7709ad19af45db1b144316146c8856c8cf37ef0026c87d5ccbb16c125597f/2", "365608da0bbe883930ad4b6c9f2f4e3f9195deeb08104733a611cefaf184f435/1", "0ea89759d69f18ad11cb29ada85f093611a393d51f9dba55d2e88306e6b82ef7/2", "7dfe02cba604c9cd2ea32068162692ea7df8f54b627c379fc2f29d49c7eba303/1", "f9e404dcaaf6cf312968d7b4693e3c02454053e8a65a4bf77cd6b941d554c791/2", "d404581dc77e67099730b781b1e9c44b8f712a461bba59076cfd4fa5fbe90ccd/1", "c2df0d4a5ca9a1d349e07ec7e944820956092b1b2c790ffd19221a3715230baa/2", "184f3bc716c1e8725776902578f020f17bad80be8431a243302a1b87653d1e8c/1", "de9f36500cb4e34b3c5b3eeb555cbd52d6d33b1fc29a5872aa1f425d40aac634/2", "a67237784d72f1f9654562cca0a5fa8d3bd8b514459b4917e0eb5bd446ed8cbf/1", "5767b2130ec9be472e49bcc4571e6fa5b3c947c27095b25bcb00242a2899a24d/2", "4a3ce91223ff3bbfae05b2d129d9d91e28d0f43fdc7fd2cd1e88b553b63f2d03/1", "264483708f0c4d8b748ccbfaf3d9323fa8e118e900b42c9df066ec47393f28d5/2", "421b2e43c2d1580a28b4fa0d05da06f8aebcb0b1fded769ca2a363187549ab7b/1", "982267f8e7b31ef19279a5139b60e68baa17b5e385ce56aef9a92a62c17d069d/2"] }, { "id": 2425, "name": "Stack Weights", "solves": 103, "attempts": 122, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You have n coins, each of which has a distinct weight. There are two stacks which are initially empty. On each step you move one coin to a stack. You never remove a coin from a stack. After each move, your task is to determine which stack is heavier (if we can be sure that either stack is heavier).", "Input": "The first input line has an integer n: the number of coins. The coins are numbered 1, 2, …, n. You know that coin i is always heavier than coin i − 1, but you don’t know their exact weights. After this, there are n lines that describe the moves. Each line has two integers c and s: move coin c to stack s (1 = left, 2 = right).", "Output": "After each move, print\n<\nif the right stack is heavier,\n>\nif the left stack is heavier, and\n?\nif we can’t know which stack is heavier.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵", "Example": "Input:\n3\n2 1\n3 2\n1 1\nOutput:\n>\n<\n?\nExplanation: After the last move, if the coins are [2,3,4], the left stack is heavier, but if the coins are [1,2,5], the right stack is heavier." } }, "cases": ["1e4621847cc43c3b86cefcce843810dc40a2ceddf66e41553eb42e94f51b2592/1", "62a4ff8a7fd65d0f74d8684f3fa9c879d9e4cb5ece8284e2a48e82e3be425c33/2", "52676092f9f5a87fd14761390f72b132d97f83c608567fadd59dd24c6647fdd3/1", "80db7159f5902d3b5117dea0ac26d1ad3d6dab3754563d427b85151bdfbed5d1/2", "a40c3d61a151dc6f95274f32354d5c034fe8a2cddee3a2df3fa09a63b6e0d808/1", "63db8ffaa1942653a8b122b21c0e28563e13be0be90313e42e30321235193284/2", "8e13b6f77f0e721ae59c5ec69ac782640b2df5a4065fa88372fab8403265b33e/1", "64b7321334a5516c16dc392d171aa22112bf0d8bbd3c5a85bfd74ba2160067b1/2", "91eaf011d56ce2a77b57367f4d63dc1674cfceb28a26080182990849cd74670a/1", "f41a77e553c9bdca147910aa11760905ce3ba5eb465b380d1ed5de25b1732c0b/2"] }, { "id": 1747, "name": "Pyramid Array", "solves": 226, "attempts": 266, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given an array consisting of n distinct integers. On each move, you can swap any two adjacent values. You want to transform the array into a pyramid array. This means that the final array has to be first increasing and then decreasing. It is also allowed that the final array is only increasing or decreasing. What is the minimum number of moves needed?", "Input": "The first input line has an integer n: the size of the array. The next line has n distinct integers x₁, x₂, …, x_(n): the contents of the array.", "Output": "Print one integer: the minimum number of moves.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ x_(i) ≤ 10⁹", "Example": "Input:\n4\n2 1 5 3\nOutput:\n1\nExplanation: You may swap the first two values which creates a pyramid array [1,2,5,3]." } }, "cases": ["df297b5fc75833f4540c3e8a1d48bf3d1cbe39720952b6867470e2d313f62002/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "25aad7be274e2784d446c5207cc22634c8e1550de96e880021fc3d0b633f8137/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "8fc6bf6fae6df4b654a82e8c396c1dbc580602b2326844040b55735c7e494db7/1", "a1fb50e6c86fae1679ef3351296fd6713411a08cf8dd1790a4fd05fae8688164/2", "ba945b94d3c52226845e3aa46bba3e6f74b0af205ac90dff4df3e6f5ebbd65dd/1", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/2", "34e8596db58b8e679d5a503cb47a8f226841e78d02f09e772ce44a23dfe5b96a/1", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/2", "0be5594fa61710760bd37b2df0a27dfcafac84e8d0e0f9184a205ed44ece3146/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "ab4d2d46fbf63268fc3ce680aeaa65ede906c5b399a430a47cac3629ea09af4c/1", "78eb8620ecced627ba8053adfd505704e8e31b60785a7219c065ecc5c02433b8/2", "09ead4ef93f189034cb1e7e166fbd23797b4dc24c0677b22a10fdc7e686ae1b0/1", "0e780b45a0496c5911926d69982a7b90956578077fcfb2138eaee5530c6fda06/2", "d8b0aaa81a2a9b9b3b09d0c44fe6527d61dfb9222e57d63eaa246f5a793a33f8/1", "0b4a8acefb881cb227437da412400d38eebdf0f2fcc6a71427cc292020edca36/2", "f232094807e057f64b06b8be86ad391f435650313ed6e2eacb6a85debd58cc2f/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "9828ab8570f6308304ef58cc6532ca4b13e56847f4e71e3d504c198b0042e3a7/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "fe8dcb9d46379a76b670b15902f7073e0d8fe731145e966c088a2548fdbc2229/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2"] }, { "id": 1748, "name": "Increasing Subsequence II", "solves": 532, "attempts": 574, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given an array of n integers, your task is to calculate the number of increasing subsequences it contains. If two subsequences have the same values but in different positions in the array, they are counted separately.", "Input": "The first input line has an integer n: the size of the array. The second line has n integers x₁, x₂, …, x_(n): the contents of the array.", "Output": "Print one integer: the number of increasing subsequences modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ x_(i) ≤ 10⁹", "Example": "Input:\n3\n2 1 3\nOutput:\n5\nExplanation: The increasing subsequences are [2], [1], [3], [2,3] and [1,3]." } }, "cases": ["3ce6a40be69054048580f328af7ec430ebbc1c3ef3ec1a07fcaf03b3d5016835/1", "932ab0a0e4191d32c0af7b3f565b7b180dbe9869378abc5816f9add54b806e7f/2", "31b0f85a6b246f0f20ed470f0986659dd3365bb7890f4110a28711b92ff6b8aa/1", "0e55092af0746630c98d1b2e0d960617c33f8ea7b55739fd18cb7cd5342a28ca/2", "bef33218d8f1acc3a97194f16bd19d77cbd464d246dd0bb01c941832deda839f/1", "673650f936cb3b0a2f93ce09d81be10748b1b203c19e8176b4eefc1964a0cf3a/2", "06c108723c97f611aef061e004cf0635d663f906b4e0888338f0cf4bcdf60d15/1", "0e55092af0746630c98d1b2e0d960617c33f8ea7b55739fd18cb7cd5342a28ca/2", "30f075cfeb854f444f217a5a80253b1f8a8890d7aff6ce9bb907e07d7ec64b27/1", "084c799cd551dd1d8d5c5f9a5d593b2e931f5e36122ee5c793c1d08a19839cc0/2", "19d069a1577bf0ca04ba13c31dabeb8de05f9e8d9fdc6548ed48df252403f3ca/1", "d43574be921c54215a1e05bb2fc0c1a4b63dd2aea4bbfd5b9ebc11a2685943e2/2", "0be5594fa61710760bd37b2df0a27dfcafac84e8d0e0f9184a205ed44ece3146/1", "e6c29973bbfe1c14cb2297d18915da14c5b2db09b29a3a572fd50f1426e7c55d/2", "0c39b12ae9d1b93eda5fe8f5cf166becbdf862d2e3ae728df51b2f4c779ef994/1", "fb433d8d784ecc4e9830d504fc80194076cf9b95810ee56447fe93d72387f892/2", "d8b0aaa81a2a9b9b3b09d0c44fe6527d61dfb9222e57d63eaa246f5a793a33f8/1", "66dfc06f0c25606dba18a35e31d9e6dd5090c7c650c18fdaaf0148b8e227f4e7/2", "9d5ddc60694b496e493fc225526c5c996eed796cf84892e96f4ddd63ab08e7b0/1", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/2"] }, { "id": 1149, "name": "String Removals", "solves": 290, "attempts": 323, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a string. You can remove any number of characters from it, but you cannot change the order of the remaining characters. How many different strings can you generate?", "Input": "The first input line contains a string of size n. Each character is one of a–z.", "Output": "Print one integer: the number of strings modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n ≤ 5 ⋅ 10⁵", "Example": "Input:\naybabtu\nOutput:\n103" } }, "cases": ["91ee5e9f42ba3d34e414443b36a27b797a56a47aad6bb1e4c1769e69c77ce0ca/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "ec44ac189b1af382ddab53513e00cd57bd336e64b228e75ceda03dbb710218f0/1", "d7a72f7e1677172eec67fbe4378c722fda94651e94b428f448263e02bc287841/2", "3bfcfc09896f96452333269e5d88cb957f4dfa35a813a40939f6f80183beb217/1", "89af2c036872518bac6528a4973ee8bb5a2f15008d61382249b1885154c85d3a/2", "d4c5d0fcf9381ecf9ba34c7d4f2a6a00507e8c8fc8ab0750bf03a1191af3af6e/1", "f1e6b52a863a3f66378d68e14c065a2ad314c3c186c0558e25c7c835d49f7712/2", "2e04bb64d548f36bbbef1d37d45e44540a0dab60c20ad974de76d9c2b770074b/1", "4529aa21497e6b8a18137602c700fc9d2ec9a7adb46c208d344d2938999195da/2", "477b8770683b60657a204fa183b5f8aaeb6cc7f69370a9c183dd65a536103ce5/1", "f24b4c87e063ac3c981d0f26845a9a3792fd75987204b89bd122a4c5664d6f92/2", "3ac3bd2cd70d3bf0be64303295d6320449fcec12e3724516258b0f03328716a5/1", "f9869dda77c2811948c4641eded9d88f11ba7a6d561c41a58ab45ff348474f2c/2"] }, { "id": 1188, "name": "Bit Inversions", "solves": 570, "attempts": 629, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There is a bit string consisting of n bits. Then, there are some changes that invert one given bit. Your task is to report, after each change, the length of the longest substring whose each bit is the same.", "Input": "The first input line has a bit string consisting of n bits. The bits are numbered 1, 2, …, n. The next line contains an integer m: the number of changes. The last line contains m integers x₁, x₂, …, x_(m) describing the changes.", "Output": "After each change, print the length of the longest substring whose each bit is the same.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ m ≤ 2 ⋅ 10⁵\n- 1 ≤ x_(i) ≤ n", "Example": "Input:\n001011\n3\n3 2 5\nOutput:\n4 2 3\nExplanation: The bit string first becomes\n000011\n, then\n010011\n, and finally\n010001\n." } }, "cases": ["019b94f1a3dd0604307a98b3ccb129e4c753ce65f6b997b96aebc33e3e306316/1", "80b177e7a9e752f3306ab5fa50ad01c3b3fbc1561ee5c5665954a7c820597ba8/2", "7bd6e012296b6cbbeaaa97723bb7da0e542427fe9497d127cfb4a720dc76f4b2/1", "41103df27e449d5f0ac1547ed6748a39e79bcadb35b9c2cf396cf9a0b785555c/2", "2927c732ae7d7a102bcc99794f9be71cf54361a63a390909151cd8380d700d8c/1", "15e10203939f6eb8cac5af72dbf13d8e034541d5890d70c8eac5dfff0024a056/2", "05487bcf5f3c8b9b022ba939d4518e5593f25fa442fb5feb7a2d954ca1f76048/1", "9e3a38878fd6458b41f963862b796fce75e9384e72d94fd447bdb873bf281531/2", "273104f8319c6d45ca028b27e1b9fec01a6125d3c79e72965b19f9781159f771/1", "1ccd0110129b197f5c73ee275350aadd690cf38b1559885cb6a8f8bbd2cc3c00/2", "f2e909bdd6bba9923631612eb79ad7c3ed3f874da9343f42d0c99f1803970dcd/1", "d9bf3110325174170f1d4d901f400fe63f009416d11ac08a797046109b0e862c/2", "1bbe041828de6ff97581a3d8864172d50eb93aa3932b737139cb6fcfb36e6c2c/1", "124ad983eaae17ee199c3a770bd0115bf941a18e97c591ad846fa1ea91200050/2", "8d3b47a09dd847400ea3ae5ff78e339ce0da2a2234919120fb66e14261173ca5/1", "6ffd450a45e2bbf2eb3bc1e89b158387ad69c1a632bdc9567cd44693f254e472/2", "221c8cabb4cf2710900091c0ff22390f7273501f85b189e193e88d9322842a53/1", "ff9bbafa62f26c695cd22bf562098815257b5690763ffb45785ad3cb4309adc1/2", "9a59acb4ca6332b4b815b1127f8dd27e930b60ff6b0d999369f74aefd79dd37d/1", "a8fe8bd6133aa08c79e50f31dfe8ef21a18a5fc0571acf493f99664d4020d287/2", "539f95e02d2b9a907a8aba7d768de94b6202ddfcd3e632a5f1a4f0a80609589a/1", "86ba07f391ea511e80d3377f75e7bfa5de7cac630aeecd918a523b10cb7d2687/2"] }, { "id": 2419, "name": "Xor Pyramid", "solves": 254, "attempts": 322, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Consider a xor pyramid where each number is the xor of lower-left and lower-right numbers. Here is an example pyramid: Given the bottom row of the pyramid, your task is to find the topmost number.", "Input": "The first input line has an integer n: the size of the pyramid. The next line has n integers a₁, a₂, …, a_(n): the bottom row of the pyramid.", "Output": "Print one integer: the topmost number.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ a_(i) ≤ 10⁹", "Example": "Input:\n8\n2 10 5 12 9 5 1 5\nOutput:\n9" } }, "cases": ["3702a960e6717929ff9e74e15cad26a31642bdd067011b2d79b6269a8ed8965d/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "d354d906ce24728fb196312684a220a3feff557b2a92eb3c57c60cc623fd19f9/1", "ea243e5457028e97f9bc93b37a72f8e80ea61ae081911bb037765590ee6aa435/2", "549b8bd31d8c545d07ca275bbf9ea29c9a3ec5a0795cee8059853ab88a73e152/1", "1fc917c7ad66487470e466c0ad40ddd45b9f7730a4b43e1b2542627f0596bbdc/2", "721ea25963813490ba2caa7201bd0372c58b892858c35ffe87b2b4de543353e2/1", "dbaf0a599f64c51b3df61d120a0e726da6ee65af4d9de662998679807aab9843/2", "7a20d57531af96ee754d9dcab49d55d78e4153a614a8620accdb47dcfad43a7e/1", "e4a97a1874089cb51f8bf0719d5d813ecf69735f83d7135d6d767996c44eaabd/2", "f0c8b258c8ef3cb1d92aa14173a180a33bb00d157cff7940972ac62abcec32d8/1", "53220d69a1d0e3231d9ef45695085005c367d221787088ac6c10a155579042ea/2", "189fc41abe55125b4a41a9a46cab70a94b3c2bbb591623eae4ff44d53b762415/1", "9b0defa18c89d571abc5ae0daaa4d8a00e67f9788c3e81944ba0d3f2438eb001/2", "46e7f77d9cca5e8d6e8f503cee57a5cfa3e132efe766e9b90888c917aacd3c75/1", "3f5df851e6cc120cea522341f567385558b7361aed4b4e02f0ae6e0f3ddb492e/2"] }, { "id": 1086, "name": "Writing Numbers", "solves": 257, "attempts": 279, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You would like to write a list of positive integers 1, 2, 3, … using your computer. However, you can press each key 0–9 at most n times during the process. What is the last number you can write?", "Input": "The only input line contains the value of n.", "Output": "Print the last number you can write.", "Constraints": "- 1 ≤ n ≤ 10¹⁸", "Example": "Input:\n5\nOutput:\n12\nExplanation: You can write the numbers 1, 2, …, 12. This requires that you press key 1 five times, so you cannot write the number 13." } }, "cases": ["4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/1", "2e6d31a5983a91251bfae5aefa1c0a19d8ba3cf601d0e8a706b4cfa9661a6b8a/2", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/1", "25d4f2a86deb5e2574bb3210b67bb24fcc4afb19f93a7b65a057daa874a9d18e/2", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/1", "a1fb50e6c86fae1679ef3351296fd6713411a08cf8dd1790a4fd05fae8688164/2", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/1", "1a252402972f6057fa53cc172b52b9ffca698e18311facd0f3b06ecaaef79e17/2", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/1", "9a92adbc0cee38ef658c71ce1b1bf8c65668f166bfb213644c895ccb1ad07a25/2", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/1", "238903180cc104ec2c5d8b3f20c5bc61b389ec0a967df8cc208cdc7cd454174f/2", "2e6d31a5983a91251bfae5aefa1c0a19d8ba3cf601d0e8a706b4cfa9661a6b8a/1", "e6c21e8d260fe71882debdb339d2402a2ca7648529bc2303f48649bce0380017/2", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/1", "54183f4323f377b737433a1e98229ead0fdc686f93bab057ecb612daa94002b5/2", "16fdecb28ea8551bd59347efb1ac35068c4d3c4b05bfdc0b6b5c294d10994c0a/1", "8cee72dd66a5eb97ae4f79c75b21f8af6abb332379509d6495df2dec359fb969/2", "52ff157ac3b429e47afd47328cb8d748f46604dad77ed43300f6b96b8a9cb526/1", "038d234f4b1e6b2d06df4ca5df82f52883d5c16b1ebad49069e12b2f1572f764/2", "82ab74c97bda8c1eb4e279f4849a8dbbcf8e486eeadc0d94b8e44476fab2d439/1", "6443045841bdc17a6686e6d5da43dbea3f3bb08341d58a0b22f0be1f05d89946/2", "8b483c8dc2f20c5ec28356c901fed51b194a75c881be28647c9f53904c1765b5/1", "a9412c14dbc218e9857cb4b99af9fca4b337b96ead2fa9603c0a7fcf4cb2d71f/2", "9231b57dfda2bd6a7bd4351ecf04feee3efbef881c2a75f9e8a8ba6de6a7bfe3/1", "eb1a186506a37a7f9977a3cc3db37be9f2e46c97b2aecdf230d6b3961bfeb405/2", "b10d9f4a6a9333e147e3e224cf14a84ee0d68ee9b3c792b754e4f282df8d480b/1", "e39b22a6d4d14d17727076af114b984a974a61dca80b81a7c27e994d0e4996ef/2", "51e442f8fccccc4a2b848c87f69a852e3a4c16cebdae97ed646c97d34d4622f2/1", "43068d4120fb621f9d887346ece04f16f771274ae0ee81bf8d8ff2f3b4207fea/2", "3e86deb8e7a9051e86414125b4c20b96f2cef70fdeeca13ec8dec40cd9e22fe0/1", "a4ab6f6af54a001d9598e537269cf42a20f995f2db7fe1f14f2ff9e6ad83237e/2", "7d9745d198daf664e0f0658431dd3d68617e3929403b0f9c02baab78dc735ab5/1", "9c8b19ec3f512f3742a20e1ce9494bbdce6c15afbfce41a423999744efb53d4b/2", "fae0d59f57bb67b10dfcb9f72066254c531844530f95c17be88a8f7e62d76d9b/1", "2a7df98424b9edec473a76ad36cdb360d1f124cebf5fa2e9880ced8ec7813fbf/2", "b8650fe462b5b738b2bb69af1d3c3f16974db285c79025cf1b98652763ff509a/1", "88bfba2d23a1f006dfc120d17844b28be39b78e6bc386b312edacd564a91753f/2"] }, { "id": 1113, "name": "String Transform", "solves": 164, "attempts": 196, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Consider the following string transformation:\n\n1. append the character # to the string (we assume that # is lexicographically smaller than all other characters of the string)\n2. generate all rotations of the string\n3. sort the rotations in increasing order\n4. based on this order, construct a new string that contains the last character of each rotation\n\nFor example, the string\nbabc\nbecomes\nbabc#\n. Then, the sorted list of rotations is\n#babc\n,\nabc#b\n,\nbabc#\n,\nbc#ba\n, and\nc#bab\n. This yields a string\ncb#ab\n.", "Input": "The only input line contains the transformed string of length n + 1. Each character of the original string is one of a–z.", "Output": "Print the original string of length n.", "Constraints": "- 1 ≤ n ≤ 10⁶", "Example": "Input:\ncb#ab\nOutput:\nbabc" } }, "cases": ["621957e118b919c9709ebd06eae9757cc5670ad705c463f0015580a6a2225f13/1", "90da64bc8402d66bebf53dcc7847ad8270bf81740d5a8faee159ef6bc8f9c71a/2", "f0ee890689382264b9ee9f9b0a76749fc1cff4ec7b5ae894544ad2e52189248e/1", "7da25980e61dfd3e396c8c5d71dff79f8ebde5d7332be0358e33fe8964b6032d/2", "90b7bae79ded85923d66f61bdfda94116e511e3483353a5ab8974e63e7c4e25a/1", "c9db07e8ab6a6e5005c38348cd0f5ff0a613a683ed8ac6df68f2bd77ff12d53e/2", "429c98a86877b99e625c558201873da9a2124c5ed211b90e54618a42b201631b/1", "e5955d1fcbe7b291bbed6a6c23628f3935659c63f3328bae0d8f52c8aea4cf51/2", "de05b50b73d51a1736c8464c0d4b0626e8824070fce7c6eeaf7c76abec4d4df0/1", "73755fc9215e141464e2c4c8c38338b24acd90d3a1c0e969c5e75be2768c069f/2", "9970a190fe4ed703c553830ed58d5a6a646f0007cd786db149b48d7dea4428b1/1", "a566b09a993daf335f6021182b75651cb2e42bc82a7d39b877c29abfd70ec7f1/2"] }, { "id": 2427, "name": "Letter Pair Move Game", "solves": 35, "attempts": 51, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are 2n boxes in a line. Two adjacent boxes are empty, and all other boxes have a letter \"A\" or \"B\". Both letters appear in exactly n − 1 boxes. Your task is to move the letters so that all letters \"A\" appear before any letter \"B\". On each turn you can choose any two adjacent boxes that have a letter and move the letters to the two adjacent empty boxes, preserving their order. It can be proven that either there is a solution that consists of at most 10n turns or there are no solutions.", "Input": "The first line has an integer n: there are 2n boxes. The second line has a string of 2n characters which describes the starting position. Each character is \"A\", \"B\" or \".\" (empty box).", "Output": "First print an integer k: the number of turns. After this, print k lines that describe the moves. You can print any solution, as long as k ≤ 1000. If there are no solutions, print only \"-1\".", "Constraints": "- 1 ≤ n ≤ 100", "Example 1": "Input:\n3\nAB..BA\nOutput:\n2\nABBA..\nA..ABB", "Example 2": "Input:\n3\nABAB..\nOutput:\n-1" } }, "cases": ["d0a46c5756a36c49270fdd502815e7f92209a658e7c436c5b1352d27b411ff79/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "860a21e5725f93460b3751610065884717f2c7bb26d25e76b1809b7221cda8b7/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "88af9d2c8506423a14cebfd880d79d57dd87e956ebf8edba3ee69e5167f0a607/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "c19af9848c33ff4280d8e7b1e7cbf671c6173a5be4354da3da5bac552bbceb92/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "cedad49f6b61773754563fd0e5b6467d2a5688e62e109e3aca4998b0659bab52/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "849c7cb942b93a3c27736cbfe6e036a264eb992917a39d8f0ef3621322703fb4/1", "30b45bdf28428b218aa5df2814ab2dadb0f187d547ec5f118b2cdb9d212e5bf5/2", "d9088a1871df1963df9b4a4d52a61ff4a62b43fcbd1209bc2b3c518d817f35ef/1", "cab73cea05dc11a9ddd5a6d96dacc5fb5b7e7642990f9a9c9438274d4182279d/2", "5b45927bf60bbf231d580dd9bba472086e4a36518ad3c2c1fea8cb14f031d269/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "199a9d1d75cb1d9907ec8549924c7cbf210af8a79a925f14c257f345e66be809/1", "d64b1b755c7e01565bb18fea263d444a8bfcc94f14a67442644efb118c7b8539/2", "99e828c6672c2694e88fa605593ec0a862a632423fdbb8b8b43eb39b5007faad/1", "18da03930159a1cae944414144d05fee039969ad1b775a33cabd75f5eb849659/2", "17214e55cd78eaae77a600cf4aded30fd5f4a1d0659d3d78d352f9e3ae2890ec/1", "44e570efcfc82fbd41df7fb56b7407acc846ebbc459b5c7061c855f3237e53fa/2", "9e6a5644a09418500f9a86f8f67a74f4092f012577e7cef2a72880c506bbed02/1", "3020145f3051cdc61b1ef07af4f1ab37a6cc97daf9b5715812538efed6e7d733/2", "c9a8d15aa45f093289ea97da82e0bda5c9d4e972c913597b525ddd9896bfb6ec/1", "4c97f8117bd51795d9a3c7a70208632735224f67052974098dbf7fa07ba5284d/2", "8025885b5fda2bc702d085944b8a90db2b1b36cb5471a7deee19cb2dcf23bfeb/1", "278b6bef3ae59c0fa72d4643c5dada405b73811193906083c1a5b68439739466/2", "e1a67060a0e0d107d7727b548c574c680b6dfb3c6d0d1ad9b13d900c8efa9d10/1", "ddb9ffd61efc30ffbb8d7412faadf09558a206bf2ea69c9729f149b1bfb69ce1/2", "d5f724ec14514d03ff231b62df7fcd850f1fd04d8e273f2040b6f84f9e241c6c/1", "6dbe6b525a563d35d8587f7608f080e693dd55c29ce9fbef361565c184e2985f/2", "55ba25f9c668362a152964281bbc094edc655080c017c9f5d0a30430793a913e/1", "f097b61ce8c1286c21ba7c909f2059970f0a57203cdd7cac1b6a511c87f9e743/2", "4650399b9565ae34968c76b08c25063a5b28d8e90d6702c595d24b6720652665/1", "93b389cd2bd690a2e897748de24a007ce330cf98ce7182dbd3bf4a8fc61a7b27/2", "25b39fd3292eb54430a83bd2d14f9a9e370ccd9fa7b4aef84b116c9872ac5bca/1", "da18ac39b7bf3c3c1d0fdea25ccdb1ba131997692e9de8e68b523da4472a6e8d/2", "6d900ca31957008ee965db6aef9122675c63c3619f9bed73bf8c54054f151892/1", "3102e2aa812f39a1a8cb012fa0d7a88e8957d94f9ec6e3d1034384894aa4ab3b/2"] }, { "id": 1147, "name": "Maximum Building I", "solves": 508, "attempts": 524, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a map of a forest where some squares are empty and some squares have trees. What is the maximum area of a rectangular building that can be placed in the forest so that no trees must be cut down?", "Input": "The first input line contains integers n and m: the size of the forest. After this, the forest is described. Each square is empty (\n.\n) or has trees (\n*\n). Print the maximum area of a rectangular building.", "Constraints": "- 1 ≤ n, m ≤ 1000", "Example": "Input:\n4 7\n...*.*.\n.*.....\n.......\n......*\nOutput:\n12" } }, "cases": ["dd08cb73c64f0b81be0f23d6171d9fdf583c8e56535cc60cbf9b9a6d2a176c08/1", "a1fb50e6c86fae1679ef3351296fd6713411a08cf8dd1790a4fd05fae8688164/2", "cd73caf3362bf0ee352f57fbbaf44f8adb233050e20900fd400181c8ba2649df/1", "f4ccd05b3271c386ee55d9876c7450012a3b361e5065c09dc22075e38b3cc35c/2", "739e839b1c0452dd89998e452a834481dc643d9c4e717e212f2b4e724e3d90e4/1", "a1fb50e6c86fae1679ef3351296fd6713411a08cf8dd1790a4fd05fae8688164/2", "01edfff02079efdf5ca5da3517dc50080e084b1d6e89ddee2acfeca0c073a953/1", "a4b2c5db15348c29451e18b8307e5ef81625ea638e807935f39ceaa8d9ac7758/2", "2ab7274b136768ae67087f108f41148ff8a4859681b5889660c1102415a630d5/1", "5378796307535df3ec8d8b15a2e2dc5641419c3d3060cfe32238c0fa973f7aa3/2", "c5da2f6b8256b5309039db96761a6900453754667bc943cb40aa04ff2a37e80d/1", "e1e6c0fbbe15531ae25f1f7547ef3d15a1e35a9c68a41cc13f62672e2ad88286/2", "581736a83898cb6e581c3464cbd2dd6b6fc9a6f008b3d597f4d78fae44a1359c/1", "d36da70ea50f33dc990e5495c316db5847eba9cc1ecda8898a0b56cac63c7ba4/2", "f8497a15fb451341c0d2d09becd8a0216012b86d87bd6ca1d2e52357c72f2a8b/1", "d58b4399a007043b91cdfb0fe708c29929f2515f82198d2c42170d5044e4dda1/2", "400b683db752941301cf1e4b19edb4f3a7e3c4145a978b2286b1cefb5451fbea/1", "a6b4584900d527335e821ede46d6dc38b01415847441570c5802e2a913463417/2", "f81bef5b88edc3e58a5a7ca1fdb1e30eeb892c6df80b5592c648e8c47d704723/1", "19e2ed6f4d7ea60d1eefa2e251118ee1512c6d49db423dc5aa83b955e1240da8/2", "06c1dc3a74cb2647c2dbb0e1da1ae287a7ceaf0c59f837a454ed0ce80a9b749a/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "7ddb509d09b4c3b40f323135d3af9534f46eec83b6f7aeca6d91aa8bf733a3c9/1", "83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9/2"] }, { "id": 1162, "name": "Sorting Methods", "solves": 259, "attempts": 276, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Here are some possible methods using which we can sort the elements of an array in increasing order:\n\n1. At each step, choose two adjacent elements and swap them.\n2. At each step, choose any two elements and swap them.\n3. At each step, choose any element and move it to another position.\n4. At each step, choose any element and move it to the front of the array.\n\nGiven a permutation of numbers 1, 2, …, n, calculate the minimum number of steps to sort the array using the above methods.", "Input": "The first input line contains an integer n. The second line contains n integers describing the permutation.", "Output": "Print four numbers: the minimum number of steps using each method.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵", "Example": "Input:\n8\n7 8 2 6 5 1 3 4\nOutput:\n20 6 5 6" } }, "cases": ["df297b5fc75833f4540c3e8a1d48bf3d1cbe39720952b6867470e2d313f62002/1", "c5bea6d5172950ed3fc3f0433afd51fc1913e545f5dd34c849c65dc166209a00/2", "8a3fbf51431064373de4648222c041f83407271ba9b9bc5e8bffa1e44070f105/1", "0850e51f6e71c2a8866bb1150f7206243be5f820f4163df327c58746ebb5d2c2/2", "b3b797c1ed06abb3eb169e936d081ff52daac24e45bad50fd5901221bd9f2df3/1", "97673d19c5857f1fbd50fe7d3bb978ad1cb8c4e088be233bfbd32692e9d789c8/2", "ea8565759a48331b480059f0007ff6bceb284db7cea72211e1e0ad4656808bbf/1", "38df29a5bfb5edd69d137785f9f5980986b70eefd8fee65e5524d44770614fbe/2", "5aef1e6de681e943b911b332670f7c32f827c4f61dab345d07bebe63df2c28d0/1", "5a2b67305cb53c401f2522b52fe651a3d1804b7f8635b990b481de808431a145/2", "0be5594fa61710760bd37b2df0a27dfcafac84e8d0e0f9184a205ed44ece3146/1", "c5bea6d5172950ed3fc3f0433afd51fc1913e545f5dd34c849c65dc166209a00/2", "98acc55246bb1e4c7a1327c0698607a0cd5d380a527c354433911a7615b3b4b8/1", "5ab1e6161b8af8c6b2b08dd6ebe1ae9361e9ea089b394914a3ade72ed5203416/2", "510b5148a4b27f7e87a227668c1e6087353ec38d7803f6b0066dca2ca0f47120/1", "6038d6c414e4527cc4952dcd17fc0d15b367d47ae32b5aebc77092c328732f1d/2", "e1174a58d4c89742bd5e6ab1d8840f24f39dd50a2fdc2562b5d74ab19d8259b3/1", "73ec642553f61658f556e56a8c77633002367bf12c7adf7eff0eea63f8472422/2", "fdeb48cafff208b6de7020981b50dc12a5056f826e671e161320e50aa9146732/1", "b980f54b63f763522657d317746b90ff37b3f9e14bd84c2412c03b7e11669806/2"] }, { "id": 1191, "name": "Cyclic Array", "solves": 194, "attempts": 247, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a cyclic array consisting of n values. Each element has two neighbors; the elements at positions n and 1 are also considered neighbors. Your task is to divide the array into subarrays so that the sum of each subarray is at most k. What is the minimum number of subarrays?", "Input": "The first input line contains integers n and k. The next line has n integers x₁, x₂, …, x_(n): the contents of the array. There is always at least one division (i.e., no value in the array is larger than k).", "Output": "Print one integer: the minimum number of subarrays.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ x_(i) ≤ 10⁹\n- 1 ≤ k ≤ 10¹⁸", "Example": "Input:\n8 5\n2 2 2 1 3 1 2 1\nOutput:\n3\nExplanation: We can create three subarrays: [2,2,1], [3,1], and [2,1,2] (remember that the array is cyclic)." } }, "cases": ["87fdba7ff1885bfc0a71a04ca2892be421d9a3cf07e0632a126b5c08cab08923/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "01cadf88f96f6326d9e6e91897ac6ff2f6f1dceec02622538cdc6406c592c571/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "9ffdf7e02c408e2bdc853c935200b92abe670d05aa31e406d85b147023a33283/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "1a5a5b4ee74e2ee6dbda337f55ea9e693070c73144b4e2c08805f68acbb5d9c6/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "fc64bdf39637dbf91f0b1865aafe7433a3b54189c95b7ef9375402251809d284/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "298cfc12a32a2702e55739e31f823bd64d2ec974a87a851d2c2595480c0e8527/1", "d43574be921c54215a1e05bb2fc0c1a4b63dd2aea4bbfd5b9ebc11a2685943e2/2", "a9bf58d732795fb3dcbf01cfb0b48aa04a4a0dedcb5eeaccd6dbb1dd001b4efa/1", "704da0dbb3856355b9553d0359a1225002fb30a4514d3c5384c32babdeac588f/2", "74ee28d2c7899896c23e295dd406e29a78c21653a539346da937957352a6000e/1", "c84f8714fdc81911cb86d2772c465b7a88480e0ae7108a9cae93a3c484231c3a/2", "a4c33f4c6542b7da69fe63e2caee59935f1e8c3942d26b54852356d8986bffba/1", "39b8dc3fc8b44765c8e6f1adee04c5b465e555ab791cc42d0d9e810d5b64297c/2", "b531f6d42a86fcd7f6e7e65784da6f0fcfa512ad49509132860a1ff79c353b13/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "26ad8ca6db3d1d39ca63f6d58d5c2da6e9150f61ce0b3cd927337d14d42c7cf8/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "3195cb2bde56df80557bc1a2964296285405d43d51770b0e0605ec8279547d7a/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "d2134d6006c6f29910974849302574427132b638445976b43c6805fd68039704/1", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/2", "45f39daaa68e7b076710c50bb07f316c9a5f304551ea4e676566bf805ff371d6/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "d1c91eb61d3b6754c9deac376efbaeed689808f28267f65505d7a4b0f8f7b9f2/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "a70ca55c071b2700efda2ba398cdb2bf73924ec79ede21cb15cd1232b824676c/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "869200f71c6cc23ad87ffb16a0ad24653b044ce354a9b15005f720f3d46262fa/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "23aacf7231bd8b5f2d982a8fbee7f7bf4704a9b7ec45865d585196570bc23395/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "3acd231bd945e30dd42a57eb5fb5aed1ab29ae46689e01b61d775680f118b8b9/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "31f5aa4bfa8d366718d3bdc843df53b40a1196f03d8f3277329e923252062397/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "6dd1a8cc822781b67d9cff191a22d8e8273af54363d53612b4141865159fe390/1", "f9ef4bee82fafee5fd2114e832024d50644f06646ba86717c08f9ed9dd1735b7/2"] }, { "id": 2414, "name": "List of Sums", "solves": 96, "attempts": 129, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "List A consists of n positive integers, and list B contains the sum of each element pair of list A. For example, if A = [1,2,3], then B = [3,4,5], and if A = [1,3,3,3], then B = [4,4,4,6,6,6]. Given list B, your task is to reconstruct list A.", "Input": "The first input line has an integer n: the size of list A. The next line has $\\frac{n(n-1)}{2}$ integers: the contents of list B. You can assume that there is a list A that corresponds to the input, and each value in A is between 1…k.", "Output": "Print n integers: the contents of list A. You can print the values in any order. If there are more than one solution, you can print any of them.", "Constraints": "- 3 ≤ n ≤ 100\n- 1 ≤ k ≤ 10⁹", "Example": "Input:\n4\n4 4 4 6 6 6\nOutput:\n1 3 3 3\nExplanation: In this case list A can be either [1,3,3,3] or [2,2,2,4] and both solutions are accepted." } }, "cases": ["db3c3b9c15be6696bb468adcfc21ede14f77a95ac9ecf2c18d491075f2cbdeee/1", "1c94d389ffb5c4749f36398fbd958dbfb928b36e9fa398237449da2c661bbc85/2", "bb7b9f8acaf9c5a0c2cd1dffb62133c3c831a63fdd21375d4876ad0161d07288/1", "c1bfe96a6f47fe27fc359f7e0aa532cbeba6af32cd57ebe41517ff4398bcc912/2", "d91a4ecaef5712c8eb4599af041f9f5e5fcfb011b169415a04fb66ceb87f9afa/1", "9248011ee1697bf5117562e4881f417ad10c85788b44a4f1cdb532b5708550a7/2", "309592d54ef2c48e370a733654ad7aba2fa41f8e81d6a96709d9942f0c66fef5/1", "50aa433ce984cc41fe01134afda6728ba88236bc410280526ff706b684596798/2", "f721ee19fba37aafc52053137f677bdf50be5fbd2d8fda3d7010094831bce7db/1", "65e1a2f7e2a1b93929245c531cb455b92b3b241156a7aa93e5d39f9b7890dc81/2", "4f72c72568ba2739a1227c603538670cd64a56293b4ece11c809693bbf03713b/1", "c4968e7f95ad1f9941b498cbaa83d5c22036241b7419c624add4a23fd403947d/2"] }, { "id": 2132, "name": "Increasing Array II", "solves": 134, "attempts": 152, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given an array of n integers. You want to modify the array so that it is increasing, i.e., every element is at least as large as the previous element. On each move, you can increase or decrease the value of any element by one. What is the minimum number of moves required?", "Input": "The first input line contains an integer n: the size of the array. Then, the second line contains n integers x₁, x₂, …, x_(n): the contents of the array.", "Output": "Print the minimum number of moves.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ x_(i) ≤ 10⁹", "Example": "Input:\n5\n3 8 5 6 5\nOutput:\n4" } }, "cases": ["b3d27753d290a4ce2e844ac6e8c1a172df6c1426314089a1db2afb7ad2ceb68c/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "a41f3ea0806a634a2c76dab1564670828f526f9ab0a02c90fcd856999140f113/1", "19b8d5c59e421f037fe563007c7254eb8d98bc221b278c3db3e5fdbbfd52e273/2", "19d069a1577bf0ca04ba13c31dabeb8de05f9e8d9fdc6548ed48df252403f3ca/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "ba92435d1dd4f068936f0631993c17fd29d159fbcf78cc130e490cd4bc088315/1", "7fb189f5b2832d64c6668c6569b1860cd7d30734b63f50bbd064be5d4e817ae2/2", "24e73912ebfd74fd2324b720e167d6510e89cae0382dbfbe098e2ce0ed412646/1", "2171e785de875024c4ac01e5e4f76db0c9d9aa09609923ada967b9635859da9b/2", "ab8bab3d756cf3ae4fc77c30d95c078799573060be8d2377b6125806902d2c0a/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "fcec5cb91a9cb287af064c5e4c2e0c0802cf6f8c0a98c02a0da4e8ef109a4d73/1", "eae3f63311e7fe2c6f28a9bb4e3a165f45153bb49a8a97646875f234d90abea9/2"] }, { "id": 1189, "name": "Food Division", "solves": 168, "attempts": 200, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n children around a round table. For each child, you know the amount of food they currently have and the amount of food they want. The total amount of food in the table is correct. At each step, a child can give one unit of food to his or her neighbour. What is the minimum number of steps needed?", "Input": "The first input line contains an integer n: the number of children. The next line has n integers a₁, a₂, …, a_(n): the current amount of food for each child. The last line has n integers b₁, b₂, …, b_(n): the required amount of food for each child.", "Output": "Print one integer: the minimum number of steps.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 0 ≤ a_(i), b_(i) ≤ 10⁶", "Example": "Input:\n3\n3 5 0\n2 4 2\nOutput:\n2\nExplanation: Child 1 gives one unit of food to child 3, and child 2 gives one unit of food to child 3." } }, "cases": ["89f230be0122df7126b70456523482ca90bf0b494eafad4947b76bf84891741b/1", "5ea3e07f4c6ca87b080e1a3e91ba006f7cfced1fc6eb930807582f74d6e3eb2f/2", "f69bd653c2d1c4077320c538819505066b306d977fc3c71c47c274bd185ef521/1", "85f4fda060d66ff0b7f773c0a1f49ba62f4c1716ecbfca15b88722eb45aed867/2", "de0e10fc097533a3ee3737f4cd049a8c2887c562769fe3210b3ef981d7df5e18/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "ea7ebe5f1626ff984d38a35f87dc7e1e3e477b8d72876b79b9d6925d53ed16b9/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "ccce065269620747ca153e9a430d44b175cdc1f7e0958741b567250a1d6b1d95/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2"] }, { "id": 1654, "name": "Bit Problem", "solves": 311, "attempts": 336, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given a list of n integers, your task is to calculate for each element x:\n\n1. the number of elements y such that x ∣ y = x\n2. the number of elements y such that x & y = x\n3. the number of elements y such that x & y ≠ 0", "Input": "The first input line has an integer n: the size of the list. The next line has n integers x₁, x₂, …, x_(n): the elements of the list.", "Output": "Print n lines: for each element the required values.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 1 ≤ x_(i) ≤ 10⁶", "Example": "Input:\n5\n3 7 2 9 2\nOutput:\n3 2 5\n4 1 5\n2 4 4\n1 1 3\n2 4 4" } }, "cases": ["117ca922bc19e5b18fe9fc5be722c42fa9ae38585ab6f42fd8fc7fc694416aac/1", "af36749226620e16f5702d1b64b53671cb52127f9d16caf240b3b3761a34c4ae/2", "2a31b0112c4eb488e3cb8c296142c857f14a6bfd35fd9c8b3ef159d765e3ee24/1", "084906a6c59576bc58e1d9e54109689488f39df063e0b0c66eeff02424dc26c6/2"] }, { "id": 1698, "name": "Swap Round Sorting", "solves": 123, "attempts": 158, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given an array containing a permutation of numbers 1, 2, …, n, and your task is to sort the array using swap rounds. On each swap round, you can choose any number of distinct pairs of elements and swap each pair. Your task is to find the minimum number of rounds and show how you can choose the pairs in each round.", "Input": "The first input line has an integer n: the size of the array. The second line has n integers x₁, x₂, …, x_(n): the initial permutation.", "Output": "First print an integer k: the minimum number of rounds. Then, for each round, print the number of swaps and the indices of each swap. You can print any valid solution.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵", "Example": "Input:\n5\n5 2 1 3 4\nOutput:\n2\n2\n1 3\n4 5\n1\n3 5\nExplanation: The inital array is [5,2,1,3,4]. After round 1, the array becomes [1,2,5,4,3]. After round 2, the array becomes [1,2,3,4,5]." } }, "cases": ["ad0fadf63cc7cd779ce475e345bf4063565b63a3c2efef1eebc89790aaa6acba/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "fdcb27265764b2a73c62380d364aa177b18028a2d6fffe621bac5a23affde265/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "eb89376776d7587133609459069ee357dc42447512374aa56829366dab516fcb/1", "7216b3a0c96adf5a937598ccb80db4f4007c344724e89bd1a2e5c2e00e9036c0/2", "6b3272564201ddb9c9af54f753cb42a5c57b80c776cdd05f049d26c8695e2079/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "18c5ffe94aa56629307bba5379a5bcc08536833ea1ca240f4732cce42fe75cf8/1", "795fea789bd08141fb479821b0513b9a00dca638101c1312c0fb211674173c0b/2", "9d5ddc60694b496e493fc225526c5c996eed796cf84892e96f4ddd63ab08e7b0/1", "7216b3a0c96adf5a937598ccb80db4f4007c344724e89bd1a2e5c2e00e9036c0/2", "1cd3b95e0891d9d14c52fa7a99f99aeda983e3b48f62b2219add82a6f94fe2c0/1", "97f48e559ddc70d077806f817f633a0daee7efd5bd287341f92df22448b99be3/2", "a9c146863ba10c942378978dbe0b90f1b8ccc5c286df3970d824c3eb853cfe96/1", "68b4f53ba7b820fcdb47fc15cb011f65f755a964ad8bcc3763be1b6a5fe2cac4/2", "2d61a76f03ae9775f2268879dc5620dce961a9207ecaad1c4fe2a20e9e380bcb/1", "2d80c389fc8c3e4e11bcc0ce73d24e10118316b804f97fac378105268f8c34c9/2", "0be5594fa61710760bd37b2df0a27dfcafac84e8d0e0f9184a205ed44ece3146/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "98acc55246bb1e4c7a1327c0698607a0cd5d380a527c354433911a7615b3b4b8/1", "f912812636a79f0804a72389e3fe2695d3f01a03952e0f13af7544b10e4147b1/2", "dfc0d9442d52283ac27df3bf512bb69e289e03723e67a9e1195dff6c0b6ddebb/1", "ecc2042083180039b533016d9f1fb75c0ae450bb84a47001e6db0cc14a48f87a/2", "44a9f1df27010231c729dc674ea08ad6db0e65cececbcde3fa9d232d0dc1e06d/1", "cc83a59120d65c806a7275a0afea06b8b04a3b2c687ea98e298c6ee47acc7b0d/2", "5665a421f59bf65642440677d6da59c8abdce3fbf0b439f3968971ceb2c68778/1", "8c18b7640bb8ddd63738ca3ebb66c650873b33832affc32cb2bd4a2b322ab69f/2", "3170d427577ef8ae48a1732fb952d7b61f1e84ca85f749ba1022a627fbb8f4fc/1", "73234c13434ed67072f8223b2cdaaca04fbf22b1ab2d77c673596f2c9a7df7ae/2"] }, { "id": 2430, "name": "Binary Subsequences", "solves": 40, "attempts": 70, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to find a minimum length bit string that has exactly n distinct subsequences. For example, a correct solution for n = 6 is\n101\nwhose distinct subsequences are\n0\n,\n1\n,\n01\n,\n10\n,\n11\nand\n101\n.", "Input": "The only input line has an integer n.", "Output": "Print one bit string: a solution to the task. You can print any valid solution.", "Constraints": "- 1 ≤ n ≤ 10⁶", "Example": "Input:\n6\nOutput:\n101" } }, "cases": ["917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/1", "d6a1a767319c3bf2a337b16e3a14916f63e432872e0f8df1cb73b32a8b338ae4/2", "eea8254c7500ba3de996aa8ad6af399183f04e17d4a8102fde539dbc93a90012/1", "4d110e7f8f7223454fed1e6818f20ff98054f0d12787dfd4805e4952f6b675a3/2", "590a25bb920540e420a2a2b21545673f3fccb65c327df1987c5f4f6a92be7d6b/1", "1b1e0a62c9c0eba7c2c256eaa2883f8c973b4c4197f3be595b8f0ba2d12333d6/2", "9a01e212c0f55ac284090fbae11ae72007823c23c86bdd4ef34f7784d1ba422d/1", "21f968ea48c4afd65e61013e18e4577514e76404b8a5d17c4406794170a6c847/2", "90d6bf6a400e9322a1ed3318a6835630ceac1f4b4fd690c3e44d8ad66da346a8/1", "7d20429b2cbc54f33127e9657d7b7ab86e2e5ffc7f2e5bd266324f4979a80ed5/2", "d1007692a65d3d2b91c95866b702b2697475c89a5edf80f4d350b936d32d0a73/1", "f7ae7cca3bef21876b47201290f38a97ede0e6bc632481bf7f4917004e8ed7e0/2", "86ad3b2be17e0d1d54b3b65b768cc61ab99f101999b7287e5e15ced6ff66d3c3/1", "23027e59b5256f13faf3ea572caf606de2e5f79615dc9ae11c6816aca7917a12/2", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "106a9b9f3147d28932cedf31943d7bb377d45f55a75c12661c14ffba9294e9ba/1", "12abacee735c5ff5aa9100729a8cb94cdf0d88c252b06a1efab44f97ec408077/2", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/1", "49ca5d81054fdd20572294b9350b605d05e0df91da09a46fb8bde7fd6c1c172d/2", "030f6cb1c1238bcddfacbd2375788e3fed0923e74aa3fa557e2c794c157cb515/1", "4e94effeab545eeb87c6819f38a87e066a631b21f18e8e808332fda9b87d1250/2", "a59d2ea9abe6de1e93ed8d54496fa33d603843634c10f08789aa96e5ddf7430b/1", "cf4ba55244fe8697071447e80db8d11dff87cd47d0d1b6758b9cf7c9822fc1b0/2"] }, { "id": 1700, "name": "Tree Isomorphism I", "solves": 221, "attempts": 276, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given two rooted trees, your task is to find out if they are isomorphic, i.e., it is possible to draw them so that they look the same.", "Input": "The first input line has an integer t: the number of tests. Then, there are t tests described as follows: The first line has an integer n: the number of nodes in both trees. The nodes are numbered 1, 2, …, n, and node 1 is the root. Then, there are n − 1 lines describing the edges of the first tree, and finally n − 1 lines describing the edges of the second tree.", "Output": "For each test, print \"YES\", if the trees are isomorphic, and \"NO\" otherwise.", "Constraints": "- 1 ≤ t ≤ 1000\n- 2 ≤ n ≤ 10⁵\n- the sum of all values of n is at most 10⁵", "Example": "Input:\n2\n3\n1 2\n2 3\n1 2\n1 3\n3\n1 2\n2 3\n1 3\n3 2\nOutput:\nNO\nYES" } }, "cases": ["32503c33a4a06e28e809f10460df595463c2dbf443bb34320db6dfd214004eab/1", "c135d52e39ccf864b6250c69c6d0f5a3a3d82d1422d1bd854c6a1145ac9ab332/2", "c61fdc1def6806ed68500a45e966516ed7a21337200414d5405a353e381b8720/1", "6852b2b35a1d55bfb5c1244127975cf1545196b954d68545308255ebfabfeab3/2", "b8e35537e8b59db35c83b0de03e1ab9d6516d6e6b2b12dbb80735f3b718dadf2/1", "0687d4038b98fb4f0a29fc40858eed4b10997c5e36fd2a5803a54298ee5731be/2", "add442f000d3767fc80eb9d436be3e56e0f630e3200cb991147fdaec4a71905d/1", "a115e91c2e84c3078fa06914eff28d07590ddfaa47a55fb4f31dd7c5b3566194/2", "ecea18a626896a1835946816225afd148a91c5855d17ee2ddbfdda1f68c331d6/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "52dea8fa7af28f2edda2b789f7a65e9cfc0fa3050e334e081545bb1a229b6185/1", "a115e91c2e84c3078fa06914eff28d07590ddfaa47a55fb4f31dd7c5b3566194/2", "1352fb7d859c07951a6426c9ead5d8ab6ac77f6ca2e8ab258c8a9c8b4634dcb6/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "667e07e8dc95ec08e393743010652354d229f86b29a1095cf6d93b08fd2a8672/1", "a115e91c2e84c3078fa06914eff28d07590ddfaa47a55fb4f31dd7c5b3566194/2", "879bf4683382aa8355c9883ceadbb9057d0585e91f047585332635f1a08906e9/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "d5be975c3730c0e9f510ee9df1f5471e1898c9dbf2a7ec0971c49ae762c9b54e/1", "a115e91c2e84c3078fa06914eff28d07590ddfaa47a55fb4f31dd7c5b3566194/2", "e89a72825bd1777a4d65a2e2071c95790114352bdabdc735d67ffa83bedb2966/1", "80def762218412c39734b5480a99bdefc286e69d4cd38848e40e6e796f2e8770/2", "0d1401824a1ef3ba9f120274ab4a842ce9da455bf8ee6adc9af58a917206eff8/1", "dcf16e384fc6753b36a7a0fa5f6f1b22d6b57d8dace0325653bec709845783d4/2", "533c47f9df3031713e767364009aa8aa200aab8f8322521856965947731ea2ea/1", "a115e91c2e84c3078fa06914eff28d07590ddfaa47a55fb4f31dd7c5b3566194/2", "6b686578c3ccc3c13fea0e20eb85f1cc9a10bbf80eede9c4c50893cc8eff1b4a/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2"] }, { "id": 2228, "name": "Counting Sequences", "solves": 114, "attempts": 123, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to count the number of sequences of length n where each element is an integer between 1…k and each integer between 1…k appears at least once in the sequence. For example, when n = 6 and k = 4, some valid sequences are [1,3,1,4,3,2] and [2,2,1,3,4,2].", "Input": "The only input line has two integers n and k.", "Output": "Print one integer: the number of sequences modulo 10⁹ + 7.", "Constraints": "- 1 ≤ k ≤ n ≤ 10⁶", "Example": "Input:\n6 4\nOutput:\n1560" } }, "cases": ["3f11ad6bbc7ecca0b2416b713dee77f1a635c00aaeaa946e14cde1c2bfae56d5/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "dfac347cb71ae693ba8a54687f7112aff24ec67f88a3c66f69a7bf968fa2ac16/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "f65ceaae246de02135c1326ff5188bdd166c9749c021c91e49c0b9a79f9c7262/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "a279f0fe018bb1305d69ee251cd2a29919d20c910b86e3730fc1b857dd3c573a/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "ece3d232c1ca9ef8a80b6fdb1585b8f5cf653b9dd023b0521c8da64db859ffac/1", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/2", "1dc008d228c479a1728c002e3b40df8ccf8dc403fe358057c73c896b9885480e/1", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/2", "fe3d205d7028d2540e89fe25dadf5834ac29d9cd9e031da51dbbabba9139fa90/1", "69bf89fa5137a6f321e679a8f71bd75e910266c97d821413e96865a1cf6ec598/2", "29429e963298d212cd2bb7f5f5faeac3e6c3dd822c876f1a8ba61b9ba57ced88/1", "4e50825fdbfaabb239e3780417f56ad874e34a1f927fdb7e90760633b794506b/2", "a82ed5c1b1299f994fb309d6243abb824bf93de32cfe3303659b5cf25d78d49d/1", "627bfe8314f75979ff2e172690982572a412c9dff66360db5cea618112fa611a/2", "2ebb17007504bd8b241efd2041847b4b7420a7c059ddd20584a6a260d490ce2d/1", "d6710b979b57b69e20d284a1642967e271efe3b034f74d374c14d572a7da25aa/2"] }, { "id": 1703, "name": "Critical Cities", "solves": 106, "attempts": 165, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n cities and m flight connections between them. A city is called a critical city if it appears on every route from a city to another city. Your task is to find all critical cities from Syrjälä to Lehmälä.", "Input": "The first input line has two integers n and m: the number of cities and flights. The cities are numbered 1, 2, …, n. City 1 is Syrjälä, and city n is Lehmälä. Then, there are m lines describing the roads. Each line has two integers a and b: there is a flight from city a to city b. All flights are one-way flights. You may assume that there is a route from Syrjälä to Lehmälä.", "Output": "First print an integer k: the number of critical cities. After this, print k integers: the critical cities in increasing order.", "Constraints": "- 2 ≤ n ≤ 10⁵\n- 1 ≤ m ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n5 5\n1 2\n2 3\n2 4\n3 5\n4 5\nOutput:\n3\n1 2 5" } }, "cases": ["e7db04f9af704f21faff4f950d845dd9845bc17896fe35e14b86db423d7f280c/1", "f32ce2cfec725e0230eae8cc39e6d90b4cc6de7f3d29887563f7b39f51b78e8b/2", "3f6e4dd4fa7fc74269759e3a8f57106ad51571578166eb2ee2f3463cdefe62e9/1", "47f09142ed2613699ffe86c23f2dac2006ff2ca5575b7b1e65818ab59b856763/2", "fa3166f9061f1e198ba9bdfb5f7e5091c7b15be3eeaa90f7dd5e989dc4f8f843/1", "af9a20518be00aa7b1f791429c91473f902e8a9d4e3be9245dd2fddd1ec81db1/2", "3ee624cdbb60d6805786340671855ccd6fede8327e2f8ff1991272b2c459092a/1", "cb6bb27a74ba1efa5d622a568252b56587e343f1f71f850a8411b8e76110bcf5/2", "d8e036077b5f9710b493db317e0b56d5b77bb5e3042731141b132788eebefe6c/1", "fbf996f915e21bb2b7630d858f358b764d8f1230be8a0421c37659c5129d31c1/2", "ab16a1f2fc7dba44c6f23d7b29aa00c719498a2d291c0fb3f9c1abed65d2584a/1", "ceddf5b74448f8436a84cc5a19e885f9ba0d5ade23a7071db614c5f22a9901b9/2", "a43b2f21e2e1e567ebe8f0327910a147863af07428591aa31f2b3ecdeedbf473/1", "ceddf5b74448f8436a84cc5a19e885f9ba0d5ade23a7071db614c5f22a9901b9/2", "877786ffe4ca31c0a36fb11b11169e0f441e291fc8936ab06b8d91676c20a2af/1", "f54179f8639963cdebf18cbaafb47fb7bef24f93de412caead3eb6d71e131c78/2", "892e32951ce7c55b5040bb0b2766214f3e9c63a7dbec859eaaba2c5956c519ba/1", "b235ebf9986b6a8ccd379a9309bdabb1da50d8742c7fc5bbbbf773046273c63e/2", "5eda64424b9b427e6413eb383700231271757f1d6f686c4c525f6c6a7d2377c8/1", "9d196231ba65dea15d67aac306e2247df5dac4aaabf4a722ea4b071518d74c11/2", "18fd973eec3f4c0a12ece018d2d8fff5cd07ed0d1f5a17e57a04a1c3ccc5edc3/1", "ceddf5b74448f8436a84cc5a19e885f9ba0d5ade23a7071db614c5f22a9901b9/2", "7219e739ac6abf6a39e141de2cb2077c9232bf435e87f0480dfa0c026523e347/1", "c904f7681caa1d1881fa5a4d820074fdbd5c53e94d0702329d1ee83b742bc8f8/2", "02535985f2d189e00e60a8b87ebf8ff1fbd6c1496a5957cf4406050865b33e24/1", "127a51d54bd151c01ddc75b04c079029a69facaeebb82891424924478cfbe509/2", "7c6621839f753b82e6dd5c8b37bb5017685f45a5aef1764a9236235ccb15d727/1", "1091f058dd8a48d8ff5e8412870e19e8ad5e1645efa3f4d4393cb0a5a0c1999d/2"] }, { "id": 1706, "name": "School Excursion", "solves": 304, "attempts": 326, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "A group of n children are coming to Helsinki. There are two possible attractions: a child can visit either Korkeasaari (zoo) or Linnanmäki (amusement park). There are m pairs of children who want to visit the same attraction. Your task is to find all possible alternatives for the number of children that will visit Korkeasaari. The children’s wishes have to be taken into account.", "Input": "The first input line has two integers n and m: the number of children and their wishes. The children are numbered 1, 2, …, n. After this, there are m lines describing the children’s wishes. Each line has two integers a and b: children a and b want to visit the same attraction.", "Output": "Print a bit string of length n where a one-bit at index i indicates that it is possible that exactly i children visit Korkeasaari (the bit string is to be considered one-indexed).", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 0 ≤ m ≤ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n5 3\n1 2\n2 3\n1 5\nOutput:\n10011\nExplanation: The number of children visiting Korkeasaari can be 1, 4 or 5." } }, "cases": ["88401cdce0f0466b01d2dbdde250d17cab1a783cd5a7d82bba6da2a3cb8c3338/1", "63d19a99ef7db94ddbb1e4a5083062226551cd8197312e3aa0aa7c369ac3e458/2", "bae99da8365bd095da2f500cc3e286427cb4055bcf119ed39723e96347329031/1", "b3b96b1f970ef764d09aff61fd8242832c7ab8535c3499b0439e60ce1920df91/2", "e8a4175106711fa16fa0b042b7634782880fe4571f19ee910d9b5ee7ac57631f/1", "f106f9b345c8968371ea0c167961e26d40c2262cddb2e3daf91d8f9744da80d2/2", "07cd628a209d70b07f56756e7e5ae56ea8974785aa3cdd3e9f0a4a64eaead812/1", "0a581a9a15b305c618ed4205c0ce7de9dbd1537bd35de30587eee08bc37484ae/2", "6d5e1f15596b7b5d0380ab7a0f1237ad45aa0adfaa441512ff1d9e7e1d3ae91b/1", "63d19a99ef7db94ddbb1e4a5083062226551cd8197312e3aa0aa7c369ac3e458/2", "5d2beac13fe4c706a9fd144e9fba893875b3091496f68332273b03179666fd0a/1", "3a633fb6e9d6869b7a71e0e2d1b04a398fb28f826c12a4eba8056c48a0ab02bb/2", "290d832263ab6aa77c8877644809c47d869692a11edff9f7c80c9c3d2e9ac164/1", "691c268dd88e9a49493ae7ae808a02267a5eaf36fea0ac2c74d5caccfe6b9bff/2", "342c25c36606d613bb2d5a7a92597a4ddded04beca97829662408938530268d0/1", "228d1e0e2b566e74eefa9c1112925142bf619e01a787259f1476fcaa46de6ec9/2", "944cfa8f6dc5910b364625b01fc3d22db1355cca11e4f70c6197a3f7fe0b92e2/1", "a1fdf7cc77457617993d1560a2c4e5198c3ff200da40e3ecfc1d0a4f5c5e5235/2", "87c3838635e3947870cbf80361f750c2b991c6f106cb107c9312c1d4032e95e8/1", "3a633fb6e9d6869b7a71e0e2d1b04a398fb28f826c12a4eba8056c48a0ab02bb/2", "a16f42add22b1b58a1fd3768830e59e8004d052cbe6c115b087b972662edc76b/1", "3a633fb6e9d6869b7a71e0e2d1b04a398fb28f826c12a4eba8056c48a0ab02bb/2", "3499750fdf76ca4a7095d681fc4d637313f8a8c6323d4346a8a0105578adbe7a/1", "ca3e664d662978da56f66485041490964cb6659d1382afeda295f8ea97a614c9/2"] }, { "id": 1709, "name": "Coin Grid", "solves": 176, "attempts": 213, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There is an n × n grid whose each square is empty or has a coin. On each move, you can remove all coins in a row or column. What is the minimum number of moves after which the grid is empty?", "Input": "The first input line has an integer n: the size of the grid. The rows and columns are numbered 1, 2, …, n. After this, there are n lines describing the grid. Each line has n characters: each character is either\n.\n(empty) or\no\n(coin).", "Output": "First print an integer k: the minimum number of moves. After this, print k lines describing the moves. On each line, first print 1 (row) or 2 (column), and then the number of a row or column. You can print any valid solution.", "Constraints": "- 1 ≤ n ≤ 100", "Example": "Input:\n3\n..o\no.o\n...\nOutput:\n2\n1 2\n2 3" } }, "cases": ["2582550ef05ddbd53bf5b132cc8404e14cd590e20fbfcce6cb6b335b0e7112c8/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "e08f561fc63b2a76a5e72bf61aa8b17461b267ffe61534700ae9362ea121bb39/1", "7cd4d2baa0bc812e6baa82e533a1ce9dc7c90726b0109e9b5c8e7ae9991967e5/2", "a957e2f895e656098e4379c35c57db90bddb8a4489c3169a0640663acb094c23/1", "109b8646b10612f542becc8996a67e29f5d482b30d0d07feb8c27aacb9ec47b7/2", "6f124a46117e760de01cb8eb9fc1fcc3dfa34ae4a2dbd93bc9e09011b0cfc4b6/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "de75b17eed039dde89fd3e74a9c995635aba803760aa8de56e1ad801cb6a78a7/1", "482936ed14f86a9ce1a73aaa48e3f7f751a4c0539e6f08d534b9808cd4d6c31b/2", "53796169ac7592508db5076eeaf3153998c04193b9af9dd375cb91156a170e33/1", "e9963906c805a46c5c938b2206574bbe2828a296974c7d2223566262db342438/2", "9369b8dd44ffd5b1e9f89e8dc91a3ea754239d14a51bdcc1b2e7d13a9f178dc8/1", "bb48095c84646b99cc1da98962ddaf69b3160b8febb79e066733ed81db472690/2", "0ed9a86e151984153a98039fb5bfcde4c7df9dcbeb245c8c96b94975914d9796/1", "582619cf08d61f811c918283dfe0efb3ce8b4e83a6a84ed61d060f8d43972ad9/2", "019bb34cd5dd0d807319f1fb30ab82bd246148859978f94c2d911dc4cfadb1ed/1", "871416d3e9445119ef7ce14802098de9d83f99b2ff4633db05383d2419fd06de/2", "a1aee8a89e96927c82437a5fc685636e5591907806d731aebb990da13397f93f/1", "c7e5f84e2830fb101669c7972f13a5679e2d0171c80ab7274e9b0ac7bd898a53/2"] }, { "id": 1742, "name": "Robot Path", "solves": 93, "attempts": 163, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a description of a robot’s path. The robot begins at point (0,0) and performs n commands. Each command moves the robot some distance up, down, left or right. The robot will stop when it has performed all commands, or immediately when it returns to a point that it has already visited. Your task is to calculate the total distance the robot moves.", "Input": "The first input line has an integer n: the number of commands. After that, there are n lines describing the commands. Each line has a character d and an integer x: the robot moves the distance x to the direction d. Each direction is U (up), D (down), L (left), or R (right).", "Output": "Print the total distance the robot moves.", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 1 ≤ x ≤ 10⁶", "Example": "Input:\n5\nU 2\nR 3\nD 1\nL 5\nU 2\nOutput:\n9" } }, "cases": ["f8235b8c69fe652ba470f7f385066e60adc98cf7cdfd8a84daa3dd928ffa402d/1", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/2", "3d0725f83ef06a9a45147d6d0a5510d1ef3eacc7bb2dfdb2193d32097486fe0a/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "eab3b43759b08140facc6bee5014e1ab32eff4260b9a85a563ed48017d1b1de9/1", "5378796307535df3ec8d8b15a2e2dc5641419c3d3060cfe32238c0fa973f7aa3/2", "64c50ba21126a297d79264cb00f70948b407f0eda5456eaf68d4dea6134672d8/1", "64aeb9975f234becd55bb4635e6e2f2da7a6b7bf0a896f0c07763bdfbfb31420/2", "475aaa3278f4cf12cd55522af610e1036a72120b77a416d97cf3851e0d50bf12/1", "64aeb9975f234becd55bb4635e6e2f2da7a6b7bf0a896f0c07763bdfbfb31420/2", "255ac72429786d2469d67ae6262434e6bb43a55983af492711e0499aadb7d810/1", "64aeb9975f234becd55bb4635e6e2f2da7a6b7bf0a896f0c07763bdfbfb31420/2", "d1b22b7bc60877797857eb680ca4366736a30476d5d3b96de1c76d5096d8a0ca/1", "64aeb9975f234becd55bb4635e6e2f2da7a6b7bf0a896f0c07763bdfbfb31420/2", "4767d31ab7e1b780a24c6c0144e0ce2e9b6b386ac4ee7f516f698e40f954f2d9/1", "921eed343ee55b08a2c59fe51f26521f35241821dd3d73149cc0baa936288de8/2", "f3fd047f4d7c32ad6d734f67110ec63d2dd02fdb73339e034b4282bbade6b562/1", "77c21b024533c367b626c319665eff3ffcedb185065dcd3a3f5eab8f58dc43df/2", "639e655bbd086bac9b2e2fd0b8e306699ea38389ed51d23ccbef2a75575f56d0/1", "9fddd4056f74f1d45cf2358bbefe82dc25c9b602e2059b4fea2a94da689062d3/2", "d508b47a94cdcd6afd0005290b6073a6525766022377127441e44a02f3d08785/1", "e645a82065b908a07799fcab67f647613cdc83331a0c46913d2e54cd467e8076/2", "bdf70e3b318d9d75f1d00053734e9758f93c4247a57e64a76a2ee4e8d02e1eb7/1", "6c0ee24f6c2e5b3c6b5b0019e1221ebe85996e6b676f6874302b24747d308dad/2", "6d33316a86e8de801cdf84507714eadfa66e78343a1cebb0c0dd7c34d41f7ee6/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "1046928194a64e15b4e42e70cf09ad518ebf23ddc55f0ed30c4fd668c68197f3/1", "f4ccd05b3271c386ee55d9876c7450012a3b361e5065c09dc22075e38b3cc35c/2", "ac16459c146dc9e9210370f2b349f5c9cbcb5fa0c822148e9dfe35a8efca0937/1", "f4ccd05b3271c386ee55d9876c7450012a3b361e5065c09dc22075e38b3cc35c/2", "1c3fe1aadad1223f85f941109f0dd1df64bc8fe43ef4463232ce254b14860412/1", "b35e87b5838011a3637be660e4238af9a55e4edc74404c990f7a558e7f416658/2", "547cde8100a8b8c90d7b55d4c31ab14ffb7b1b468ad3782272eb074d48858bc3/1", "a9742eb8ee320e006666aef25ae9aeed948247f3125c9cafa7cf97b7e7467dd5/2", "43e3060875000143f5712916699f4fe6dafb638bed9e3a9c650e079209e4d0c9/1", "20d2add851bf39edcc6b5e830930f962db7e19dffa2cab8610eed551eda6c302/2", "1752859a9448c7bb68a6933e5697ca2de1a8fc7034f1c52cc96994c63643f117/1", "913f5d1da2feaf4deeccc9e55cbb350a20f12b3f507e87be85dbb77fdd3cb9bc/2", "142c8f45ac7be858b5c531865aceee028eb959ac56fac1d0258a9f828ba8256d/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "ef2d5627eccb7e30162a24e44d83d67823b91f263ca4b648e267fc13fe7793aa/1", "a52d136b3ed4d364bf36a1d091eb1cf934116a3cfb64c4d072c88815cf512084/2", "ea9dc3d3a051bf6960c12b2c214f1213510803640329b333f73e85165336b434/1", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/2", "7547875a6063bd58d701825c7c1d76a15c19f65a7f449ee2803f1384978936cd/1", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/2", "18908bce5e03a5faab9e16a4b3dc1a5f99d8d9f7e97e186c8b008c86f347f988/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "8bb6e075b5404cf1e7b7ac07da7ba754e36378ca6928b613d7a98471c5dbd493/1", "64f1ccfce174005a1d83ffc8d7413db7babcd7dd9347930f8dd7c7fd75735215/2", "aac117e6ba7d1fd163f5b8fdc26f44705a40331c41aa5d5bc3024911a6d2ed94/1", "90d7ec0f0acef104d8b6252794295f661a0149634868d02a1ae0c358099638f5/2", "ad10a78e7e2e647c22c1b3476301caf9df954690efa0d96e2aac86d32ceaac94/1", "f34754dad59c914120716265186f78bd58a0944b79c64117b0d2f063e3b35865/2", "19d2c8081628492a9e40b31d19befccac6039dd4cba06fde74c019b94ae0e9f7/1", "f34754dad59c914120716265186f78bd58a0944b79c64117b0d2f063e3b35865/2", "15ab76b5e536aa5a66c78e50502c6efd26ec09db8e5ca38bea4389af057eb146/1", "97b7857373a16844202fe36b681bb7e41e084c3187148dd6c96ca5d34a31a731/2", "b5d99e8d78eb44782287dbccce4701e816ddb075cf53fb1b723b24cdd103b5ca/1", "75d4545e08058067101c71bf2596a5fe58bb59f4c80e931b71de6cfe6a2c5827/2", "6678838171fa30b4b59a9bab93950d89d59e05db6af95721e736fa54e71d1f77/1", "11dfd56a36f80f39e148fcbb25840da31753a51535f17adac139dbbd6a9ea331/2", "c0e1b595b87e7c3f6d8d1643c7568aae7d9e92970b2405a044d15c21464de1ba/1", "0b35d3f74e6f6f0afa7daea0ab784e51673fd923af20a03494f285bd4f92b14b/2", "15ab76b5e536aa5a66c78e50502c6efd26ec09db8e5ca38bea4389af057eb146/1", "97b7857373a16844202fe36b681bb7e41e084c3187148dd6c96ca5d34a31a731/2", "8cd4e66f37d9992ef1d08e71e802ca753e313116b6f75b2d4709d46f248531cd/1", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/2", "0a173a72c802baee2722bfc242bf485c6ac92687b6d7b1143f0dae65348ee48d/1", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/2"] }, { "id": 2426, "name": "Programmers and Artists", "solves": 69, "attempts": 91, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "A company wants to hire a programmers and b artists. There are a total of n applicants, and each applicant can become either a programmer or an artist. You know each applicant’s programming and artistic skills. Your task is to select the new employees so that the sum of their skills is maximum.", "Input": "The first input line has three integers a, b and n: the required number of programmers and artists, and the total number of applicants. After this, there are n lines that describe the applicants. Each line has two integers x and y: the applicant’s programming and artistic skills.", "Output": "Print one integer: the maximum sum of skills.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵\n- 0 ≤ a, b ≤ n\n- a + b ≤ n\n- 1 ≤ x, y ≤ 10⁹", "Example": "Input:\n2 1 4\n3 7\n9 8\n1 5\n4 2\nOutput:\n20\nExplanation: An optimal solution is to hire two programmers with skills 9 and 4 and one artist with skill 7. The sum of the skills is 9 + 4 + 7 = 20." } }, "cases": ["9d2440e8113b909a1a9f06c322bc64f0bb4cb24065baea83cf2918a5b5d9ca90/1", "87796672d1f975a4d68fa87960896d15d5c8c349f84971f99d532db49647727f/2", "7551a351d577f584971e702a1bcae3de07ac123fc6288a007872e3723642d000/1", "0508c6ff665a3f3f2f959ed2e0d0c956bb56b14096b0510d85e60d675c4fee39/2", "4edd9585e0cd1f3c95b0caa022deebcc6620b8a6d970ae24362ca7a28fe0bd74/1", "5b85f715aa180eb38fa17a797e34d6df7e3ef8250ee8de665194eea9c84b4597/2", "b907b74dcc153c6d8e8a651895f912c8145f5cf900bebf32fbe15a7ebcb3f3af/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "ceaa7c434292b4ac10c4035be12f4dc1ed630a0c8b010045f40da20a4ba281fa/1", "238903180cc104ec2c5d8b3f20c5bc61b389ec0a967df8cc208cdc7cd454174f/2", "24c92c9e23fcd243b34d37257dded91a66fb95d4244c5647ea56bf65986e36a7/1", "238903180cc104ec2c5d8b3f20c5bc61b389ec0a967df8cc208cdc7cd454174f/2", "9dc3a8ad7fcb8bbb41d3634c62f34b96ebc8d2ddef13d49aac6d631771fb88c0/1", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/2", "115abe37cb0b94328d2744d767236de0ec320121ca7165114c0ec17bea6da2fc/1", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/2", "3a25c7ac36e8bd06d7783ba5a9adcb8e03a61b6370d5d4e5d66d336beffa4ce4/1", "b4954200c4fde0dc36bd14fb64c23faca965ac900b036bf71ef9c1590b0d56ed/2", "441acb659e2ee688d3ed77f13e96d90060c2c69f9ad2caede38c3cad8ca7a72e/1", "9a7f91a861f59c0cb27f0af9323d158fdab7740d5e3c8016a60f4b04c0fc41e0/2"] }, { "id": 1757, "name": "Course Schedule II", "solves": 363, "attempts": 525, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You want to complete n courses that have requirements of the form \"course a has to be completed before course b\". You want to complete course 1 as soon as possible. If there are several ways to do this, you want then to complete course 2 as soon as possible, and so on. Your task is to determine the order in which you complete the courses.", "Input": "The first input line has two integers n and m: the number of courses and requirements. The courses are numbered 1, 2, …, n. Then, there are m lines describing the requirements. Each line has two integers a and b: course a has to be completed before course b. You can assume that there is at least one valid schedule.", "Output": "Print one line having n integers: the order in which you complete the courses.", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 1 ≤ m ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n4 2\n2 1\n2 3\nOutput:\n2 1 3 4" } }, "cases": ["88401cdce0f0466b01d2dbdde250d17cab1a783cd5a7d82bba6da2a3cb8c3338/1", "357a1aa8a3008e3f9b37f0be0a62af4c3eed5e0e182b6e67a842741fb40b99f0/2", "0ced028f29c2605c8793e502f99cfadef8264253b9b84b8e2a971245ee6b86b0/1", "c3993bc08af292828c19080ac01cadcec387d3a976e5837309059caecd353da6/2", "5d2beac13fe4c706a9fd144e9fba893875b3091496f68332273b03179666fd0a/1", "fce65a7157e06e7a587b48442b2deba936bf667c3d14bb698d5b3fe51a8dde29/2", "6221ac495490ecbe43eb651eceaf130e85c4f33e165d3de4108f81bd6eb8283e/1", "a6219d63f43bb8661e0a3c1877c8f6b3d0f62e6c258ba7784adb1ca8bc79ad96/2", "721a672a1f9d2942e76446818cf308ffa4524b306a7f531211940e4692e25c58/1", "b87a39aff5faefaea0df794dc8383430115ab85b4d07c7e08110dc7a617e82cf/2", "901ff4f665854ee698adc1b2692c9b4184420a154cd93b4406b787f3e0c17470/1", "5ad576077b3bf25168496b9459c96774c3024f57ed037fa14dd1bb0062a169c5/2"] }, { "id": 2174, "name": "Removing Digits II", "solves": 41, "attempts": 71, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given an integer n. On each step, you may substract from it any one-digit number that appears in it. How many steps are required to make the number equal to 0?", "Input": "The only input line has an integer n.", "Output": "Print one integer: the minimum number of steps.", "Constraints": "- 1 ≤ n ≤ 10¹⁸", "Example": "Input:\n27\nOutput:\n5\nExplanation: An optimal solution is 27 → 20 → 18 → 10 → 9 → 0." } }, "cases": ["4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "181210f8f9c779c26da1d9b2075bde0127302ee0e3fca38c9a83f5b1dd8e5d3b/1", "f14b4987904bcb5814e4459a057ed4d20f58a633152288a761214dcd28780b56/2", "e150a1ec81e8e93e1eae2c3a77e66ec6dbd6a3b460f89c1d08aecf422ee401a0/1", "c7e41da9fc48191610372eb41b38ba81f41d5c221918e6139c9c24d97da0bff7/2", "6d78392a5886177fe5b86e585a0b695a2bcd01a05504b3c4e38bc8eeb21e8326/1", "d5f3f1e16be40a9a7e759863bdef8e99a2df56b2f1c58dc77d17236db939ff4b/2", "a98e47ca517100b4a97689699376c07857af643fe44407c8a07a8d318bd9da30/1", "64eeafa98f1926d2caa066f7f4088575a27b4e0a20fc086b35ce8d363c625972/2", "4f09a799c8467b220b22ebeda6ac0d9c411888516bc770960b1681deab1c72b7/1", "b07ec647ed225581bffc0dd977dfaf170cd2d0570cfcf928ea0f3cd4f26a4a23/2", "e10c470a2cdaec8a0d8e98a2824acc11f1cb5270f6450a57ac39e7055ad7c3c5/1", "c2a097a9cc72fb2b76718801145464e449b1072f184cd126cf517d4ade376957/2", "b8650fe462b5b738b2bb69af1d3c3f16974db285c79025cf1b98652763ff509a/1", "1ee46aff12307a47742c19c803b9008edaf095c06913fd53cb30a38a6b296a68/2"] }, { "id": 2180, "name": "Coin Arrangement", "solves": 46, "attempts": 68, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There is a 2 × n grid whose each cell contains some number of coins. The total number of coins is 2n. Your task is to arrange the coins so that each cell contains exactly one coin. On each move you can choose any coin and move it one step left, right, up or down. What is the minimum number of moves if you act optimally?", "Input": "The first input line has an integer n: the width of the grid. After this, there are two lines that describe the grid. Each line has n integers: the number of coins in each cell.", "Output": "Print one integer: the minimum number of moves.", "Constraints": "- 1 ≤ n ≤ 10⁵", "Example": "Input:\n4\n0 1 0 1\n2 0 1 3\nOutput:\n5" } }, "cases": ["cd55ff0fca4e6c4f95ae19085231bbbcc7da4696927125e4dd05ed02311c8c48/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "2a61eaa0397c1d6a325841599b47a128ed80791e58fc1ab0896c468daf72e6f9/1", "eea8254c7500ba3de996aa8ad6af399183f04e17d4a8102fde539dbc93a90012/2", "aa61870b3946084505c0edcbb31743447745cfa95c1abc9bc29c4f7f2085e7d1/1", "238903180cc104ec2c5d8b3f20c5bc61b389ec0a967df8cc208cdc7cd454174f/2", "4b557bd182dc3191f9eefab31105cedfd1ea954357662489a1f9e5b8c20c7a3a/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "06daf27d776741c95c78ced8bc43459777743c4f6bb2252f24bc4bac5bf1b543/1", "942b4856e340af964df8a12f8092d95c62275c48f061d724cbfc97b499ba78eb/2", "d9a41616c9a46ad49831163e066910d92b431621d16654bdba3fde5bfbdc7060/1", "6b6f766fdc6e43164242ae3031266a348fe49fd283a94daee7675260b6b8cfb7/2", "5ad64af579d37ebd147f94e8ee491c1e8268d8484f569a7189480d02f7ba4573/1", "08f0b7f4087f4bb14d33355b87834ca759d0fa19a13850509dcf9db711f47910/2", "64ca2968702346ef6e0fb663b6a2454b00e7f807becd1098c9a7234c383057c6/1", "f902fee439b3fb0b188ae0884b792a4cccbf896ccbffe2a8c812a698d54a226c/2", "dd8bbb6db26d69b79e1f4b56f22050e3187ba7ed3c09bcf74e45a337a05c06fa/1", "76a4be896009e577845c270d27b74f35345376794a1a31d906ffc20ca51d8514/2", "3076b67191c9f8744d985c420231728d027566cc50ddbec42f00986f502b028e/1", "fb47a71bcd8c514a6737de6847a4231363525c398e164dcc026aab0181e1614d/2"] }, { "id": 2176, "name": "Counting Bishops", "solves": 64, "attempts": 71, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to count the number of ways k bishops can be placed on an n × n chessboard so that no two bishops attack each other. Two bishops attack each other if they are on the same diagonal.", "Input": "The only input line has two integers n and k: the board size and the number of bishops.", "Output": "Print one integer: the number of ways modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n ≤ 500\n- 1 ≤ k ≤ n²", "Example": "Input:\n5 4\nOutput:\n2728" } }, "cases": ["3f11ad6bbc7ecca0b2416b713dee77f1a635c00aaeaa946e14cde1c2bfae56d5/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "dfac347cb71ae693ba8a54687f7112aff24ec67f88a3c66f69a7bf968fa2ac16/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "f65ceaae246de02135c1326ff5188bdd166c9749c021c91e49c0b9a79f9c7262/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "337b794ce718a09a620090d53541c3b4640a64133bbee2188444810cd3169f81/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "0b6693b0fa788f42f92edb0721ac4da7e1b22ea0c796913a2c5e83b6271cfaf5/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "710be522d9548d4fada099b9516bd6e79e419558a0f84e9d3486b9f83876afd4/1", "fbd059c96ac09f3cd1d2c66fc4f99b7250f19ce500ffceaa4744bb8dbea5fbac/2", "1c42ea2db4dad9e0538978948f3976fdeb17d0eb04a4741e3c2e23118a68bba4/1", "33988f5d8e22ac3949ebb70abbd1ee991eb5ec157dd9071b58f04d2c432bdd79/2", "3fb297c299232f8dfc33169d9612f0380d6958f02b2fc314fb91cde57b537c13/1", "ac2795dfce1a5189ce03123a72a11bd8fdb98fd282aa25ebee55e25c72dc1a7a/2", "29429e963298d212cd2bb7f5f5faeac3e6c3dd822c876f1a8ba61b9ba57ced88/1", "07401f08b1b13359b192f5a3da2f3ae9d08037a5d32ac516249753c23c3368f9/2", "eae528b76c3f4b1ceeadecf7a68ff81e965bdab1d81c01e360dc6a9f5550f64b/1", "1eb8449bbe7e84562fedaf7a1d8d978dee28a7fff12ff019a673d906cb9e49a2/2", "658d3da6501459c7f91de5471a9267eeee5b3c875b29156e659715150ae875dc/1", "8044ba2490f5cfe3975f23b402f2f30418727cd994e8db60e2b4923a4e09b79d/2", "0af63086607bd2b5a0ba075365be155c2c14de33dbd0a15079aa32ba1d4b47c8/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "4d6d6359640daa63cb54b58f5c85fa4f5305a4ad145f2e1f6abfe189c74b24c7/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2"] }, { "id": 2432, "name": "Grid Puzzle I", "solves": 91, "attempts": 104, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There is an n × n grid, and your task is to choose from each row and column some number of squares. How can you do that?", "Input": "The first input line has an integer n: the size of the grid. The rows and columns are numbered 1, 2, …, n. The next line has n integers a₁, a₂, …, a_(n): You must choose exactly a_(i) squares from the ith row. The las line has n integers b₁, b₂, …, b_(n): You must choose exactly b_(j) squares from the jth column.", "Output": "Print n lines describing which squares you choose (\nX\nmeans that you choose a square,\n.\nmeans that you don’t choose it). You can print any valid solution. If it is not possible to satisfy the conditions print only  − 1.", "Constraints": "- 1 ≤ n ≤ 50\n- 0 ≤ a_(i) ≤ n\n- 0 ≤ b_(j) ≤ n", "Example": "Input:\n5\n0 1 3 2 0\n1 2 2 0 1\nOutput:\n.....\n..X..\n.XX.X\nXX...\n....." } }, "cases": ["8636ec517d397fd5e92e4971430b7f56411bba2bc0fc3c5f55f82aeec40bbe8d/1", "dbab776e658efb0f27c8be866135945df910d9ef99ba902342f039289ac7bce3/2", "3ebeb5722fb097e16be66e30c9434cae9c61ca6f02516b5941a01ed9c53af04f/1", "263dd1a0229ef399d6a2ad116fa3dffee7011b5f963c5fb5cbca877a96b2d01d/2", "193595360621f54a61928cd52224af003dd93ff972898fb6890ca3477e4950be/1", "8ef1a097b1528d20d277fc3e94c64a6c81c6368dd3b92ac52538bb2b8a74b54c/2", "9bdc9cdf01ce617b6ff2263757d1c894ce3a8734cc8fdd54af58869bbfd24ec8/1", "1c00f2c937fdc0feda0b8e07082e80f5e7565988343bb5557b7ee409a1992c09/2", "1d584a31fa0b689b84a247199c89a2f7472258f33c23550234f410530a74f564/1", "88b57eb2e32189647674626280897b24cde7be0460f90a666c3ff129322506ad/2", "ada5cbdf73930039c5a2f961cfad085e7df792c894c5fa36c288f2cfc8230722/1", "94b50a8c332ee50de1de1b8ea60c2d5143f9d8c4d9426af7d4d9cccfb6696111/2", "08b39ff7dfa09e0f77bbc02812eb8266200eedd83fc357560e690894e4f0c2b3/1", "94e5b62bddc712236f4c188f41ee951455670c34b7e99cd6bc2902b507786bf5/2", "4a7fe8e92012621cfac6479bbd7a7a4abe67c7f33ac7f120075307cfbbfcfe8c/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "79c1b351010ea5d68574748f64c1c6525d8730c68d8ebff2f8fe4f3111c43dea/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2", "a714acf0208a1a2e55902965ae577dcc30aa50e1fb1ba16a525e7f5cca653428/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2"] }, { "id": 2131, "name": "Grid Puzzle II", "solves": 62, "attempts": 68, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There is an n × n grid whose each square has some number of coins in it. You know for each row and column how many squares you must choose from that row or column. You get all coins from every square you choose. What is the maximum number of coins you can collect and how could you choose the squares so that the given conditions are satisfied?", "Input": "The first input line has an integer n: the size of the grid. The rows and columns are numbered 1, 2, …, n. The next line has n integers a₁, a₂, …, a_(n): You must choose exactly a_(i) squares from the ith row. The next line has n integers b₁, b₂, …, b_(n): You must choose exactly b_(j) squares from the jth column. Finally, there are n lines describing the grid. You can assume The sums of a₁, a₂, …, a_(n) and b₁, b₂, …, b_(n) are equal.", "Output": "First print an integer k: the maximum number of coins you can collect. After this print n lines describing which squares you choose (\nX\nmeans that you choose a square,\n.\nmeans that you don’t choose it). If it is not possible to satisfy the conditions print only  − 1.", "Constraints": "- 1 ≤ n ≤ 50\n- 0 ≤ a_(i) ≤ n\n- 0 ≤ b_(j) ≤ n\n- 0 ≤ c_(ij) ≤ 1000", "Example": "Input:\n5\n0 1 3 2 0\n1 2 2 0 1\n2 5 1 5 1\n0 2 5 1 2\n3 8 9 3 5\n1 4 3 7 3\n0 3 6 2 8\nOutput:\n32\n.....\n..X..\n.XX.X\nXX...\n....." } }, "cases": ["917af83276f67ebdd3ac845714f6633cc9e79fc02b0cb1f22d580227cdb809b0/1", "6f6ed52013e2e1f3ce4c0a9c3f07e7e0ac7268743e48463df05a7b72195917c3/2", "8edc2f16e08fed62558e3223f8e43e0c0695d40043c0798f6bbf6690d843ad25/1", "4893e17d4d616c73157a4ce5346711012417ad2c75fdd7584f5d5f3e320531ea/2", "78561fdff218ced1fb322abb2372bca5482331cb671b033e4917f8f3abf3e124/1", "3e1298de8b5b68d9c74fecef1a71f72c91a4cc74aadee561b1c30359f3939bab/2", "2da00a4f067f2b9753b1a370dbd5a64d2a81a7614f565f08abbcc4b2b1a19c81/1", "9d144c77b1011e664c330a40bdffe1ba4dd654829d1dc40b3cc3dbb22ea06cb3/2", "64d275ce01bbd8e1e67a3c425769316816db6c54bc784b24c74ceadbba5a3aa9/1", "f600f3467fe82c1e2f98ca4cd0e986be109334596e33293318a5a37a54061050/2", "75e12996a852b2d181b987ae42d877db88ba81500c425e4df9ba9a1c83f80bd3/1", "694399e8282c21279d5a966c7d4adcaa170d94dd7012c0dece2a269af83d89e8/2", "75a17c0cf086a2847b7645d5a98c3450a014df82331e3a0d0eb1611e86fdf5ed/1", "dc1582cf1e42fdf4ab69398923382eea3a1c7115336b0f505ec03ec03f435ca2/2", "03ee5220bf22f67a622e1c054fed178fb6f9936185ff6e26021ed62b1d979cb1/1", "ee3aa64bb94a50845d5024cd4bd20202a4567aed5cd5328c0d97e9920775fc28/2"] }, { "id": 1080, "name": "Empty String", "solves": 326, "attempts": 403, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a string consisting of n characters between a and z. On each turn, you may remove any two adjacent characters that are equal. Your goal is to construct an empty string by removing all the characters. In how many ways can you do this?", "Input": "The only input line has a string of length n.", "Output": "Print one integer: the number of ways modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n ≤ 500", "Example": "Input:\naabccb\nOutput:\n3" } }, "cases": ["6989db0c1f6aff311bf2e3a84a0f986bb8c9d091d95f69b40309f1f93a5e7b5c/1", "3ae7b953d7072b50a4e0363b1de5e2ef83049d398962d7bb1b5b1fed18af3566/2", "4239974b85dfe901b553ab38c6068ba7a2ce675af063d507c8fae45fb74ec9a1/1", "4bd4bb34f2b45958e0d64c4f296338bd2e18b23c30a2feb8ad5329d309d487fd/2", "d0754c8b8ac4747b5784412177a8c1adafc143d488107c741919d8ecf01b694c/1", "c77b4eeeb6eb1d5b6c91c028efe37984e311fdac4313f472ca03765e3b85c5cd/2", "e440c008e836c3c4f41c3a8a9e86fbcb9c45f79560a92bede0d487a32c43535a/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "62c4711a07ef4e52e13a9336e0124fde57a27385c1e9a598a63c50de1df5053b/1", "ff723e85fab483a28f9c5ff042a5a6a7512ac866e2496d6d939abdc0e558b812/2", "02eb1fe26ef7d09ca8a92ca0e93b7ecbfec393c6d550772f742f96954006bae4/1", "8c65c78c1767be9162339da60d6581043e5620c22f367617f7d2fe5e1d5ceaa8/2", "c80035c42fe09176a43fb81676b36ebaf310dd91f16cdbe5871fd00d8e4d9018/1", "a3ca767db61409f91a7233e2fa4c8da2bc0a85171861bf6dfa47070862ffca51/2", "909da96f06866e152303ecac75a4790e076f0900bf59afd5ff3d9d9e16bb6883/1", "043789a2fad4f067a978198205a10e8e4381e6c66cc44c95050e3416004c5866/2", "351c7a23d3dd7534a6ba86439773aa30b241d78a283d707d9e9c83408e83b17c/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "06759b3d4132b08bcf928d0f9302d0ef8b45270d2df9b125f526cf08dda9592e/1", "3ca884f6c76453b81f936f02018ed5d076a2b489480a5003c6f3db8dcea1aee3/2", "1a707fc5a2af2e22f107e5c264cdbf3922574cffb2ac8db8229d18f6ea5f6481/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "edeaaff3f1774ad2888673770c6d64097e391bc362d7d6fb34982ddf0efd18cb/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2"] }, { "id": 1078, "name": "Grid Paths", "solves": 232, "attempts": 293, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Consider an n × n grid whose top-left square is (1,1) and bottom-right square is (n,n). Your task is to move from the top-left square to the bottom-right square. On each step you may move one square right or down. In addition, there are m traps in the grid. You cannot move to a square with a trap. What is the total number of possible paths?", "Input": "The first input line contains two integers n and m: the size of the grid and the number of traps. After this, there are m lines describing the traps. Each such line contains two integers y and x: the location of a trap. You can assume that there are no traps in the top-left and bottom-right square.", "Output": "Print the number of paths modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n ≤ 10⁶\n- 1 ≤ m ≤ 1000\n- 1 ≤ y, x ≤ n", "Example": "Input:\n3 1\n2 2\nOutput:\n2" } }, "cases": ["bd9d9aea8b12a9ba94f3b11486dacd6316b2baffa1931187ff3568feeebbd133/1", "fac3ecb93908d8a260b0f656ce35d0958ce00365be4974e291dbdb53ff9f38e3/2", "eb6c125c1ef4736cc8d10a4d973dfed7c31ad88fd93c1fc604def180de73a9ad/1", "d2301c49860f97886acb9a36f58a0e05b63615c76ef660f868c5036cd5ef1131/2", "ad19aa341bb91f40815f33c4857a43fa19bf9e8c3c65dcdd9b27717c7e93086d/1", "a299543503606f293d57b08a64641ea4979c54728d556f850da894c3bf94ae47/2", "bd4d120615e9cd6d099a830bbdf9e1f9b24e8770c679aec1dc33e6777d2990fc/1", "7fdda20dbf45e7422b7478e7113eb8cb325256b53a99c20de3d4e67c1067ac3f/2", "c4fdfb1cdeed56075c40a497e0782235b3529ba573ea7ed49ee8843eeaea0d10/1", "cec880a54c9109a063c7bcb0577ddf8e9c14b58b967972dc94050be94bd1a3a0/2", "38dccfc04b92db85749d6f7f82676c2875f68fcb7839c516a271042505e4f685/1", "9f40be7931ed7e06cb272579151bcf3f1915c1272e93c864469d38b1d368a19e/2", "f255f90d8b4999df18aa29bca31fc06e80d2b3d6d775b30b05ab8a7fcbba84ac/1", "17f33f079798c237cb291fc0c71d3f1310407a842d8dd32d406002ed3b11b205/2", "54bef05bdf7a138f7a0db46c42b2fcb95dc2aa13828b88d5360a77fc4f67a0f2/1", "29b94f7f84e911d033a256e76706b3ecbd49fda1734af41a50d20498927c166c/2", "c69126fd35b6bcbd82279fa02d1fac2c86d110e59ac6f0d356c52fe51bce76a2/1", "a3ab6afe31740fdf7ef57421086d4f4df6fc6acd17790d7f6cd2ec93922250e4/2", "a5a03a76cc882bfccba63a2ab6d36a09eeff5db34c3f98ca5aadc868562417b0/1", "f15f1f39cd7237b1ce79736d1bfa101c648dd67fed8666beb170cd9cb438f6d7/2"] }, { "id": 2115, "name": "Bit Substrings", "solves": 72, "attempts": 92, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a bit string of length n. Your task is to calculate for each k between 0…n the number of non-empty substrings that contain exactly k ones. For example, if the string is 101, there are:\n\n- 1 substring that contains 0 ones: 0\n- 4 substrings that contain 1 one: 01, 1, 1, 10\n- 1 substring that contains 2 ones: 101\n- 0 substrings that contain 3 ones", "Input": "The only input line contains a binary string of length n.", "Output": "Print n + 1 values as specified above.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵", "Example": "Input:\n101\nOutput:\n1 4 1 0" } }, "cases": ["01b2dbea99dd758786920ad9835b325942589f8704ae6d00cfd3376698e28f5d/1", "8c9cbddbeb00270d408408fe72f0fa658b6b63ecd572a4b641e88c23e121ad05/2", "66685461d984c40c129338875e6ed59ba8359cf385a0e8540b363d79c4b33071/1", "fd7971244902a6aac7d0509ba83ca56de1017de7fc87a3c506f111f8fe8dbc3b/2", "0d2c48f402812585f3c0869b53e356ee240fde2bb227d064a1a834ae58850ca9/1", "17448ecf3d9d7fa5a71f105f96e65ad9642055fbc4e760144f09081683a4edab/2", "a20b7140abff14cfeaba9dffe61268d7dd825ea5bf43d0dddfed184da724afc2/1", "2d348956db710c74bfefd0e2244285e2f30068fc88c970ba62c54c009c2e4c4f/2", "7063942a248dd7c96b3441b0dc4c8b34e334e0d3a86d6630c0e1108c21861604/1", "29edb035fdd0fa7beaf789df508c5cfd7986591a0a0195203929955514c0682a/2", "3f2718ef34d08a33b928a768d5a942ce7fad5ea5871b5b9935960a88c1b348f4/1", "83c27aaa61224a0bbf17d5d845e3f3d182c34ead99913e3c5bb892f7a89627c8/2", "cacf912e27c2e97c8123f03f5b74a3df830d7d0e6a54174ee6bccb25443602d4/1", "761860460e9bf632ee6edd7aa920dacc72bf0e2a1dd13f9a125ad8074eddde37/2", "04150dcdc27f95cad175ff953bb7b511d710fa6b84f8df567e181cdbdf8f4cae/1", "97399fcd6457a705e5d32eba0a6abe3c0939b1be72a9f881836bd6262481cb4a/2"] }, { "id": 2075, "name": "Reversal Sorting", "solves": 59, "attempts": 79, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You have an array that contains a permutation of integers 1, 2, …, n. Your task is to sort the array in increasing order by reversing subarrays. You can construct any solution that has at most n reversals.", "Input": "The first input line has an integer n: the size of the array. The array elements are numbered 1, 2, …, n. The next line has n integers x₁, x₂, …, x_(n): the contents of the array.", "Output": "First print an integer k: the number of reversals. After that, print k lines that describe the reversals. Each line has two integers a and b: you reverse a subarray from position a to position b.", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵", "Example": "Input:\n4\n2 3 1 4\nOutput:\n2\n1 3\n2 3" } }, "cases": ["df297b5fc75833f4540c3e8a1d48bf3d1cbe39720952b6867470e2d313f62002/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "8a3fbf51431064373de4648222c041f83407271ba9b9bc5e8bffa1e44070f105/1", "601f31be117878dd68bcba391e7496582c2f7dfd106ac994477c5e7d804aaae1/2", "30d40f19e5d11605f338924741800a14bc613f1d941501829b4d2591812ccf60/1", "cca0aec83d02d098897df0c16b91f91d88576c2aebb52262086ec15b1a87b55f/2", "19d1cd7cb77ed50c4e0b06e6b9566a81a317c918dce6f86323d450e94908de68/1", "b0517c14032e46b086bec16494b57ece8c900814106c2102bd1220379109ea9f/2", "b24ff143cd7c169755fe87771cab16ac3d719086b1f219f9720e0f57c5a248ff/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "33defe76fab9c01d6b66fd5a6b17e1036d8274832b2a0e80847d973cfc8545db/1", "b1f9be40c2cb4c155a36946f4ecd4d97e13cea87044f179c8c154b56fe11a554/2", "2f9be3499174e3b3976b7c267fd9a6fa62a0d5766cef6ce5e78479b85fdd3c0e/1", "323292d7b29c15bbc1e0270be85ee15e8a04d9a4a20c75721870edbf47125094/2", "c895bc9e07751438a58392d036035e5bac9c3a92cb0371043421a14000d98292/1", "b706deac7d314d8d562725cd2f7ba7aca1c1a45df5575d75740254e9bdadbb85/2", "0be5594fa61710760bd37b2df0a27dfcafac84e8d0e0f9184a205ed44ece3146/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "98acc55246bb1e4c7a1327c0698607a0cd5d380a527c354433911a7615b3b4b8/1", "ab8fad05aaacaede10308a225408ef33a2e9567cda00742ae03d8a9054149518/2", "07d36c1bcfdecf6ecc544f97199291a3f0a671d1df78e95215a2f4aaf9e07a43/1", "a41de1305e8fed1aafab9ac4e96bccfb9ee73661d82aa554922bf25fedb65132/2", "57ed04e8322701613576c0ebd0a58d6aceae761ff83a82218cfa8bcfc4c147b5/1", "d0826c82f995a84717de5f6e981986269c7acf6f48f1e68321de65431c8bcf54/2"] }, { "id": 2421, "name": "Counting Reorders", "solves": 43, "attempts": 60, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Calculate the number of ways you can reorder the characters of a string so that no two adjacent characters are the same. For example, the answer for\naabc\nis 6, because the possible orders are\nabac\n,\nabca\n,\nacab\n,\nacba\n,\nbaca\n, and\ncaba\n.", "Input": "The only input line has a string that consists of n characters between\na\n–\nz\n.", "Output": "Print an integer: the answer modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n ≤ 5000", "Example": "Input:\naabc\nOutput:\n6" } }, "cases": ["b485703407a40afa06d06d9baf378f602ed549bc944e5c43940257b79b5ad539/1", "93a73825c1b761d11bf2b3f4dff760d07888d3fde05dcf55f1da84aa6041a5a8/2", "9d8ecac4b7b020a1f0909e0a839dded0759a5f1b3d4421f39073a5a7210feb24/1", "579c81f568f7c29e169413de59514e21afa79aa0787df62272e11a71fd42dabc/2", "4c988b1f1ec035437c227eda5329d9ecf3fa16a7507507d0809fc21bbe2ddbf0/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "c7f174e71c03353e3a4f290d4858c7950bfdb1a5cb650fc0ebf3eccccc3b2d29/1", "ad12367b71c5a000bde73bbdd4207baad0f8f35af5d73de8b9cd8a98d994cf97/2", "4bd5f353821b21ead3340eb5072b22a48c27bd189fd9d3b693feea0d9b6b38fd/1", "07df8f8762b9f58b71a6258b300c1f50a23da8523c7d47e21e1f890b5a411297/2", "122b5eec131d99291d6f1c15a1d5a2b125b316fafabf9df768cdf1f9f9b3b9d5/1", "5e0eea46ea17c9bd5f49a115f1a582309d4c0cdbc5c588ec99ecc53d08932751/2", "06b86226a64ec4778a85bd710d89bdb118acbf7ebe9a418753a7aed0aec02d3e/1", "e9f4f5a656bac88f44f425dd96ac1876ba0bf39c77a44477829659447236eb90/2", "ffe4ffa4b00fbbbff3ac2c149b4e36c985e01d7844262e9cb91f3da86fc7994a/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2"] }, { "id": 1159, "name": "Book Shop II", "solves": 269, "attempts": 299, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are in a book shop which sells n different books. You know the price, the number of pages and the number of copies of each book. You have decided that the total price of your purchases will be at most x. What is the maximum number of pages you can buy? You can buy several copies of the same book.", "Input": "The first input line contains two integers n and x: the number of book and the maximum total price. The next line contains n integers h₁, h₂, …, h_(n): the price of each book. The next line contains n integers s₁, s₂, …, s_(n): the number of pages of each book. The last line contains n integers k₁, k₂, …, k_(n): the number of copies of each book.", "Output": "Print one integer: the maximum number of pages.", "Constraints": "- 1 ≤ n ≤ 100\n- 1 ≤ x ≤ 10⁵\n- 1 ≤ h_(i), s_(i), k_(i) ≤ 1000", "Example": "Input:\n3 10\n2 6 3\n8 5 4\n3 5 2\nOutput:\n28\nExplanation: You can buy three copies of book 1 and one copy of book 3. The price is 3 ⋅ 2 + 3 = 9 and the number of pages is 3 ⋅ 8 + 4 = 28." } }, "cases": ["1f81386679a6a91273c196a8160ee8c608c5a82edcce7ae9f2c6ec6608de0994/1", "eea8254c7500ba3de996aa8ad6af399183f04e17d4a8102fde539dbc93a90012/2", "1ed5a75a061c9f516aed185a417338278caa67cd17e4f2a34f5a90c2dcb2874d/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "195b69eefb1dc26f8f7ae17f59026797f0640b79cb873b58941d4e83b50ad55a/1", "c985003ba6d406a00f9d7f5ad3880c309dc9ce2ae33d5c4330beaea3bc341f58/2", "567811d5cf271d9228cd01bc99a724db3bd1df63d53550a6931de8ba8cd814d4/1", "5d36f51376d3ea6ffefb83243cff64096eb93d4b813136c58d910facccc3a7d0/2", "6e09a6547f18794a6ec26dbb24b5318927659965365679c4522a0283b6da03f1/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "f14dc5d474485d8197a2f5e8794f923c138e27bad8dcb08599c8061739f96d0b/1", "207a4df72217dbc90e17c37835c2e4207de2a0da84fbd6860b7fbd5937feeb07/2", "f44b633e48aeb5566eae04247636d5c218d265ebf6b5c9e46e70981cbde35e01/1", "60fa9e61a407775c0f6ef9d36073185ee2c3d25f1bcf3ae3534e01461c25448c/2", "b00be93cbbca0c9cf17863155aeb1d86934b3a53faf1d01c1541a5730411f5ab/1", "6a2397461395bb02997641a2f7d1bb6792b8905791440383d83b2993357d87f4/2", "aca994dfd26e79b2d89b385bc4e1827fa67e3bffe1f22ff1939c2bd9290569dd/1", "d90693ca50480a37353ca03dc83fa3c3f020c91bc2eb46726350cdcc0cf6af70/2", "bee6bfef5b958bd473d9acef23a235011334e4cdb81e6cd6b12b21975aa0d9f6/1", "c89b567ee2b34bf6d4417c9086ca183671f756a733dd98b58a97140d687f1fdf/2"] }, { "id": 1677, "name": "Network Breakdown", "solves": 243, "attempts": 256, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Syrjälä’s network has n computers and m connections between them. The network consists of components of computers that can send messages to each other. Nobody in Syrjälä understands how the network works. For this reason, if a connection breaks down, nobody will repair it. In this situation a component may be divided into two components. Your task is to calculate the number of components after each connection breakdown.", "Input": "The first input line has three integers n, m and k: the number of computers, connections and breakdowns. The computers are numbered 1, 2, …, n. Then, there are m lines describing the connections. Each line has two integers a and b: there is a connection between computers a and b. Each connection is between two different computers, and there is at most one connection between two computers. Finally, there are k lines describing the breakdowns. Each line has two integers a and b: the connection between computers a and b breaks down.", "Output": "After each breakdown, print the number of components.", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 1 ≤ m ≤ 2 ⋅ 10⁵\n- 1 ≤ k ≤ m\n- 1 ≤ a, b ≤ n", "Example": "Input:\n5 5 3\n1 2\n1 3\n2 3\n3 4\n4 5\n3 4\n2 3\n4 5\nOutput:\n2 2 3" } }, "cases": ["722f2c91c70b63cba43c00e9b6a7d060e00e25596cf219b7ea4722091e73989d/1", "f2e297d14c98d6b09cd2ed79d6281f3c918c5f36218498e5270addb3f9268604/2", "f8b36f0467529b53c19092dc744397b9cfc4482109446ed3b90b9a49b2705f9c/1", "937cb01268556d7d3101629bf602c9cbb70a8cdbbcd48f1f707e0e8eca40c33f/2", "48d15542c0c124eefcae4221e26a8b57ea2101941345d683ebc6463b87978d12/1", "447ede2e3806f4a5a473f192b436c02c9e4962c47904f03b3bd3d62f15ff1e42/2", "3e362bc2b498164e483baa43da0125e3cb267924ead4cce070feff3d48978265/1", "f2e297d14c98d6b09cd2ed79d6281f3c918c5f36218498e5270addb3f9268604/2", "2caea5080ecf349413cc57b435fa2beaf91a509340ac0cdbf3d2eb9aa0f23ade/1", "f2e297d14c98d6b09cd2ed79d6281f3c918c5f36218498e5270addb3f9268604/2", "2b4f6235f51b888d818782bfebb6f7b6c08d7a6a2140013ddc02271c6ef32237/1", "6c003d65d90877a848bf35ac0acd09fa87ca6fa4a0d9e200ce724a174c49fbfa/2", "51ae8247905eea43822d3663f2d89c13ac9dfd68cec9d53ade4d7cae7d316abb/1", "28ab3064997140b47719c85ffd3c4c1ff0b7cbe7c5b26778b98155dafaa759f0/2", "dc10949e3f54621fa48151667c2ea1969fd63ffc20b38228d4d9321f67e76bdb/1", "d752f8d32e648be54a2a38f3be88f0dafaa2b49d2fa766c816a9fc3f9590da29/2", "68e0f7a36d16895b1e19560be057a998eaaeb9b9ba0d7ed5b4e73f6ed56cc1ac/1", "887f234e9d569edb3eb50ccb5e76c9f7b696902b00ada3ccdc773c6bc4487cab/2", "affb40a268ae4c92cf3cdfe0601208b02898b8cb467312eb51f47e61eae98063/1", "e2ad623448302ac2080acdd9ed50cc0f9be7bf0155684843893e57f1aa18f998/2", "aaa51abc336fe5688c9ac65b9d31715f6c225823dfc3b46417b7d6542c63019e/1", "0f7776409f404fce88505203586fdf63a2315e764e2c27fbbe0bd09623eb73b6/2", "a6cdea4bc61225400963f5d178adce29c8a95b4785bab0d438a135335f91e414/1", "52e09ac890cd0e93206b46a4f8b4e5b1da6f24c94a649bd61c718544bed2bd0a/2"] }, { "id": 1203, "name": "Visiting Cities", "solves": 187, "attempts": 249, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You want to travel from Syrjälä to Lehmälä by plane using a minimum-price route. Which cities will you certainly visit?", "Input": "The first input line contains two integers n and m: the number of cities and the number of flights. The cities are numbered 1, 2, …, n. City 1 is Syrjälä, and city n is Lehmälä. After this, there are m lines describing the flights. Each line has three integers a, b, and c: there is a flight from city a to city b with price c. All flights are one-way flights. You may assume that there is a route from Syrjälä to Lehmälä.", "Output": "First print an integer k: the number of cities that are certainly in the route. After this, print the k cities sorted in increasing order.", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 1 ≤ m ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n\n- 1 ≤ c ≤ 10⁹", "Example": "Input:\n5 6\n1 2 3\n1 3 4\n2 3 1\n2 4 5\n3 4 1\n4 5 8\nOutput:\n4\n1 3 4 5" } }, "cases": ["f1a1d2dd0468058b99218d1d395257492d2c280e1209df1d01198a9142358ede/1", "f7ffc2178a305b47038e8205d4f77b1ad7177f525b1abddffcec080cfff207d7/2", "980e154bb45cbe0e0bca630ff451471450ba527c13ee5584df939b164e45980e/1", "210c570fd5fd0a2863835b1c24da28e181b8b496433c942f9d7deffdf0392e82/2", "4b577ca466eb43a1ae4670b3c4cafe1d33d59256d0ed5511ee6b89f7c8617e8c/1", "634e4e686e996539a58f7b5f8444958cefe386210f4ba28c576c6d167e6c7f79/2", "df88587f708611e13d04e7490c23f3a0d2a2616acfa0081e5b284d8e3915f3b4/1", "57c2746502d7b4e6ec6746f7303578316174fe43c1b4305085423075b66ac032/2", "8b97f912b615f58f6a18249e1dc68a9e92e3ac9b7f30d5a0ef9fa9d013ec0dbe/1", "c8e99c48fb2a7bd77c800e86d63492b3f9a71ff459d0b3226c4df6e2bec4e10d/2", "c97f42a061ca421ba536dad7f9e0067af4031415b056f3ffb7646626dad92bb2/1", "9db9079a9167d881eb75fdf26d6d4300faa5d08efe47e268e5d77ad44e44f530/2", "1ed7447ad1488201026ca9e85492d5ee9b19ba225dc27ea8f6ec41153a72343e/1", "0c10741030c40bd5eec8444e24a94ba4ebc0ce316f8bed1e7d24853629cc6296/2", "a45da124e313c60fe287ea16712dff381725c14aa65b88edb2a3c810ab2d02ce/1", "9ca38a68fdfa2b7f316006d9027a86a7bdaeb765664917b747a9080286be5549/2", "fe99a7ec244cff7d7c3699a315e145528f54d1f7fc7278d32cc57646ee7b1749/1", "14dfefe7f3bab26328a964210c4d995c76634cdc2d35ceb0c60d03fab68df3b3/2", "1da851a7ae0a56abe2ab5b525ba349b9b9e22967fcad935dfd0cd082a69524a4/1", "255a8b80f959ea657f7304083758fb4742258179c6df798dd7853254a6465874/2", "099dbc78d1bddb22a9ba041568000ccd14ee77c5adc89f3e6318dfea136889fc/1", "ef3edf703fa82d649da8b49ba959a03acc8d7c66e768239c7d25315c677d17e6/2", "8e8d747b28f314d70a84e1a84165e03fa589e1ad04f77eaec2f267c17f12acb3/1", "ef3edf703fa82d649da8b49ba959a03acc8d7c66e768239c7d25315c677d17e6/2", "568cb079bf30e766ac2c987f4f1bb9e8581a1a8c700bdf382854577b3b0a8539/1", "228b2a25521fa3d43cfd5ff82ecdac15526e5de0847920bf386a92ac9ceef32b/2"] }, { "id": 2184, "name": "Missing Coin Sum Queries", "solves": 53, "attempts": 80, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You have n coins with positive integer values. The coins are numbered 1, 2, …, n. Your task is to process q queries of the form: \"if you can use coins a…b, what is the smallest sum you cannot produce?\"", "Input": "The first input line has two integers n and q: the number of coins and queries. The second line has n integers x₁, x₂, …, x_(n): the value of each coin. Finally, there are q lines that describe the queries. Each line has two values a and b: you can use coins a…b.", "Output": "Print the answer for each query.", "Constraints": "- 1 ≤ n, q ≤ 2 ⋅ 10⁵\n- 1 ≤ x_(i) ≤ 10⁹\n- 1 ≤ a ≤ b ≤ n", "Example": "Input:\n5 3\n2 9 1 2 7\n2 4\n4 4\n1 5\nOutput:\n4\n1\n6\nExplanation: First you can use coins [9,1,2], then coins [2] and finally coins [2,9,1,2,7]." } }, "cases": ["b83898e6bfa5cc1c60ac457219bd41ef53b42b87dc5cffe36b93ffac800a6886/1", "dbb69026acb9634442dd41c4db43e0a09c0102915d69f832384ee08e880e12f0/2", "cdd19c4d683c1f85c03c5f0f2998f36e33d73a7989b2d5d5817460936b3fd546/1", "fefa03036a3d0de42f74041ae137fb8d56b81957b986327be90c741f1afe0f82/2", "d26f812f4399576dc068837f796caf069466bbaf5e8aadfe04eccfdf917ac650/1", "47261d6c016fd1e1cdef5913ae0347e7069d5a2717faee5c627a678f2f7305d2/2", "78e299f722378fdf4c3423f4db48cccb2867279a81e4a66220f81c0fdfe18279/1", "963c49580901b78695114d4673f7f5e88c6c7efaf0632e2e169c0406ec2400eb/2", "7416d98811996b5f415dc0dbd1237779ecea9fa48b000ced400dfc599219f008/1", "f0eae3302ee8788c10ef03ccc4a4c7438f355eedcb31fa09557fdba8a4098edd/2", "2c68c11de397d933d46ad7d34440b435b03152876b0ff36f17ccece538780032/1", "a908ca8f3d2b9cbe0314c0d15c4f76cdc25b0c54f1018781ac25957aaa5e7f00/2", "9fa34b3531972a0e2bbb4586da1317965c0e256411661fdefe770b0479e9fb9b/1", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/2"] }, { "id": 1157, "name": "Number Grid", "solves": 288, "attempts": 352, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Consider a two-dimensional grid whose rows and columns are 1-indexed. Each square contains the smallest nonnegative integer that does not appear to the left on the same row or above on the same column. Your task is to calculate the value at square (y,x).", "Input": "The only input line contains two integers y and x.", "Output": "Print one integer: the value at square (y,x).", "Constraints": "- 1 ≤ y, x ≤ 10⁹", "Example": "Input:\n3 5\nOutput:\n6" } }, "cases": ["3f11ad6bbc7ecca0b2416b713dee77f1a635c00aaeaa946e14cde1c2bfae56d5/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "f251ddc12234e0da8d3b778bd0f7463fb477f16f47757f5617dc8b4ff4d4f14a/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "b7ea1f3c2d566646713b53bd09d64591fe6d4c8b5341a5f27e4523b1bae289c8/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "dfac347cb71ae693ba8a54687f7112aff24ec67f88a3c66f69a7bf968fa2ac16/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "f65ceaae246de02135c1326ff5188bdd166c9749c021c91e49c0b9a79f9c7262/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "337b794ce718a09a620090d53541c3b4640a64133bbee2188444810cd3169f81/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "a279f0fe018bb1305d69ee251cd2a29919d20c910b86e3730fc1b857dd3c573a/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "ece3d232c1ca9ef8a80b6fdb1585b8f5cf653b9dd023b0521c8da64db859ffac/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "1dc008d228c479a1728c002e3b40df8ccf8dc403fe358057c73c896b9885480e/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "7565532738c83ca7c8741250dc7d2c6a4651a6c79933a1d59106ac3b79dcdc4f/1", "041e454e7567cab8b0c2b74d92ff7559419af6e2fb9d48e942f26d1fa3adf13e/2", "53fe9e9401abec4be2a0c35712ccc91a37d7489cd8b99f27bb3ee3e502f2d1b4/1", "48359762053dd9d478d77c012c0d4ce0abccff1426f125ac1304a182de09aa8b/2", "8bec1bdcf474b96903a4b27e12d577306329dc1de67dfb873cbf9ba0e36d2f5e/1", "acce9557f6c4a901413097ef70d9e4e4796e187de748fc96904057a658de50a7/2", "714d38d48c9a047a6dd3601900e2b0d13c9d87eb8af0a0556a5804ddf3cd34aa/1", "fe1daf088641148110aade37b36c3a2956c4be7353023b170f40ce5ecfa50e59/2", "0dc2e6471af299eaca51c114c467e0eb2730edc64d2e354e767a3d347b79cdfe/1", "ff1704442169e458a23e052ef47fb11faada11d1e946c3c2192d5cbfb59d3946/2", "d86caa1bc7d82a492e05cec1263d032dd23f6a491cf01c65eb7d5d59678d6913/1", "eea58443c9d4f452f8168c1dd9b93d9e0e98412a1a8c5c8d85c4ec811f90afdc/2", "7a9d0876f8977f2992903d75a1e6e5c67f1989a6cbbd4a63a483f2f039d4449e/1", "8fff69b174b8a81ec8460cbb35dfdd6e1c649ff14bc237fe23878d80c3a2cc32/2", "ed1a6c1982aaa7bb0ee969e4c1788d6e94dd4f4b1dd208824876926cf55695e3/1", "993a7910d6efd80f9aa5dc160f6920a18a2dd8adccd79c58403e70a2fea98bae/2", "e37177b9408792c9893fd53d963b1a3de59cccba2f7b1b1e9be049c0025d42d7/1", "79700a89a5f21246357fce9e705303a152857b2eb44ae9eaf3f91d084879e282/2", "90972e093a5c0ee0b333f13ebba2eafac97289a10cbd017f54e1ff386699e21b/1", "cd7879fe9661eaae4a12e6be7daf5bb4ad7b3c8cceed7664d9a311ab2126ae80/2", "0073cf03577a737756752129cc3abcb9f5a4069c705321ee2115574cc31c59f9/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2"] }, { "id": 1148, "name": "Maximum Building II", "solves": 143, "attempts": 173, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given a map of a forest where some squares are empty and some squares have trees. You want to place a rectangular building in the forest so that no trees need to be cut down. For each building size, your task is to calculate the number of ways you can do this.", "Input": "The first input line contains integers n and m: the size of the forest. After this, the forest is described. Each square is empty (\n.\n) or has trees (\n*\n).", "Output": "Print n lines each containing m integers.", "Constraints": "- 1 ≤ n, m ≤ 1000", "Example": "Input:\n4 7\n...*.*.\n.*.....\n.......\n......*\nOutput:\n24 17 13 9 6 3 1\n16 9 7 5 3 1 0\n9 3 2 1 0 0 0\n3 0 0 0 0 0 0\nExplanation: For example, there are 5 possible places for a building of size 2 × 4." } }, "cases": ["4b0d8b2d5b1f265b3d2f4f56491f40265457807003bddbf1b6d0b1fc4e627952/1", "97345817140665fc2d3e976a14b95b31bd776c45e3e8c7a7946181f595258b64/2", "41c67d0bd830d436bf60a143b8834d04e2ec9144a0d212573dd8a51828c41ca5/1", "c9faa842a3f326486cd54b82541c686153fe8e1ce70a9f1ce9ef73aa2386c90e/2", "6fa3662f830bd3cf3816b87602f613256aa921fdbe719f84b106d922e24f8deb/1", "7f76b4f998608efc075690955d12846f0be5e4ad5e6b17d530de6465aa15f3dd/2", "96896fe9c399a6cf5baa489cbf81425ade8b5ab598fd3afa75b8ca1d87700d22/1", "a05c96e3dbf01f4173fb8e20e8e91739278e9078519de4c9b591deab74b258c0/2", "de43e0698860b02af4ce18d9df03d195a2a6e053b31a89dc99cd70c674457e8c/1", "4ba1e35e733bd3fad8ecf46daf911ec27251f10ed3c65cc57adffbf48fd88499/2", "dead148dd7cba87fbcd9685d04c72ded01848b264e7ab0db51e9038f3521a4ea/1", "53ecabfdec4ef15fb6829ece319103eaab04bacbfc85e5c351bdf4930d6f4848/2", "f7276b0352ecce643b2dd61a76c226fd1b65aba3d820e833cbc1c7c93aa4a115/1", "49fabf7c736c8be019c8396ff9445c0a501a77580b24dc3464326f6c7c02b709/2", "a211984e68c5f97eac62d53be48c29ffd8a0608b7ff538404b99f24d5d010f4a/1", "9dc8230d341962b6d62b9a3ae9f75ea5e6794bd955d51627450e5227976ac5d6/2", "e385364660ac4fda3a577c9dbc6ff805d69f117de36aea373efb96cb40e59dd7/1", "03d7fbc517d207f0aad344d8dbf412022055c221fb6c174236cff21adda46008/2", "06c1dc3a74cb2647c2dbb0e1da1ae287a7ceaf0c59f837a454ed0ce80a9b749a/1", "6cc1aaaebd469f538fb7573586acf7804d7d05d12cf95a7e149d208ca9e89571/2", "3893d5dc2685d2ee0e1c6d33919abe3a9f2d6579c3e93a7156c02bbad103eef9/1", "a6ddacbfba229813058c11c4f41cb4e7bd9ab1349bd1d47b677e5f05de34b6c6/2", "7aa7ecf65b6dcd85a77edfee76ba5d2f3384d45b6929c61904367bfb06cd9e87/1", "db8dd01dd7b4bf440ae85533b917da538fdf96d51c448d10869b625aad6d26ec/2"] }, { "id": 2423, "name": "Filling Trominos", "solves": 44, "attempts": 65, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to fill an n × m grid using L-trominos (three squares that have an L-shape). For example, here is one way to fill a 4 × 6 grid:", "Input": "The first input line has an integer t: the number of tests. After that, there are t lines that describe the tests. Each line has two integers n and m.", "Output": "For each test, print YES if there is a solution, and NO otherwise. If there is a solution, also print n lines that each contain m letters between A–Z. Adjacent squares must have the same letter exactly when they belong to the same tromino. You can print any valid solution.", "Constraints": "- 1 ≤ t ≤ 100\n- 1 ≤ n, m ≤ 100", "Example": "Input:\n2\n4 6\n4 7\nOutput:\nYES\nAADDBB\nACCDEB\nBCAEEC\nBBAACC\nNO" } }, "cases": ["0ad36bb31076b7192210ec8f07e23b610bd092451cf7734d5d8c7b5be0558a87/1", "bbba401d3029dd9131444855a9e934e0a88956d50d9f65f3d2d256bbb37d7eee/2", "cbbe92511e6d1445878faa480235db85c0c028dc7d6cb666d19825d20389e531/1", "610e47be5a00e5c00a98469f305f26bbc477f72be85bffeeffbd20f96c82f486/2"] }, { "id": 1161, "name": "Stick Divisions", "solves": 655, "attempts": 779, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You have a stick of length x and you want to divide it into n sticks, with given lengths, whose total length is x. On each move you can take any stick and divide it into two sticks. The cost of such an operation is the length of the original stick. What is the minimum cost needed to create the sticks?", "Input": "The first input line has two integers x and n: the length of the stick and the number of sticks in the division. The second line has n integers d₁, d₂, …, d_(n): the length of each stick in the division.", "Output": "Print one integer: the minimum cost of the division.", "Constraints": "- 1 ≤ x ≤ 10⁹\n- 1 ≤ n ≤ 2 ⋅ 10⁵\n- ∑d_(i) = x", "Example": "Input:\n8 3\n2 3 3\nOutput:\n13\nExplanation: You first divide the stick of length 8 into sticks of length 3 and 5 (cost 8). After this, you divide the stick of length 5 into sticks of length 2 and 3 (cost 5). The total cost is 8 + 5 = 13." } }, "cases": ["854ed3a99d967ba716e7754e821a39d98e5ebbc29e68f5f79053f96fc839bd59/1", "ea243e5457028e97f9bc93b37a72f8e80ea61ae081911bb037765590ee6aa435/2", "72a18742c00dd8268abca1231f3f460c2ffe614a3688dde7ad2b893b6a38780e/1", "a9742eb8ee320e006666aef25ae9aeed948247f3125c9cafa7cf97b7e7467dd5/2", "87c826d46d76ab186b3a843e1e02b7a31862fe6457f747a1cb3baeb9cb2cc0fb/1", "c986fb64c609f5a7be1dc33884ea3fd9334119325878a67d47b26eec9e87c25e/2", "62924cd2580a166a0ac8d32355b50a7c9dfd642dac2a574436cf6e31739236f0/1", "d90619df02b3da86ada40e9c23eb10e251adea994736e6b976679c57ad7dcc80/2", "0bc142284d210b1402ff658c9020c7f4c5ccb08a58d5c74588d8a0ba4287de6b/1", "51d8a5263634fb35818b52c8ae6f9a6d2401ef33b03b62d6c97bbdb5c2993e68/2", "e77ebdcf041e57f9afe97856b82bc6e351462a56e14172a5b10b9e3e3100dac4/1", "9f9b90eda6173530ccc7a7d67578da915e063a93ccc8b51fa6f87bc4f134a3a0/2"] }, { "id": 1665, "name": "Coding Company", "solves": 290, "attempts": 369, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your company has n coders, and each of them has a skill level between 0 and 100. Your task is to divide the coders into teams that work together. Based on your experience, you know that teams work well when the skill levels of the coders are about the same. For this reason, the penalty for creating a team is the skill level difference between the best and the worst coder. In how many ways can you divide the coders into teams such that the sum of the penalties is at most x?", "Input": "The first input line has two integers n and x: the number of coders and the maximum allowed penalty sum. The next line has n integers t₁, t₂, …, t_(n): the skill level of each coder.", "Output": "Print one integer: the number of valid divisions modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n ≤ 100\n- 0 ≤ x ≤ 5000\n- 0 ≤ t_(i) ≤ 100", "Example": "Input:\n3 2\n2 5 3\nOutput:\n3" } }, "cases": ["69e03de69edb2fdd5cb73ef7c5ea360d10040b85506dc3d1ef386073c5f49ed7/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "b04f8920cf90c5426e8f21501a0c02b5ff879dabbe4b0caaf9755a90a3c904e6/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "adf33f622c31a1fad11d6bd584cbaf679148d50a67533cbc7c10f1ad10234bfb/1", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/2", "25e071ab4c711ee4f5a1259eaf82c042d6cbe5746cfe2d3acbb32f84e1184751/1", "673650f936cb3b0a2f93ce09d81be10748b1b203c19e8176b4eefc1964a0cf3a/2", "1c8c0aa69bd3b2cfa9b5386235a2a4eda9526600cd7c28764709f80dba7fbdc7/1", "e0d35f0fb1a0b415bf8911d01abceb1ed49978aa802b38c0b67bd4efb01fbaff/2", "dd235d472e63621b93b1e8cee50e8f3f268c7a2c4dcb07769ac1635daa71c6ab/1", "751905a4ebbfb8824918526fc877b3450faad4d7e835adf35072bccd9cd4ef80/2", "499c090f71270cb5afce78f822fb12c446fe4639408d384b3a2882aa35bd90b4/1", "6410d108f684e8c0327b7c29c5f000be32c8c0b8ce2338871ee21a56ae3b84ef/2", "6d18fe0f142958a386b0533642bd24ef6f4e5a2ea3c0886184643226a3dba778/1", "7a4302266c6fa2d92feea1b4d47897963ec237c8c170d78d9c1187c3dbf83426/2", "f42103a725ddd5e5088bbe5c736acc4e62a2b9ab3d7bfcc0197cd69ccc53198e/1", "3ada7a0bb567d62f4ac0cda299b69344f24cae83c96580b47bbb64f1659faae3/2", "0ae417cec2bca2fff9d1f8977d50822b31b530e835fb20d71a2e53ff0b60e3c3/1", "7361092e7d958ce0ed30dae504a39df56519326363785a4a9768898709cf6530/2", "ab10a1d362b3fafa129c66c14db4071b6e5ebb0caab59e88b122cb00fc4c0d65/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "857fff14bf527218d987255c1b80457c051e7f1a72407df951942aa6e46fc7db/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "19193ef23815da045ed1cff644ac8bd13158948ce15de15bd9f88882f8e829db/1", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/2", "9c53ef4406e026e8322a43afb5d78ad74c8a5ad745261e716f10c52b8bfffd42/1", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/2", "bc60149e99099768a5c3d6a8515571c381783d242b47bdc6b97ffd74fd4c43b7/1", "7361092e7d958ce0ed30dae504a39df56519326363785a4a9768898709cf6530/2"] }, { "id": 1699, "name": "Flight Route Requests", "solves": 143, "attempts": 161, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n cities with airports but no flight connections. You are given m requests which routes should be possible to travel. Your task is to determine the minimum number of one-way flight connections which makes it possible to fulfil all requests.", "Input": "The first input line has two integers n and m: the number of cities and requests. The cities are numbered 1, 2, …, n. After this, there are m lines describing the requests. Each line has two integers a and b: there has to be a route from city a to city b. Each request is unique.", "Output": "Print one integer: the minimum number of flight connections.", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 1 ≤ m ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n4 5\n1 2\n2 3\n2 4\n3 1\n3 4\nOutput:\n4\nExplanation: You can create the connections 1 → 2, 2 → 3, 2 → 4 and 3 → 1. Then you can also fly from city 3 to city 4 using the route 3 → 1 → 2 → 4." } }, "cases": ["7219e739ac6abf6a39e141de2cb2077c9232bf435e87f0480dfa0c026523e347/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "ea1fc79f0e9f3af73ad87e7702346bdf1a9ea85ae21bfd6cbf640b7f943885c6/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "7ba6aa9daa39981e65dd6cfbabea23a0d2f77df22409e20e73f333e1122ed921/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "584c82a8431c051800ac52a14a6de01a2ecef71c6df6ae5c1e9e15c6a5a573ea/1", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/2", "ab77c61d0293e5ea4aea9caaca8b931a2be002f3877dea8e1200e54d3097dc05/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "afb565712316a5b66910ccfe6370fd8b8618bf011a86de26a3374188a3e5ffa1/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "b831f7286bad8d85242c14daa590d14a0f95b0119bfed9b0707a26df38872597/1", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/2", "16217d70b6cdda978366a3a88ddc9b8fee257f68b03310701d3fcbdcaa81a69f/1", "f0967b4d7e4d58cf04f2e4a317669460e32ac0e649ddb0adaf2a3da2799252ec/2", "4c532a128f64faf818d15bfcc78d8c215aa31d5d57583eade6f9a1f527701197/1", "42ce9b3c1b05c815e72c94e0a36ab6436d17b2ca9b3799cde28a42d8ea799024/2", "a80ee3932c980a60b6a5c3400aa5da33fd1ddd88b254eecac5d3db3d658ea9e3/1", "5cecb0659346d85af1b39f6887d1034790e6cba8ad9ce06eb7dc5d644639e95b/2", "77d1133fec36b33d5aad5af45f2c1671047d81d9dfb13a00f6487c500f2d65a6/1", "b80500a01f984c764f1a3b486622d0ef7cc5b13fa9bd57ec9015113eaf875597/2", "8c35ee397fe1f1cb02a818bcd08951859af589fcd93be4a8b947149a544620bc/1", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/2", "734a42d5f925d4684d37e3a04af8fd54abe053eecd14025eaa71a41482465474/1", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/2", "6f913cbc7eaed2923456f2b1338e4a34140943bdad427d69cfd8265848755aea/1", "3d52b6039f024cc978420d90f188a7b152f1d519383341049fe48be04a805ee0/2", "c3855e3c97dbc45e4c90dd5ab84584d079c5371580c6e1ce8f201c05e6e31378/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "f9807b3e6ac100ea0811d4b59d367d047967d869bf9955e943646cf3fd5ceb3b/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2"] }, { "id": 2402, "name": "Two Stacks Sorting", "solves": 24, "attempts": 96, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "You are given an input list that consists of n numbers. Each integer between 1 and n appears exactly once in the list. Your task is to create a sorted output list using two stacks. On each move you can do one of the following:\n\n- Move the first number from the input list to a stack\n- Move a number from a stack to the end of the output list", "Input": "The first input line has an integer n. The second line has n integers: the contents of the input list.", "Output": "Print n integers: for each number the stack where it is moved (1 or 2). You can print any valid solution. If there are no solutions, print \"IMPOSSIBLE\".", "Constraints": "- 1 ≤ n ≤ 2 ⋅ 10⁵", "Example": "Input:\n5\n2 3 1 5 4\nOutput:\n1 2 1 1 2" } }, "cases": ["f19d1b4e07b0194c5b455266bbc842aaacdaa70714a5c9f520f4223134662ecd/1", "7783b0ea0baad310419d2d9fc3c14688a68a40c7ca23a5e247131a8ce6dfb40d/2", "d3f5e3bde9c59fd95f0359ffa377ab1e6140c2b4af499547019a6ba58f0b733f/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "c3622ee6ceacb8545a7553b7b3379d7969682c1cecf184500ea5232569c2c547/1", "5dddc1082b70926077417f6626e5a6ca828df3a0c1b324efbf333e5ede280021/2", "0be5594fa61710760bd37b2df0a27dfcafac84e8d0e0f9184a205ed44ece3146/1", "fd6757f9693fd8f8f97689c544691ac8e81279cf6c1b9c394777e6a955e63738/2", "98acc55246bb1e4c7a1327c0698607a0cd5d380a527c354433911a7615b3b4b8/1", "fd6757f9693fd8f8f97689c544691ac8e81279cf6c1b9c394777e6a955e63738/2", "0ae83947ae6a1415f989e82bdef0fd48ea704a320cfd662f7907d8a4eeb80f1f/1", "a8ac1175c7b7fb0c8b7633a40fbf41761d669cf4515a467ae994bdc18afc3b96/2", "58ebc2a5f93bf6a9587ded8a0c46bb6984cf9ea536bc39e1ccd8342cd133c31b/1", "b9f750493b20fa30e2086c35cf22c193cabc502e9402ff1ee21c78a259d7347a/2", "5e8186947873d842ee6320fa0c3912d7ede165e6f2ee8287f7f8a2473713be7e/1", "aa1821e4d0c83dffa0e53bc56a56a954a5f5c56dfbe6243cdfdc83847d252c9a/2", "09417fd84b5d0c13dccbab77dd1b856f27b96c6265b062c86a00b73ccbeccf8b/1", "2507be880603ce3a2b059fa5c80178b55f560b558ed8f21e286e42d1cb5e79e5/2", "54a90897070ff383f67e3971af7c408e19b2804b5386a80e9cb20328f0d26a57/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "33a741c0e1754752ad3eafb91d53c5b03cb37dc517ee223f78fe364a263e3b16/1", "6e7b75ae4b7fd3a3d5a2cb35eb321c274bc7bcfb6b8b7169c6e65823bab2aa3d/2", "f67329512c8bde939d2db5d158253c599bc50585b0c98474042dec12558ebd3e/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2", "5bef29ec4f8bd2d9ad5cf9247d17846251ba5d67a28807a3e99e6f1bd09ea547/1", "9584980048d9de2c9e87643fafd8c33b56cfd1e45dba13926b77e708936efa10/2"] }, { "id": 1701, "name": "Tree Isomorphism II", "solves": 195, "attempts": 221, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given two (not rooted) trees, your task is to find out if they are isomorphic, i.e., it is possible to draw them so that they look the same.", "Input": "The first input line has an integer t: the number of tests. Then, there are t tests described as follows: The first line has an integer n: the number of nodes in both trees. The nodes are numbered 1, 2, …, n. Then, there are n − 1 lines describing the edges of the first tree, and finally n − 1 lines describing the edges of the second tree.", "Output": "For each test, print \"YES\", if the trees are isomorphic, and \"NO\" otherwise.", "Constraints": "- 1 ≤ t ≤ 1000\n- 2 ≤ n ≤ 10⁵\n- the sum of all values of n is at most 10⁵", "Example": "Input:\n2\n3\n1 2\n2 3\n1 2\n1 3\n3\n1 2\n2 3\n1 3\n3 2\nOutput:\nYES\nYES" } }, "cases": ["689c49098a17c758ae3ea70f6f28ce5eca058f2f2a815a2470719d2639738a50/1", "817776074defb1c3e975f8b0a44631c2040d0899386569417e9d55d68f713d36/2", "052586e715866a21d640b8ad9acc3dd6827d4de9e8a791012abffcc57771ccda/1", "2ead4b4d49568ccfe24e40da3d22bef2611d66d3489996e54d822da246982deb/2", "b8af616e1ec37ea050dc1a1929f982586d57df325cfa9e14229a066b6bcc6eea/1", "0687d4038b98fb4f0a29fc40858eed4b10997c5e36fd2a5803a54298ee5731be/2", "e7da6861ca805d734fa3f3fb542d395c456b991606c88a5d263d0a5c1ba23125/1", "a115e91c2e84c3078fa06914eff28d07590ddfaa47a55fb4f31dd7c5b3566194/2", "3a9e6a9ac933435160b86ded34d04427d3fa88b60ac9cc890927a3970a4d6b63/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "22286006269ed43cf8dba03d0191bd9c6b3c2b2a1616946f791f37dd849a5b09/1", "a115e91c2e84c3078fa06914eff28d07590ddfaa47a55fb4f31dd7c5b3566194/2", "a3272017a09b551dcf7d781139ee1558004bf6169229ab4c373b7f7e6e69c3f1/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "74a0596457f9f1ecb99271ddb3a9394cc2b6dc29f3809169f17d4116ef33d1cc/1", "a115e91c2e84c3078fa06914eff28d07590ddfaa47a55fb4f31dd7c5b3566194/2", "5b6bb72b4339abfcdc78189bbe1cd5be11d4ea30d0affefe560626c620fdf8da/1", "cfe72034a9f298fb79a6c1f2302673bb449c826d446b3efafdde95e6c48dc3ca/2", "fc88ff7c16ebd232e8620477dbeab176db63fe810fe78e039619ce209fe911e8/1", "a115e91c2e84c3078fa06914eff28d07590ddfaa47a55fb4f31dd7c5b3566194/2", "e89a72825bd1777a4d65a2e2071c95790114352bdabdc735d67ffa83bedb2966/1", "4779aa236e87b3bc668e1388de82ef3ef01d5957af4392acd68277a2d0965abd/2", "d449294f01a8cd72fe914b0ecd7b9a92410641b3fc12a69ef2268310f34a6cc1/1", "f2937434705c4e761c67e5ece889afe5e1622a2e6c652931710137eb403f16df/2", "533c47f9df3031713e767364009aa8aa200aab8f8322521856965947731ea2ea/1", "a115e91c2e84c3078fa06914eff28d07590ddfaa47a55fb4f31dd7c5b3566194/2"] }, { "id": 1705, "name": "Forbidden Cities", "solves": 159, "attempts": 197, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n cities and m roads between them. Kaaleppi is currently in city a and wants to travel to city b. However, there is a problem: Kaaleppi has recently robbed a bank in city c and can’t enter the city, because the local police would catch him. Your task is to find out if there is a route from city a to city b that does not visit city c. As an additional challenge, you have to process q queries where a, b and c vary.", "Input": "The first input line has three integers n, m and q: the number of cities, roads and queries. The cities are numbered 1, 2, …, n. Then, there are m lines describing the roads. Each line has two integers a and b: there is a road between cities a and b. Each road is bidirectional. Finally, there are q lines describing the queries. Each line has three integers a, b and c: is there a route from city a to city b that does not visit city c? You can assume that there is a route between any two cities.", "Output": "For each query, print \"YES\", if there is such a route, and \"NO\" otherwise.", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 1 ≤ m ≤ 2 ⋅ 10⁵\n- 1 ≤ q ≤ 10⁵\n- 1 ≤ a, b, c ≤ n", "Example": "Input:\n5 6 3\n1 2\n1 3\n2 3\n2 4\n3 4\n4 5\n1 4 2\n3 5 4\n3 5 2\nOutput:\nYES\nNO\nYES" } }, "cases": ["1f4d571e17fe7efcddc67e9199d96d792d134931398f1fa81d69550b519e335d/1", "d5bac0789b9cd9caa65d62dbe24254cdf8ef0ddbc46092eca7d8bfdf33704608/2", "6e30e5a35868bd64c99bdb1fd335651e2c8b366d4ac67f9954e710d3a0f45546/1", "5c7f3a750128762c11e766c92578567c101664cf14c7757f607742191ea2b5c1/2", "75dad923ac9f4ab23e178d7a1b0fd3ca530a2bedcbe652d1076663fe9e4e5ec2/1", "38fb5446a5a3d99c94d13631b138a311201b9ba4e519ce900f69b6f23ed0a506/2", "2ba6e7991464b594afabd8016c32bd25eb058407b56846bf12476d9548a89447/1", "a2ee9937129e39f8a698c4e7e8a0df16622b99052f7078ca450a5d77a5c391b9/2", "f0ce5371ce36c4ccecd485c98ee06ab129da6e8b12ebc066e343ef3de6458afb/1", "a2ee9937129e39f8a698c4e7e8a0df16622b99052f7078ca450a5d77a5c391b9/2", "9a778919f7e32ed4c72e1859ee2c67cb0447721fe05b773d252269c792821ef9/1", "08c08bfa1da25e9c3e9dba5301039684a3469de65c3fc6ba58a4ca7442abb545/2", "d49739463e89d3fa5a0f3ccd6197168ad99898aedc93b644a2ab408b6b6797ff/1", "28730974bbdd668da0b44d98d3155e2354f2fbb772fb9ec9a7ba8ef353775456/2", "c835afbcf938d6f25816b65dd93292180a13da2cf27efe39c079ebd414fef15e/1", "4f3795cbaafe431a6f3952179cf464b2db42b60c10ef23c70e40a653f15ac5f9/2", "b772c5f792c6cf867ecdac12703346c389b112e7b9827826572ee924af34f8fc/1", "78409b66cb320ed6d988f0b038dc410de607770625e8a9bb4ac87ce89ee746b1/2", "b75ad74377f85561242fa273dbb4fda64eaa3fcb9db276d0c7043d346ee18bb3/1", "391f9b9a495166485b55cf1013e2c8618e3056b9e4c58ec89d7c0f9cc23f34f9/2", "8a9b78861a995a35c03e23dcf222bcd930766534f94b6a353693a0dc6b28c727/1", "93b5347fffd40e551996b56f558195f3dc435b2e45eee8b9168a8a6059107800/2", "cb60984fe4932e653219b1193000e446f432e5bf35f7790ec9c7e7d1f159646c/1", "5c7f3a750128762c11e766c92578567c101664cf14c7757f607742191ea2b5c1/2", "481d0929e0e1550d48f916d37319ac58260158aa27fd21cfbed53719a0f20cd7/1", "e29f7dfe16dab09e9930fa69c1c93a88b049ce519bc15d5595a9566feacf5da4/2", "914254d7bc0b721d00749d27095efae96f2d8cdfd0148b6944dcc02bb7bb2634/1", "a115e91c2e84c3078fa06914eff28d07590ddfaa47a55fb4f31dd7c5b3566194/2"] }, { "id": 1741, "name": "Area of Rectangles", "solves": 245, "attempts": 284, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given n rectangles, your task is to determine the total area of their union.", "Input": "The first input line has an integer n: the number of rectangles. After that, there are n lines describing the rectangles. Each line has four integers x₁, y₁, x₂ and y₂: a rectangle begins at point (x₁,y₁) and ends at point (x₂,y₂).", "Output": "Print the total area covered by the rectangles.", "Constraints": "- 1 ≤ n ≤ 10⁵\n-  − 10⁶ ≤ x₁ < x₂ ≤ 10⁶\n-  − 10⁶ ≤ y₁ < y₂ ≤ 10⁶", "Example": "Input:\n3\n1 3 4 5\n3 1 7 4\n5 3 8 6\nOutput:\n24" } }, "cases": ["0277ed23209733275114f81d488fbe45559dc5fb821effd25a064269ba9bed33/1", "79f0cdc11a64b21e76816c25cc0d066a873134770fba891b54e01445c2620c4c/2", "b300158ace8ac64c170eaaa9e93b42ec877fd26529f7ee2bb082776ae130b506/1", "e675d6284d97cda6201b109e88e0315a3a6d1993f5bc16b0b241782a5f89a297/2", "0227fb72793aa7012b941d5e079d94f6797a10ebac0a1dbc0fb16cc58a87dc58/1", "26f96ea273758df32b97f99457df0a670bba7fd5626f8ec981007c353c420998/2", "59fe32e4cb567e630b0dd013ef1448f3808ce11539b96d44df306e7b2a382088/1", "5cf21a136ce6d6fd0f0cdc61f08069c8881fbff0d815449789a6e2512f582020/2", "a8990e28ea5a4063290ad76e368f6ace79ef036a7d59bf25d22eb83ec59a44d2/1", "58cecb2e90b3dc62a5daea796f59bdece5b0fffac805ea88fef9a0451a03d55d/2", "8891b678e6863338eaff42585e0392d493538f15b509581188c3cabadd12b21b/1", "1ddb2a09db3ff39a613a32292b99b64618f641fe2e841e240fe3eacc83a33fba/2", "1d15dc5545284e898e1d7c0bd757ce94efc0c030dd24f7b52086714e14db021c/1", "a9fb1daf701143986d57653f97656acfea840b52dbf38f15b6174bdd55e5ba74/2", "28ed9d84ccdb1b27bfcc941ded79f6863855ef623dda1a9ca91413cf19d10285/1", "7ce9a8bbd1374d782515e3f4158615f3692cec198485ee85e2f3d79e62275c35/2", "4b32f9c435806b14f6af94bcefe527d90cd331ef74bda21d1959e67972f15e09/1", "8c97c8da3024e71d802fa3b28c1f4f4fc99be34aaf588c8c53dda16aa0da9688/2", "612b639d82f1b3fe2ad8893fd43e9057e5f79ef87922ff4c8e6fa6fb38fe7ab4/1", "9e0c093a5cbcf2da7c4d5e771bfedffd02ffbc92965654c775b5aaa46fc9215a/2", "d9708e628f8bd2ce898e63bdc16fc475866cd7953087b2c145d72c1ac2179b5f/1", "7313f54d81179672aa750adca0556fb9db6136c6dcf2db9bb3ae83fb994fcea1/2", "412f03dfda30ca9df99af0ff6522a9f399d64e80f2f49c2f8bd8431e61ede934/1", "7b006b4c33f0b7ae7068b7501b2034aee6099eb72350b7c4dd18788b691b924e/2", "81c9f963a97aaf605014c1d5962421f564bcdef22b73bf7f9c4a8a1389898804/1", "39ef3b418bfd70165ec1d871b962b1f734f33de4d3b83007222f8753f22404ed/2", "105c51e77b125fa9d2ad46f12aba770e88079e4c8f241ef33ce50d3a762e83bd/1", "68ca3fba3b7e864770cb61aeb306d4bd4354b68ab4dd38450860c5d823e42a53/2", "d249ff0f4930bffcb569e2f43585fcf7b66d776ae65562600c762e7f6d688147/1", "932ab0a0e4191d32c0af7b3f565b7b180dbe9869378abc5816f9add54b806e7f/2"] }, { "id": 2429, "name": "Grid Completion", "solves": 42, "attempts": 58, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Your task is to create an n × n grid whose each row and column has exactly one A and B. Some of the characters have already been placed. In how many ways can you complete the grid?", "Input": "The first input line has an integer n: the size of the grid. After this, there are n lines that describe the grid. Each line has n characters:\n.\nmeans an empty square, and\nA\nand\nB\nshow the characters already placed. You can assume that every row and column has at most one A and B.", "Output": "Print one integer: the number of ways modulo 10⁹ + 7.", "Constraints": "- 2 ≤ n ≤ 500", "Example": "Input:\n5\n.....\n..AB.\n.....\nB....\n...A.\nOutput:\n16" } }, "cases": ["a3dc5dfe046578c82f5a6084ecce30b3af373f8d416eb31165e18eaa9b493cec/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "ca09b73f2655c6fc0b76d4f93e149962b934103e3423e4be0580b20ffcfc2111/1", "7a6efc5bbc4765ac825b9a5a60448310e321abd37e9c85aabd8f8e9290de2e91/2", "2a57755006ef15c967908f93e8d0db439af4fa57d1c8e3eef45ab31fd4e645ce/1", "d447f4eac60a9f83bb89e4afd24625aed5f695fd344a36b7e38cf31a37088f56/2", "9a33c67b9a3c3f23ed9185286023b790a13d1f7a32c582c9fce1c8a856e14973/1", "48e157d7e025f1cbcdd32bb645f066739fbbd4636141570e66cc7b37012b507a/2", "ab4123324a6658db07b0f2eac24ea08800d04610dd6deb1eb8e23a3a7548df1c/1", "b90f335b2f616f6fcf7c3afe058efb3b03e7704675d380be259176924c9b7963/2", "739239224c12f75e643cb360c058007959459a323e31e0dc8cff439909872b75/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2"] }, { "id": 1752, "name": "Creating Offices", "solves": 111, "attempts": 150, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n cities and n − 1 roads between them. There is a unique route between any two cities, and their distance is the number of roads on that route. A company wants to have offices in some cities, but the distance between any two offices has to be at least d. What is the maximum number of offices they can have?", "Input": "The first input line has two integers n and d: the number of cities and the minimum distance. The cities are numbered 1, 2, …, n. After this, there are n − 1 lines describing the roads. Each line has two integers a and b: there is a road between cities a and b.", "Output": "First print an integer k: the maximum number of offices. After that, print the cities which will have offices. You can print any valid solution.", "Constraints": "- 1 ≤ n, d ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n5 3\n1 2\n2 3\n3 4\n3 5\nOutput:\n2\n1 4" } }, "cases": ["436e5ebfb11a9aaf19ee59998a4f1257493eebabe62678ccdf9bdffe9cc5a515/1", "0db1a1859b47b756ce60d5097f7e5130cfafd00e2cb1f223e7f4f2ab0cefc83b/2", "3475442ba804eb2d6cc534455f31e7ff407c113951343cdf83fc7dc722793437/1", "03b9289cceaa36fe59606f6744de5338dae3267842133e2d3d36d8c3fa3a72e1/2", "85ce731534c1ed8e5e92d1584ced12ee406e08e08b91a15a1e3b69aa812337d8/1", "a4756be2aac37c05c2bf54a4047564dacbb3ce77deb8f219adfe87aad8085e9d/2", "7c48af00b0231f2ef427e20ddd7cafcbb45ccc76eb43c29b0a003b8743da7e28/1", "c77f88da3e131a0cb1199dac27c3fa056302b7622dbfa9cf661ea636219527a7/2", "bf8cfecb4f586d482f4b74c3e606d62e83234c80923e03511ccabeaf126caada/1", "a2fd7ef1279ffa2677e51b8bad11c9945d988a94100e0953c64302e1a7b08c73/2", "00ef2516d6e2d1d418b03a445dcb79ff8731f241de78d939fba8a5fb9ef2fd0d/1", "b279287aff34b4c29853978e35f787c5d0ab2ce849206d9fd06964c273d4ba7e/2", "c99db21fa9389462116d57ee1b3f757d45ff1a43e7a4cd4efff49a00b5c094f6/1", "3172d1c6e82c323dc4f8f6e557c2f185a4e8df5c754a50c8a8d381e33201d485/2", "0a918403e0ce5c2c21462763d38a943bfdf87027c496cef759a932cc91ad5f17/1", "8239c92c34591dd04439495522b0011daf971709b975dc2380a4ca7c5569778b/2", "81696a8ba801a4991f4c60d9e182ec040e629790f4bc5f77d89ad02d3457c4e8/1", "79972867bbe2f4987c7ec5cf09a092261759c5c0bc438c594c5c6c47e1541e23/2", "b2ccedcc33a13e080b466664c9988e5a87ec410b734e1f57e8e66fd2897c98ae/1", "c6900f677ff952b9c70825e55438085efcb90a04f24d6015d546ae41f0c360cf/2", "3364281e9fe03c96214c43761b92c25e178ee698c22dc5ce63cf002ebf7ba6b4/1", "bc814b41d422cc394eff7c851e709d410d7046eb2fbfb80ae70686750990f361/2", "74ead7e7be654b554985b006fbadf9c6f13694fd1e66494efbde3914e771db32/1", "00e083835dcce34b76c5cbfcf84d742255586d159ab44e273a6ea61633386434/2", "7d657b5bea32ee810544cd279b8882db7b813de3aa663ee0c1786d2da6ca63d4/1", "f65430d6d1c34afa869d559766fe217200601844a4f3e819fdb9e88c67b513de/2", "17afe41319614fa91a944b35e867784425498afe8441551ec43ff6659995daf6/1", "d37470ae1cec649f7bd3c7d4891964affa1cbc148ef769ff42b29d379da023c9/2", "5d9c7e99a3a428657e6c011ca5bff952507533de853c0d9f0b35a11a19794418/1", "13cadcb7cc6b028f06e9d81d901ea543ccdd5dbb43f806923883c08c368f9683/2", "aa1b91916b90f20a1294e271ca3e8c3284c736417637a21e733b5fcbef14fa34/1", "7c1dba3bb9112e3eb7f8e01b328c9315bac95e05db130931951a9550bdf47e46/2", "1248bf4c7f403aa18034245654d2a8a2b2107745570271b5dc82b979ec59ac63/1", "48dc7c0387c14030d7f664556eae52763af8a6de181885e0c011ae76937382be/2", "b36d0f0a6133897ff93ba68e8f8d2613a711c258410bb403b94d2347061319db/1", "5b36a24aa0ab8d08bdfdbfee3fa85b24a1ead8557a521328fa21f5e45f1f71d0/2", "e8e60be3cc897b522a575b802c9bec06fc3fea0c0d639783af8f530803145521/1", "7aab9919f01c39803b5359d3acac82c00de865ec303742e231648cb7e58a3ef0/2", "10ee07b03160b4c06d097180784acda20fe45aa5ee89b388c10cc07d8f8ea3c2/1", "752759ea9a2f7c70aac6b7fa96d5b6c8352a1fbcf9cf4a45c5c1b9829dff7519/2", "3f11ad6bbc7ecca0b2416b713dee77f1a635c00aaeaa946e14cde1c2bfae56d5/1", "c9a1a5ca561d46dbf3efcde9f2dafe07ffef8471a543be5a607a2ed770a329be/2"] }, { "id": 1075, "name": "Permutations II", "solves": 258, "attempts": 290, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "A permutation of integers 1, 2, …, n is called beautiful if there are no adjacent elements whose difference is 1. Given n, your task is to count the number of beautiful permutations.", "Input": "The only input line contains an integer n.", "Output": "Print the number of beautiful permutations of 1, 2, …, n modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n ≤ 1000", "Example": "Input:\n5\nOutput:\n14" } }, "cases": ["4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/1", "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865/2", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "7de1555df0c2700329e815b93b32c571c3ea54dc967b89e81ab73b9972b72d1d/1", "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3/2", "f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/1", "9a92adbc0cee38ef658c71ce1b1bf8c65668f166bfb213644c895ccb1ad07a25/2", "06e9d52c1720fca412803e3b07c4b228ff113e303f4c7ab94665319d832bbfb7/1", "4393447bd3c1d55ea7f97417ecb1b36a691ccaacaaf2ebd21c59a5acf825fb7b/2", "10159baf262b43a92d95db59dae1f72c645127301661e0a3ce4e38b295a97c58/1", "26f96ea273758df32b97f99457df0a670bba7fd5626f8ec981007c353c420998/2", "aa67a169b0bba217aa0aa88a65346920c84c42447c36ba5f7ea65f422c1fe5d8/1", "28d372ad5c05ae73210d49db08e8df8d9615b342edb39e5b3136583cc2a8747d/2", "2e6d31a5983a91251bfae5aefa1c0a19d8ba3cf601d0e8a706b4cfa9661a6b8a/1", "b7f832f0a449b0e2e68d2994b9abdac14ecc0e0990b2fad031d02f5b98d8523c/2", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/1", "804e96432a89c9abb40762c65f54076727e163bb0ee9c1e715761fcc8f83a3cb/2", "ea243e5457028e97f9bc93b37a72f8e80ea61ae081911bb037765590ee6aa435/1", "65386c31a2283ddb3f320f3b73fe2fba222873175f466c10214c302aa58502e6/2", "6d57b664a1e6a401b8352095ad40cb5f8a5b95f32786bed036895569bcbdf2b8/1", "cda7fcf84953d411273d5f2a9d9ce16e1b35cdcf1f75b6508b10901e8a0944f0/2", "7d95d2923118bf3cdf3f5d4600b1df557deb75d0ca2ef0f8d3718c3691c86455/1", "8d169c652bd0717285ea9e4e721bf9923ec769f247241603f7a42efc90c4ff04/2", "e1b731715e45909f0522043acc90cb457dd31a8736186c058cc3fd6271878326/1", "498e31aab845620a08adb05b5856e439affe1d1de2d1187cdb898079c0bfe366/2", "7a0c02b0c9d5b023a170efa5cb0e0f27cd619b74738c3da4dbb131bb53a05c8e/1", "1d1d9bdeb23b09a64271d880b71db0c029b4ea81d0e0c428516777e64198b5ec/2", "8d9bcdac558e606c913189b6ce8db44c6eca9ccaab11f00b8226fc660a119b1e/1", "6cd0270ee3cc5eb28e01f9dd1b9435416917af3ba0002c90122b9e22b0cad006/2", "0f8a3eec58c0e6ecc0c9fc9ab9092146b0d428853da1c9824ed6d7423fa5dfe2/1", "1851a0895b2b86fff2feb4070527ee4ce1c963121c15ee3d7528082e6ed1c3d8/2", "4e40df1e1d2f312e8d43e67370cae22b1c761c7fea214011b11349df71f7fd62/1", "fdeac2e0d2c95b7e7a644ec3b6495ba707725aa94dcd25b10c97233b17593ef7/2", "deaae34f8e1487f857379b2de5d6ce002802164f33da926fd82a9a5e12e2d894/1", "ce010ade0f4bc34a3dc2f20b8340d8780a7f40bbbb9c5ed408ef6d2d5029a1ce/2", "dc53720e87cc2873e59a79291de7c2b699684ceb75ab3e11baacb80f3ed44185/1", "7ee988e09f20d6c4850224436e8cb334041ddbe6b358953e2360ab6660777d3b/2", "83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9/1", "a83585f79d9c0b55f23f2b4bed4a68e6644ddf2c7c4bce143a1c87784974ad30/2", "7231b4356461444276804b82875365393249b8de04af57ebb55eda875c0cff1c/1", "35ec64fff8c9b35b3be0035846c88b2ecd764e64e800f3753f7fb235ff73e83d/2", "30d33d45f7c4b3a30b3db06dbf98076bc7ca99be23ee5698062947e09cdd12e1/1", "7a5dbb5a2d94dfafbf6e68492144e0679650476ee53151618b8c6dbf2ee46e08/2"] }, { "id": 2415, "name": "Functional Graph Distribution", "solves": 39, "attempts": 47, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "A functional graph is a directed graph where each node has outdegree 1. For example, here is a functional graph that has 9 nodes and 2 components: Given n, your task is to calculate for each k = 1…n the number of functional graphs that have n nodes and k components.", "Input": "The only input line has an integer n: the number of nodes.", "Output": "Print n lines: for each k = 1…n the number of graphs modulo 10⁹ + 7.", "Constraints": "- 1 ≤ n ≤ 5000", "Example": "Input:\n3\nOutput:\n17\n9\n1" } }, "cases": ["f0b5c2c2211c8d67ed15e75e656c7862d086e9245420892a7de62cd9ec582a06/1", "af9d612d65456c28a60f93c1e15e79ac75450da4b73baeff91b7224b927f54c0/2", "917df3320d778ddbaa5c5c7742bc4046bf803c36ed2b050f30844ed206783469/1", "4a3fd5422809b35de71ed0b4b5728b1936458524742375c29540d1766fe0c1b9/2", "5378796307535df3ec8d8b15a2e2dc5641419c3d3060cfe32238c0fa973f7aa3/1", "437af2a39f3c0d79e49d355a77a6bc3e15316492132751ae359edb50b9040745/2", "7ea9844ae84eccbf55e8330640865e36c43521e45a1baec24233327aab7e6595/1", "7bb93ccf0e6878fd795f8367f1e8c6090807ffb0f59ab7872d426b4c49d55d0e/2", "eea8254c7500ba3de996aa8ad6af399183f04e17d4a8102fde539dbc93a90012/1", "392fa130694e6d8d4399c484dfa2bfeb6881207d4967cae8c32e4117c7b99299/2", "8b51f72bbf8d852192e7a54a088cb18e1b5e654770231d5b7248b8fd0ead67ed/1", "e218972b045d8c3e89aaae4f6a12c226973adeb58976c4b41273bdd4fb82cc55/2", "1880a4e62eb46acc4153f0cd2a5331b303904318de4143b3c80b4a45ab9031c4/1", "ce454d192968aa59f493d829b67a52404dc71ee3661c9741de16c8cab8986024/2", "84b9399ba1ce23f356e882a473805faf9794dc028784335029fadc1a74909339/1", "e989c775e2a2bd6cb4d9955c3318878d2eac52b84376a61e85991bda17a1fe75/2"] }, { "id": 1685, "name": "New Flight Routes", "solves": 119, "attempts": 235, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "There are n cities and m flight connections between them. Your task is to add new flights so that it will be possible to travel from any city to any other city. What is the minimum number of new flights required?", "Input": "The first input line has two integers n and m: the number of cities and flights. The cities are numbered 1, 2, …, n. After this, there are m lines describing the flights. Each line has two integers a and b: there is a flight from city a to city b. All flights are one-way flights.", "Output": "First print an integer k: the required number of new flights. After this, print k lines describing the new flights. You can print any valid solution.", "Constraints": "- 1 ≤ n ≤ 10⁵\n- 1 ≤ m ≤ 2 ⋅ 10⁵\n- 1 ≤ a, b ≤ n", "Example": "Input:\n4 5\n1 2\n2 3\n3 1\n1 4\n3 4\nOutput:\n1\n4 2" } }, "cases": ["74d507b5189532012d50cd4107bae0d42d7b8f2642067da79902af30a5a99a6d/1", "14e9166442099353d8002d65723850f557c83237676649f1b1cc0263c7003918/2", "8106545131e4d07a0f4077f7ba4bebbaa8951116df3286b47b0b4d0354c12c5f/1", "f4fcde5179538166f66ee9713508dda6664865609b5c9c8a24d51eff9dd5ffe6/2", "473295563e1f76298f69ac3ac1092080f2a7bbf7cb76084a370f3007ab919518/1", "870137781d481596d22db005eb3bf42e1ac1ea07e6ccacddb1cd6f4a68e3afe9/2", "12ccfa295ed2b1b88a539715d86f6222a97e52938bcc484999d0ee51960c00a9/1", "0c35321c71ee597d9fcac604e0e4bfcb0d48d3a74a4f6e2e282e96c6af224fd4/2", "a5c1b951a1e82cac62147fe818d67588cc0497b41a911e0ca4db208387669fee/1", "871416d3e9445119ef7ce14802098de9d83f99b2ff4633db05383d2419fd06de/2", "9e2af69967b75bce09df8998f464141176f2665c20f8ff949725dc6e18d69a97/1", "dec71369fad1d5334bba6d3b7774029240ad4e0b2380436d49e866e60f7e21c9/2", "968d1a0eb3afa90df4cfac63a71e98f0d608ce16897e17e5fabb56975dbd0693/1", "ac967f00232ec1a0bbf0473d68123c7f7cda60ae341fc6d38c620ba925eda89d/2", "0eaa2759764e6ae5a9c4c4ac7d41dad86faf2e7d7347968927a76c113ce6859d/1", "fa732b0b719c6d650d9deae541d9c5fde85cbbcf6e7223595442835d1e31fdb8/2", "980f8ee698eca82687f8dfde8f8a61f5721fb8b52d2c694192ca2bdefa754070/1", "77ba9ed4f54c8bfc5559a1dd758b5cadaddb4acbe577c24c09aca333ccf9212b/2", "668f01769e853f9f2c33e063924740d03787d1da6b631b97cf3a875ef17329f2/1", "1e97a3782a634892a02d2dcf6818d15d246035707bf0a0a32a88a922082c9827/2", "5e7ab5c2474d9c3a8d7fec7c557961859ee03c6f00199cdecd3935f63a26f1f5/1", "803d21caa1feab07b4b7eac21cd1a06b9a3f12a57c2ca89f4cea5257e269f549/2", "d0a0072634d049077c8050b4b1f7728e8399c43b822e6d5e7fbabbd9b4a8a3e6/1", "8aa6dbd98f614c2697b4dc7d06a100ef3a572b4fd9d3e05b1e48303ae57bd779/2", "57730a9d6cd39026cb5f6e3c9a6fd7113cb96366be2ab90d2ae1f5ddf91442da/1", "28a47bc7d601e18de0b873b9010395b6e7d6c7a9bb69a4615eba9ea45412975e/2", "0f236f20bd78d9b676226d72ede058ec57fe6ba4e7ed0b977614c7b7234ee0ab/1", "ccec1aa08d1f89fa356763b86809d9f13e41ed1cc865a2dedf0fcd105f1858fc/2", "7219e739ac6abf6a39e141de2cb2077c9232bf435e87f0480dfa0c026523e347/1", "116082d48235a9924902bd04f5b97f1006b8f5cc476802b125d8ef2822067f2c/2", "7219e739ac6abf6a39e141de2cb2077c9232bf435e87f0480dfa0c026523e347/1", "116082d48235a9924902bd04f5b97f1006b8f5cc476802b125d8ef2822067f2c/2", "7219e739ac6abf6a39e141de2cb2077c9232bf435e87f0480dfa0c026523e347/1", "116082d48235a9924902bd04f5b97f1006b8f5cc476802b125d8ef2822067f2c/2", "7219e739ac6abf6a39e141de2cb2077c9232bf435e87f0480dfa0c026523e347/1", "116082d48235a9924902bd04f5b97f1006b8f5cc476802b125d8ef2822067f2c/2", "7219e739ac6abf6a39e141de2cb2077c9232bf435e87f0480dfa0c026523e347/1", "116082d48235a9924902bd04f5b97f1006b8f5cc476802b125d8ef2822067f2c/2", "7219e739ac6abf6a39e141de2cb2077c9232bf435e87f0480dfa0c026523e347/1", "116082d48235a9924902bd04f5b97f1006b8f5cc476802b125d8ef2822067f2c/2", "c147ac3e4715aaeaf9b0a0b51db095c5827e67b41b0b905ee46ba8c14591c728/1", "c518c0261cb474a4039c9602241862ca2afbed948fce570f4fba6e573a7f11cd/2", "6fd91e27c9742fecb795d405e51d9141eabd9ec0820733a552abc5e7c579884e/1", "99b67ad88762f3c3c76cb8e282216156813715b24d4d3138b71e5e38bce875f6/2", "af3544bb04f46c71dbcaab0baa945ea520a99b75768b291ed4accfa878262bcc/1", "058ba956d3d370ed3d5d2bc19636ab03257362693387a839af97b349da9cd50d/2", "f6a6eac3890e996d08eb2a41ee4b5cf063e32f433ec92eb0156d9cecc6d2bcf6/1", "3a6616cedeed198e7765d02f37ad47c54ebfe24237a15f950e480ab19343f3ca/2", "745c7d7838bbddcd9d29d237d242be1efd70795273cd75f72fef9726b1d0bb32/1", "9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa/2", "23cf147b23856c82ece69902ce080d028f23c5e6b2f342dcdae12557c69ee767/1", "ed7dfd8753905c9655d14c59d6620abcff158f197c590af688d91999b7299600/2", "e709261afed45f980a7ac420cded5655c800bd21b261e37db76d90b585735ebf/1", "ed7dfd8753905c9655d14c59d6620abcff158f197c590af688d91999b7299600/2", "1526044f08edbf3a0493b6afb052b2c3cdaf815dd08535ffd0b21171f10e61bf/1", "f09c437938fe22634c9fba4ddef76d82f2563c766b66e749ae54072ec8a9cbae/2"] }, { "id": 2418, "name": "Grid Path Construction", "solves": 21, "attempts": 39, "details": { "limits": ["1.00 s", "512 MB"], "body": { "Description": "Given an n × m grid and two squares a = (y₁,x₁) and b = (y₂,x₂), create a path from a to b that visits each square exactly once. For example, here is a path from a = (1,3) to b = (3,6) in a 4 × 7 grid:", "Input": "The first input line has an integer t: the number of tests. After this, there are t lines that describe the tests. Each line has six integers n, m, y₁, x₁, y₂ and x₂. In all tests 1 ≤ y₁, y₂ ≤ n ja 1 ≤ x₁, x₂ ≤ m. In addition, y₁ ≠ y₂ or x₁ ≠ x₂.", "Output": "Print YES, if it is possible to construct a path, and NO otherwise. If there is a path, also print its description which consists of characters\nU\n(up),\nD\n(down),\nL\n(left) ja\nR\n(right). If there are several paths, you can print any of them.", "Constraints": "- 1 ≤ t ≤ 100\n- 1 ≤ n ≤ 50\n- 1 ≤ m ≤ 50", "Example": "Input:\n5\n1 3 1 1 1 3\n1 3 1 2 1 3\n2 2 1 1 2 2\n2 2 1 1 2 1\n4 7 1 3 3 6\nOutput:\nYES\nRR\nNO\nNO\nYES\nRDL\nYES\nRRRRDDDLLLLLLUUURDDRURDRURD" } }, "cases": ["2629282bf4c564037cff10a8ea9b0df90fba2b810ad97bda782327d0f911b2a2/1", "ddef3901fbe759d7ab6f600e0dd3e9d181eddc9807748e9b4cc39f37200548c4/2", "ff39b37c30580b1c56dc934f730ae4b95e5fc7509f36939b5b37d875874d429a/1", "a934e4ebc3747f8a8ebd75ffc77edff8bea66f8144d945b44f9c37e463dea385/2", "145c4418f280b916846275a9de3bd20a24a71722b3fea813d9b6e88095a0afa8/1", "a9a688bcf9b556aa086d9316ecd37e8be32fd258d379fad0baba7bab96e4672d/2", "6e6621fc2d331b7f60b726a384760a9fe8e34032778d421ec8d2460b6e3e868f/1", "e8fb610de1fd39ed0bcb890d18d15d46f79c1d55ea90e2ac0ade251f0da1c3fa/2", "7d1fe1d29d7bc6fe53cd452dfb299b9ceda71afde5982b5d11ac61ad4ecae073/1", "530cb80671b71ad90c4ed387eeac12b4d92179e21d06a8b9f18b18c0da5a7e4b/2", "de7647fdcabce0b143e3adc362aa291c5f659aba0425a0b41c686509bab18bbb/1", "45a4096884660acc2fb4ccabeae72b8f21aa3e37e0891e7cdd9a23b1fc8a9cc4/2", "fad0b3a429dd250c88176b488ce5f7f2b78e8409ab12b6a74756ee79a45fdbc4/1", "49a96d906396485fe5e7a2469340594d8efc4b3e03099753583d34f1a9badf15/2", "2168b3524b102c933b3951d960865c91a8d7d25c588c6daecd32133b774a5ef9/1", "0f12a2690c987403def8bdfe74d9fcdcd066f9fdb624cf4c3aa61ed5487fb6c3/2", "38c4982cabfa97f1f910029398930528de5da3629e58dd3e8b8f5c8063afe6f1/1", "88206c5c49d2d0173b30e50534d4735af5d6b5eae47a23c2b06523511dc51935/2", "79646344bd91b22540a6fddec2ce95a838c29292895d6a0f0069ba615699f3b5/1", "17cf703c200fe708b8b2490bd352ebd7143e523d96559ec6ecd888fb57dd0fc3/2", "8bb0680311b5855b35c3daf48cea80a0189a9b080430fb41d19178b93cbf66e7/1", "56ffa732ec1d4ae496a6783e04e2315369dc849289beaa93bae926dd5f80b390/2", "1d2e6564a707e0ca87f84f0b9d7aa3ab73c3bc841d80abdfc8f72ca7ed649080/1", "05a2ffd08ac0a2059c5941bc8750ea711d0b93e1f8f0093936c3a7a8a406224d/2", "a50803e541e9f55194a6f98bb1a2357bc8cdc264c2ca5182110aa454401b0811/1", "82cfd66a4cc8985d3bfcfb843ae7c09c6f743d258aadbf84c5fbdc345904f23f/2", "3c5668923f21db8988d1694d8f45508e4e389ced6ceeb0e67b34ccdd1e7f2fee/1", "1ffb3b39ee1108f3cd5f56f85571b3c13659c2a0aac8e8fca5ce8cf86985dd9e/2", "7f8be806fd28c9a0a71df4559df9d97dff8d13908752e4069c0512580b806918/1", "280d738cb51c2be8273cc396804a62f0d1a36666f8d0c87391b9a8c4d49fbd94/2", "5da2609e636021b1b73ce531a4490d5a9c969a6367de26a316bde75cefe86c47/1", "7a7b493ed3797d81b00924c1272f2beb8fda39f0a0d408884bba1ea02fc593e1/2", "26da5b128f419b38bda5c3087b31caf50331f3b59a31dcb8b57719d892e16e2e/1", "fe0fc46cf1ec308ff0d4165d3d3369b196f53ae7ec764b787ab05e6e6d3be3b5/2", "4f17a7f11924b2f8d9d14a2a835df8be9fc21fa8e30fbad98b59544f96284b89/1", "ebdb0300de9301429284a556fb047b80105e9714d671e9aa549e796850885f99/2", "bf78a66c480b78756e784bc0ad03cbb8023120b3fc572fec06066ec13abc4572/1", "471a6ae0731a1b2b2ec68d44bab205fc265eef0870ec87231d8ca0cce3dc1491/2", "e7d6306abb8bdcdc812d61c1a946978794507c2fa9a50bab8a63269af2d8f491/1", "3b1fa0bee8a221599c0d5eebcf7219e9fd3b2f0a43dd289968bb171780fd7e69/2"] }] }
